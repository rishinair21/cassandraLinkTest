{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"brianmhess/ambien","alternative_id":12900,"content":"<p>It gives you rest...</p><h2>Building</h2><p><code>mvn clean package</code></p><h2>Running</h2><p><code>java -jar target/ambien-0.1-SNAPSHOT-jar-with-dependencies.jar &lt;options&gt;</code></p><h2>Usage:</h2><pre>version: 0.0.1\nUsage: ambien -host &lt;hostname&gt; -k &lt;keyspaceName&gt; -t &lt;tableName&gt; -o &lt;outputDir&gt; [options]\nOPTIONS:\n  -host &lt;hostname&gt;               Contact point for DSE [required]\n  -k &lt;keyspacename&gt;              Keyspace to use [required]\n  -t &lt;tablename&gt;                 Table to use [required]\n  -o &lt;outputDir&gt;                 Directory to write to (must be empty) [required]\n  -configFile &lt;filename&gt;         File with configuration options [none]\n  -port &lt;portNumber&gt;             CQL Port Number [9042]\n  -user &lt;username&gt;               Cassandra username [none]\n  -pw &lt;password&gt;                 Password for user [none]\n  -ssl-truststore-path &lt;path&gt;    Path to SSL truststore [none]\n  -ssl-truststore-pw &lt;pwd&gt;       Password for SSL truststore [none]\n  -ssl-keystore-path &lt;path&gt;      Path to SSL keystore [none]\n  -ssl-keystore-pw &lt;pwd&gt;         Password for SSL keystore [none]\n</pre><p>This will produce a directory of source code in the supplied directory.\nAfter running Ambien, change directory to the output directory and run:</p><p><code>mvn clean package</code></p><p>And then start the service with:</p><p><code>java -jar target/ambien-0.0.1-SNAPSHOT.jar</code></p><h2>Current API calls</h2><p>There is an index.html page which lists all the generated REST endpoints:</p><pre>http://hostname:8222/\n</pre><p>Print Hello World:</p><pre>http://hostname:8222/api/hello\n</pre><p>Select all rows (GET):</p><pre>http://hostname:8222/api/all\n</pre><p>Select some rows (GET and POST):</p><pre>http://hostname:8222/api/some/?some={some}\n</pre><p>Select by partition keys (GET and POST):</p><pre>http://hostname:8222/api/&lt;partitionKey1&gt;_&lt;partitionKey2&gt;_..._&lt;partitionKeyN&gt;/?partitionKey1={partitionKey1}&amp;partitionKey2={partitionKey2}&amp;...&amp;partitionKeyN={partitionKeyN}\n</pre><p>Select by partition keys and clustering key(s) (GET and POST):</p><pre>http://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;?pkey={pkey1}&amp;ccol1={ccol1}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_&lt;ccol2&gt;?pkey1={pkey1}&amp;ccol1={ccol1}&amp;ccol2={ccol2}\n...\n</pre><p>Select by partition key and inequality on clustering key(s) (GET and POST):</p><pre>http://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_lt?pkey1={pkey1}&amp;ccol1={ccol1}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_gt?pkey1={pkey1}&amp;ccol1={ccol1}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_lte?pkey1={pkey1}&amp;ccol1={ccol1}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_gte?pkey1={pkey1}&amp;ccol1={ccol1}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_&lt;ccol2&gt;_lt?pkey1={pkey1}&amp;ccol1={ccol1}&amp;ccol2={ccol2}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_&lt;ccol2&gt;_gt?pkey1={pkey1}&amp;ccol1={ccol1}&amp;ccol2={ccol2}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_&lt;ccol2&gt;_lte?pkey1={pkey1}&amp;ccol1={ccol1}&amp;ccol2={ccol2}\nhttp://hostname:8222/api/&lt;pkey1&gt;_&lt;ccol1&gt;_&lt;ccol2&gt;_gte?pkey1={pkey1}&amp;ccol1={ccol1}&amp;ccol2={ccol2}\n...\n</pre><h2>Spring Actuator</h2><p>You can also access various metrics from the Actuator endpoints:</p><pre>http://hostname:8222/actuator\n</pre>"}}]}},"pageContext":{"alternative_id":12900}}