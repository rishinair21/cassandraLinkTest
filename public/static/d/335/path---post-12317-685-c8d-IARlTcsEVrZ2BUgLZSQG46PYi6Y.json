{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"twissandra/twissandra","alternative_id":12317,"content":"<article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>Twissandra is an example project, created to learn and demonstrate how to use\nCassandra.  Running the project will present a website that has similar\nfunctionality to Twitter.</p>\n<p>Most of the magic happens in twissandra/cass.py, so check that out.</p>\n<h2><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\" href=\"#installation\"></a>Installation</h2>\n<p>Installing Twissandra is fairly straightforward.  Really it just involves\nchecking out Cassandra and Twissandra, doing a little configuration, and\nthen starting it up.  Here's a roadmap of the steps we're going to take to\ninstall the project:</p>\n<ol><li>Check out the Twissandra source code</li>\n<li>Install and configure Cassandra</li>\n<li>Create a virtual Python environment with Twissandra's dependencies</li>\n<li>Start up the webserver</li>\n</ol><h3><a id=\"user-content-check-out-the-twissandra-source-code\" class=\"anchor\" aria-hidden=\"true\" href=\"#check-out-the-twissandra-source-code\"></a>Check out the Twissandra source code</h3>\n<pre>git clone git://github.com/twissandra/twissandra.git\n</pre>\n<h3><a id=\"user-content-install-and-configure-cassandra\" class=\"anchor\" aria-hidden=\"true\" href=\"#install-and-configure-cassandra\"></a>Install and configure Cassandra</h3>\n<p>Follow the instructions for <a href=\"http://wiki.apache.org/cassandra/GettingStarted\" rel=\"nofollow\">installing and setting up Cassandra</a>.\nNote, Twissandra requires <strong>at-least Cassandra 2.0</strong> or later.</p>\n<p>And then make sure Cassandra is running:</p>\n<pre>bin/cassandra -f\n</pre>\n<h3><a id=\"user-content-create-a-virtual-python-environment-with-twissandras-dependencies\" class=\"anchor\" aria-hidden=\"true\" href=\"#create-a-virtual-python-environment-with-twissandras-dependencies\"></a>Create a virtual Python environment with Twissandra's dependencies</h3>\n<p>First, make sure to have virtualenv installed.  If it isn't installed already,\nthis should do the trick:</p>\n<pre>sudo easy_install -U virtualenv\n</pre>\n<p>Now let's create a new virtual environment, and begin using it:</p>\n<pre>virtualenv twiss\nsource twiss/bin/activate\n</pre>\n<p>We should install pip, so that we can more easily install Twissandra's\ndependencies into our new virtual environment:</p>\n<pre>easy_install -U pip\n</pre>\n<p>Now let's install all of the dependencies:</p>\n<pre>pip install -U -r twissandra/requirements.txt\n</pre>\n<p>Now that we've got all of our dependencies installed, we're ready to start up\nthe server.</p>\n<h3><a id=\"user-content-create-the-schema\" class=\"anchor\" aria-hidden=\"true\" href=\"#create-the-schema\"></a>Create the schema</h3>\n<p>Make sure you're in the Twissandra checkout, and then run the sync_cassandra\ncommand to create the proper keyspace in Cassandra:</p>\n<pre>python manage.py sync_cassandra\n</pre>\n<h3><a id=\"user-content-start-up-the-webserver\" class=\"anchor\" aria-hidden=\"true\" href=\"#start-up-the-webserver\"></a>Start up the webserver</h3>\n<p>This is the fun part! We're done setting everything up, we just need to run it:</p>\n<pre>python manage.py runserver\n</pre>\n<p>Now go to <a href=\"http://127.0.0.1:8000/\" rel=\"nofollow\">http://127.0.0.1:8000/</a> and you can play with Twissandra!</p>\n<h2><a id=\"user-content-schema-layout\" class=\"anchor\" aria-hidden=\"true\" href=\"#schema-layout\"></a>Schema Layout</h2>\n<p>In Cassandra, the way that your data is structured is very closely tied to how\nhow it will be retrieved.  Let's start with the 'users' table. The key is\nthe username, and the remaining columns are properties on the user:</p>\n<pre>CREATE TABLE users (\n    username text PRIMARY KEY,\n    password text\n)\n</pre>\n<p>The 'friends' and 'followers' tables have a compound primary key. The first\ncomponent, the \"partition key\", controls how the data is spread around the\ncluster.  The second component, the \"clustering key\", controls how the data\nis sorted on disk.  In this case, the sort order isn't very interesting,\nbut what's important is that all friends and all followers of a user will be\nstored contiguously on disk, making a query to lookup all friends or followers\nof a user very efficient.</p>\n<pre>CREATE TABLE friends (\n    username text,\n    friend text,\n    since timestamp,\n    PRIMARY KEY (username, friend)\n)\nCREATE TABLE followers (\n    username text,\n    follower text,\n    since timestamp,\n    PRIMARY KEY (username, follower)\n)\n</pre>\n<p>Tweets are stored with a UUID for the key.</p>\n<pre>CREATE TABLE tweets (\n    tweet_id uuid PRIMARY KEY,\n    username text,\n    body text\n)\n</pre>\n<p>The 'timeline' and 'userline' tables keep track of what tweets were\nmade and in what order.  To acheive this, we use a TimeUUID for the\nclustering key, resulting in tweets being stored in chronological\norder.  The \"WITH CLUSERING ORDER\" option just means that the\ntweets will be stored in reverse chronological order (newest first),\nwhich is slightly more efficient for the queries we'll be performing.</p>\n<pre>CREATE TABLE userline (\n    username text,\n    time timeuuid,\n    tweet_id uuid,\n    PRIMARY KEY (username, time)\n) WITH CLUSTERING ORDER BY (time DESC)\nCREATE TABLE timeline (\n    username text,\n    time timeuuid,\n    tweet_id uuid,\n    PRIMARY KEY (username, time)\n) WITH CLUSTERING ORDER BY (time DESC)\n</pre>\n<h2><a id=\"user-content-fake-data-generation\" class=\"anchor\" aria-hidden=\"true\" href=\"#fake-data-generation\"></a>Fake data generation</h2>\n<p>For testing purposes, you can populate the database with some fake tweets.</p>\n<pre>python manage.py fake_data &lt;num_users&gt; &lt;max_tweets&gt;\n</pre>\n<p><code>num_users</code> is the total number of users to generate and <code>max_tweets</code> is the\nmaximum number of tweets per user. The number of tweets per user is determined\nby the Pareto distribution so the number of tweets actually generated will vary\nbetween runs.</p>\n</article>"}}]}},"pageContext":{"alternative_id":12317}}