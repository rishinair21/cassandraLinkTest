{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"citrusbyte/redis-comparison","alternative_id":9072,"content":"<h3>\n      \n      README.md\n    </h3><article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>I've been tasked with doing a presentation on Redis, and I wanted to include some benchmarks against other NoSQL databases such as MongoDB, Cassandra, CouchDB and Riak.</p>\n<p>The goal of this benchmarks was to make it as simple as possible in all aspects, with the following rationale:</p>\n<ul><li>download database source;</li>\n<li>compile;</li>\n<li>run with defaults.</li>\n</ul><p>I tried to install everything with the minimum dependencies and simplicity, without spending too much time trying to fix any possible issue I had. The idea is to having a server running in the least amount of time possible.</p>\n<p><strong>NOTE</strong>: this is a far from perfect benchmark, I know.</p>\n<h2><a href=\"#db-server\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-db-server\"></a>DB server</h2>\n<ul><li>EC2 Medium\n<ul><li>3.75 GiB memory</li>\n<li>2 EC2 Compute Unit (1 virtual core with 2 EC2 Compute Unit)</li>\n<li>410 GB instance storage</li>\n<li>32-bit or 64-bit platform</li>\n<li>I/O Performance: Moderate</li>\n<li>EBS-Optimized Available: No</li>\n<li>API name: m1.medium</li>\n</ul></li>\n<li>Ubuntu Server 12.04.1 LTS</li>\n</ul><h3><a href=\"#setup\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-setup\"></a>Setup</h3>\n<pre>sudo apt-get update\nsudo apt-get -y install build-essential tmux\nmkdir src\n</pre>\n<h4><a href=\"#redis\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-redis\"></a>Redis</h4>\n<pre>cd ~/src\nwget http://redis.googlecode.com/files/redis-2.6.10.tar.gz\ntar zxf redis-2.6.10.tar.gz\ncd redis-2.6.10\nmake\n</pre>\n<p>Note: less than a minute. No dependencies.</p>\n<h4><a href=\"#mongodb\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-mongodb\"></a>MongoDB</h4>\n<pre>cd ~/src\nwget http://downloads.mongodb.org/src/mongodb-src-r2.2.3.tar.gz\ntar zxf mongodb-src-r2.2.3.tar.gz\ncd mongodb-src-r2.2.3\nsudo apt-get -y install scons\n</pre>\n<p>Note: there's no indication in the README that I needed to install scons in order to compile MongoDB. More than 5 minutes compiling.</p>\n<h4><a href=\"#cassandra\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-cassandra\"></a>Cassandra</h4>\n<pre>cd ~/src\nwget http://apache.dattatec.com/cassandra/1.2.2/apache-cassandra-1.2.2-src.tar.gz\ntar zxf apache-cassandra-1.2.2-src.tar.gz\nsudo apt-get -Y install openjdk-6-jre ant\nant\n</pre>\n<p>Note: build failed. Binary core dumped.</p>\n<h4><a href=\"#couchdb\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-couchdb\"></a>CouchDB</h4>\n<pre>cd ~/src\nwget http://mirrors.dcarsat.com.ar/apache/couchdb/1.2.1/apache-couchdb-1.2.1.tar.gz\ntar zxf apache-couchdb-1.2.1.tar.gz\ncd  apache-couchdb-1.2.1\nsudo apt-get -y install erlang libicu-dev libmozjs-dev libcurl4-openssl-dev\n./configure\nmake\n</pre>\n<p>Note: binary core dumped.</p>\n<h2><a href=\"#client\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-client\"></a>Client</h2>\n<ul><li>EC2 Micro\n<ul><li>613 MiB memory</li>\n<li>Up to 2 EC2 Compute Units (for short periodic bursts)</li>\n<li>EBS storage only</li>\n<li>32-bit or 64-bit platform</li>\n<li>I/O Performance: Low</li>\n<li>EBS-Optimized Available: No</li>\n<li>API name: t1.micro</li>\n</ul></li>\n<li>Ubuntu Server 12.04.1 LTS</li>\n</ul><h3><a href=\"#setup-1\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-setup-1\"></a>Setup</h3>\n<pre>sudo apt-get -y install ruby-1.9.3\nsudo gem install redis cassandra couchdb mongodb riak\n</pre>\n<h3><a href=\"#script\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-script\"></a>Script</h3>\n<p>The benchmark ran it was very easy: iterate <code>1</code>, <code>10</code>, <code>100</code>, <code>1,000</code>, <code>10,000</code>, <code>100,000</code> and <code>1,000,000</code> over a simple model that has the following attributes:</p>\n<ul><li>id: variable in the format <code>player:$i</code>;</li>\n<li>name: variable in the format <code>Player $i</code>;</li>\n<li>type: constant string <code>Developer</code>;</li>\n<li>age: constant number <code>34</code>;</li>\n<li>level: initially a constant <code>0</code>.</li>\n</ul><p>The benchmarks performs three operations in each instance of the model:</p>\n<ul><li>storing;</li>\n<li>reading;</li>\n<li>updating <code>level</code> to the current iteration.</li>\n</ul><p>This script accepts the following two flags:</p>\n<ul><li><code>-h</code> indicate host to connect (default <code>127.0.0.1</code>)</li>\n<li><code>-n</code> indicate number of iterations (default <code>1,000</code>)</li>\n</ul><p>You can find the latest version of the script in the following repository: <a href=\"https://github.com/citrusbyte/redis-benchmarks\">https://github.com/citrusbyte/redis-benchmarks</a></p>\n<h3><a href=\"#benchmark\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-benchmark\"></a>Benchmark</h3>\n<p>I've ran the following command in my command line for benchmarking these database servers:</p>\n<pre>for i in 1 10 1000 10000 100000 1000000\ndo\n  ./benchs.rb -h 10.0.0.1 -n $i | tee $i.log\ndone\n</pre>\n<p>You can find the results logs in the following repository: <a href=\"https://github.com/citrusbyte/redis-benchmarks\">https://github.com/citrusbyte/redis-benchmarks</a></p>\n<p>Remember that, as I couldn't get Cassandra nor CouchDB working easily, those weren't benchmarked.</p>\n<h4><a href=\"#10-iterations\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-10-iterations\"></a><code>10</code> iterations</h4>\n<pre>Redis\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.000000   0.000000   0.000000 (  0.005587)\nread         0.000000   0.000000   0.000000 (  0.005741)\nupdate       0.010000   0.000000   0.010000 (  0.005117)\nTotal benchmark time for Redis: 0.01978361s\nMongoDB\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.000000   0.000000   0.000000 (  0.007547)\nread         0.000000   0.000000   0.000000 (  0.007479)\nupdate       0.000000   0.000000   0.000000 (  0.014906)\nTotal benchmark time for MongoDB: 0.034245423s\nRiak\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.010000   0.000000   0.010000 (  0.058750)\nread         0.000000   0.000000   0.000000 (  0.033434)\nupdate       0.020000   0.000000   0.020000 (  0.087879)\nTotal benchmark time for Riak: 0.190552601s\n</pre>\n<h4><a href=\"#100-iterations\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-100-iterations\"></a><code>100</code> iterations</h4>\n<pre>Redis\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.010000   0.000000   0.010000 (  0.055583)\nread         0.020000   0.010000   0.030000 (  0.057843)\nupdate       0.010000   0.000000   0.010000 (  0.049560)\nTotal benchmark time for Redis: 0.166689463s\nMongoDB\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.030000   0.010000   0.040000 (  0.087663)\nread         0.020000   0.000000   0.020000 (  0.073081)\nupdate       0.040000   0.000000   0.040000 (  0.164124)\nTotal benchmark time for MongoDB: 0.329832415s\nRiak\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.140000   0.010000   0.150000 (  0.597286)\nread         0.120000   0.010000   0.130000 (  0.382307)\nupdate       0.290000   0.020000   0.310000 (  1.024487)\nTotal benchmark time for Riak: 2.019069396s\n</pre>\n<h4><a href=\"#1000-iterations\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-1000-iterations\"></a><code>1000</code> iterations</h4>\n<pre>Redis\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.230000   0.010000   0.240000 (  0.822115)\nread         0.210000   0.030000   0.240000 (  0.674979)\nupdate       0.140000   0.010000   0.150000 (  0.498526)\nTotal benchmark time for Redis: 2.000050905s\nMongoDB\n--------------------------------------------------------\n                 user     system      total        real\nwrite        0.240000   0.020000   0.260000 (  0.741164)\nread         0.210000   0.020000   0.230000 (  1.053450)\nupdate       0.430000   0.050000   0.480000 (  2.194942)\nTotal benchmark time for MongoDB: 3.994837796s\nRiak\n--------------------------------------------------------\n                 user     system      total        real\nwrite        1.390000   0.170000   1.560000 (  6.635914)\nread         1.350000   0.160000   1.510000 (  4.061969)\nupdate       3.030000   0.280000   3.310000 ( 11.235330)\nTotal benchmark time for Riak: 21.959080865s\n</pre>\n<h4><a href=\"#other-iterations\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-other-iterations\"></a>Other iterations</h4>\n<p>You can really appreciate that Redis performs faster, so there's no need to paste the other iterations numbers.</p>\n<p>All I can say is that when I ran 1,000,000 iterations, MongoDB filled the hard disk.</p>\n</article>"}}]}},"pageContext":{"alternative_id":9072}}