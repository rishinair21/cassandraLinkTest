{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"DSE6 + .NET v?","alternative_id":11954,"content":"<p>Project Repo: <a href=\"https://github.com/Adron/InteroperabilityBlackBox\" target=\"_blank\">Interoperability Black Box</a></p>\n<p>First steps. Let’s get .NET installed and setup. I’m running Ubuntu 18.04 for this setup and start of project. To install .NET on Ubuntu one needs to go through a multi-command process of keys and some other stuff, fortunately Microsoft’s teams have made this almost easy by providing the commands for the various Linux distributions here. The commands I ran are as follows to get all this initial setup done.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg\nsudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\nsudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\nsudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg\nsudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list\n</pre>\n<p>After all this I could then install the .NET SDK. It’s been so long since I actually installed .NET on anything that I wasn’t sure if I just needed the runtime, the SDK, or what I’d actually need. I just assumed it would be safe to install the SDK and then install the runtime too.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1\n</pre>\n<p>Then the runtime.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nsudo apt-get install aspnetcore-runtime-2.1\n</pre>\n<p><img data-attachment-id=\"14246\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/logo/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102\" data-orig-size=\"2000,2000\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"logo\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102?w=788\" class=\"wp-image-14246 alignright\" src=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102\" alt=\"logo\" width=\"102\" height=\"102\" srcset=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102 102w, https://compositecode.files.wordpress.com/2018/06/logo.png?w=204&amp;h=204 204w, https://compositecode.files.wordpress.com/2018/06/logo.png?w=150&amp;h=150 150w\" />Alright. Now with this installed, I wanted to also see if <a href=\"http://www.jetbrains.com/rider/\" target=\"_blank\" rel=\"noopener\">Jetbrains Rider</a> would detect – or at least what would I have to do – to have the IDE detect that .NET is now installed. So I opened up the IDE to see what the results would be. Over the left hand side of the new solution dialog, if anything isn’t installed Rider usually will display a message that X whatever needs installed. But it looked like everything is showing up as installed, “<em>yay for things working (at this point)!</em>”</p>\n<p><img data-attachment-id=\"14248\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/rider-01/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=788\" data-orig-size=\"799,536\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"rider-01\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=788?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=788?w=788\" class=\"alignnone size-full wp-image-14248\" src=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=788\" alt=\"rider-01\" srcset=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=788 788w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/rider-01.png 799w\" /></p>\n<p>Next up is to get a solution started with the pertinent projects for what I want to build.</p>\n<p><img data-attachment-id=\"14249\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/dse2-2/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=788\" data-orig-size=\"800,139\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dse2\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=788?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=788?w=788\" class=\"alignnone size-full wp-image-14249\" src=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=788\" alt=\"dse2\" srcset=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=788 788w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/dse2.png 800w\" /></p>\n<p><img data-attachment-id=\"14250\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/kazam_screenshot_00001/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=788\" data-orig-size=\"1264,364\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Kazam_screenshot_00001\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=788?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=788?w=788\" class=\"alignnone size-full wp-image-14250\" src=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=788\" alt=\"Kazam_screenshot_00001\" srcset=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=788 788w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=1024 1024w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png 1264w\" /></p>\n<p>For the next stage I created three projects.</p>\n<ol><li>InteroperationalBlackBox – A basic class library that will be used by a console application or whatever other application or service that may need access to the specific business logic or what not.</li>\n<li>InteroperationalBlackBox.Tests – An <a href=\"https://xunit.github.io/\" target=\"_blank\" rel=\"noopener\">xunit</a> testing project for testing anything that might need some good ole’ testing.</li>\n<li>InteroperationalBlackBox.Cli – A console application (CLI) that I’ll use to interact with the class library and add capabilities going forward.</li>\n</ol><p>Alright, now that all the basic projects are setup in the solution, I’ll go out and see about the <a href=\"https://docs.datastax.com/en/developer/csharp-driver-dse/2.3/\" target=\"_blank\" rel=\"noopener\">.NET DataStax Enterprise driver</a>. Inside Jetbrains Rider I can right click on a particular project that I want to add or manage dependencies for. I did that and then put “<em>dse</em>” in the search box. The dialog pops up from the bottom of the IDE and you can add it by clicking on the bottom right plus sign in the description box to the right. Once you click the plus sign, once installed, it becomes a little red x.</p>\n<p><img data-attachment-id=\"14252\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/dse-adding-package/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=788\" data-orig-size=\"1398,594\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dse-adding-package\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=788?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=788?w=788\" class=\"alignnone size-full wp-image-14252\" src=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=788\" alt=\"dse-adding-package\" srcset=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=788 788w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=1024 1024w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png 1398w\" /></p>\n<p>Alright. Now it’s <em>almost</em> time to get some code working. We need ourselves a database first however. I’m going to setup a cluster in <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">Google Cloud Platform</a> (GCP), but feel free to use whatever cluster you’ve got. These instructions will basically be reusable across wherever you’ve got your cluster setup. I wrote up a walk through and instructions for the GCP Marketplace a few weeks ago. I used the same offering to get this example cluster up and running to use. So, now back to getting the first snippets of code working.</p>\n<p>Let’s write a test first.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\n[Fact]\npublic void ConfirmDatabase_Connects_False()\n{\n    var box = new BlackBox();\n    Assert.Equal(false, box.ConfirmConnection());\n}\n</pre>\n<p>In this test, I named the class called BlackBox and am planning to have a parameterless constructor. But as things go tests are very fluid, or ought to be, and I may change it in the next iteration. I’m thinking, at least to get started, that I’ll have a method to test and confirm a connection for the CLI. I’ve named it ConfirmConnection for that purpose. Initially I’m going to test for false, but that’s primarily just to get started. Now, time to implement.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nnamespace InteroperabilityBlackBox\nusing System;\nusing Dse;\nusing Dse.Auth;\n\nnamespace InteroperabilityBlackBox\n{\n    public class BlackBox\n    {\n        public BlackBox()\n        {}\n\n        public bool ConfirmConnection()\n        {\n            return false;\n        }\n    }\n}\n</pre>\n<p>That gives a passing test and I move forward. For more of the run through of moving from this first step to the finished code session check out this</p>\n\n<div class=\"jetpack-video-wrapper\"><iframe class=\"youtube-player\" width=\"788\" height=\"444\" src=\"https://www.youtube.com/embed/2a6_oDV5Dqs?version=3&amp;rel=1&amp;fs=1&amp;autohide=2&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent\" allowfullscreen=\"allowfullscreen\">[embedded content]</iframe></div>\n<p>By the end of the coding session I had a few tests.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nusing Xunit;\n\nnamespace InteroperabilityBlackBox.Tests\n{\n    public class MakingSureItWorksIntegrationTests\n    {\n        [Fact]\n        public void ConfirmDatabase_Connects_False()\n        {\n            var box = new BlackBox();\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n\n        [Fact]\n        public void ConfirmDatabase_PassedValuesConnects_True()\n        {\n            var box = new BlackBox(\"cassandra\", \"\", \"\");\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n\n        [Fact]\n        public void ConfirmDatabase_PassedValuesConnects_False()\n        {\n            var box = new BlackBox(\"cassandra\", \"notThePassword\", \"\");\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n    }\n}\n</pre>\n<p>The respective code for connecting to the database cluster, per the walk through I wrote about here, at session end looked like this.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nusing System;\nusing Dse;\nusing Dse.Auth;\n\nnamespace InteroperabilityBlackBox\n{\n    public class BlackBox : IBoxConnection\n    {\n        public BlackBox(string username, string password, string contactPoint)\n        {\n            UserName = username;\n            Password = password;\n            ContactPoint = contactPoint;\n        }\n\n        public BlackBox()\n        {\n            UserName = \"ConfigValueFromSecretsVault\";\n            Password = \"ConfigValueFromSecretsVault\";\n            ContactPoint = \"ConfigValue\";\n        }\n\n        public string ContactPoint { get; set; }\n        public string UserName { get; set; }\n        public string Password { get; set; }\n\n        public bool ConfirmConnection()\n        {\n            IDseCluster cluster = DseCluster.Builder()\n                .AddContactPoint(ContactPoint)\n                .WithAuthProvider(new DsePlainTextAuthProvider(UserName, Password))\n                .Build();\n\n            try\n            {\n                cluster.Connect();\n                return true;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n                return false;\n            }\n\n        }\n    }\n}\n</pre>\n<p>With my interface providing the contract to meet.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nnamespace InteroperabilityBlackBox\n{\n    public interface IBoxConnection\n    {\n        string ContactPoint { get; set; }\n        string UserName { get; set; }\n        string Password { get; set; }\n        bool ConfirmConnection();\n    }\n}\n</pre>\n<h2>Conclusions &amp; Next Steps</h2>\n<p>After I wrapped up the session two things stood out that needed fixed for the next session. I’ll be sure to add these as objectives for the next coding session at 3pm PST on Thursday.</p>\n<ol><li>The tests really needed to more resiliently confirm the integrations that I was working to prove out. My plan at this point is to add some Docker images that would provide the development integration tests a point to work against. This would alleviate the need for something outside of the actual project in the repository to exist. Removing that fragility.</li>\n<li>The application, in its “Black Box”, should do something. For the next session we’ll write up some feature requests we’d want, or maybe someone has some suggestions of functionality they’d like to see implemented in a CLI using .NET Core working against a DataStax Enterprise Cassandra Database Cluster? Feel free to leave a comment or three about a feature, I’ll work on adding it during the next session.</li>\n</ol><ul><li>Project Repo: <a href=\"https://github.com/Adron/InteroperabilityBlackBoxhttps://github.com/Adron/InteroperabilityBlackBox\" target=\"_blank\" rel=\"noopener\">https://github.com/Adron/InteroperabilityBlackBox</a></li>\n<li>File an Feature Request: <a href=\"https://github.com/Adron/InteroperabilityBlackBox/issues/new?template=feature_request.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Adron/InteroperabilityBlackBox/issues/new?template=feature_request.md</a></li>\n</ul>"}}]}},"pageContext":{"alternative_id":11954}}