{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"GDPR and Cassandra - DZone Security","alternative_id":12285,"content":"<div class=\"content-html\" itemprop=\"text\"><p>delete /dɪˈliːt/ — verb: remove or obliterate (written or printed matter), especially by drawing a line through it.</p> \n<h3 id=\"01b5\">Schrödinger’s Data</h3> \n<p>As we all know, GDPR will be <a data-href=\"https://www.eugdpr.org/gdpr-faqs.html\" href=\"https://www.eugdpr.org/gdpr-faqs.html\" rel=\"nofollow\" target=\"_blank\" title=\"GDPR faqs\">in force May 2018</a>. After that, users of software products and services will have the right to be forgotten (cool, right? Finally I can rest assured that my browsing history will not be read aloud at my funeral). In other words, if a user from the EU asks a service provider to delete their data, the provider will have to delete all the user’s data or face severe consequences.</p> \n<p>But, it is unclear what it means to delete a user’s data. I guess the only way to find out is when the audit occurs.</p> \n<figure id=\"a0c8\"><figure><img src=\"https://cdn-images-1.medium.com/max/1600/1*UgssftJJmE2zL5ClenYe2w.png\" class=\"fr-fin fr-dib\" alt=\"The data is both deleted and not deleted until observed.\" title=\"The data is both deleted and not deleted until observed.\" /><figcaption>\n   A user’s data is simultaneously both deleted and not deleted until observed at the time of the audit. \n </figcaption></figure><p>This post is the introduction to a series of blog posts about GDPR and Cassandra databases.</p> \n<h3 id=\"daa2\">Cassandra and Data Deletion</h3> \n<p>As Cassandra consultants, our primary concern is: what does it mean to delete the data from Cassandra points of view? And what we can do to be as sure as possible that a user’s data will stay deleted. As we know, when Cassandra deletes the data, it just <a data-href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html\" href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlAboutDeletes.html\" rel=\"nofollow\" target=\"_blank\">marks it as deleted</a>. The actual “deletion” occurs during the <a data-href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dml-compaction)\" href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html#dmlHowDataMaintain__dml-compaction%29\" rel=\"nofollow\" target=\"_blank\" title=\"Compaction docs\">compaction process</a>.</p> \n<p>When Cassandra marks data as deleted:</p> \n<ul><li id=\"5f85\">It can’t be fetched anymore using Cassandra’s query language (cql).</li> \n <li id=\"0fa5\">The data still exists in Cassandra’s files on the disk (SSTables) but is flagged as deleted.</li> \n <li id=\"8000\">The data is removed (for real) from SSTables when compaction occurs before the compaction evicts deleted data, the deleted data can still be accessed with specialized (forensic?) tools.</li> \n</ul><p>Once again: Cassandra, like many other systems, does not actually delete data when it <em>deletes the data</em>. But this is in line with the definition of the verb delete from the Oxford dictionary:</p> \n<blockquote id=\"df76\"><div>\n  “remove or obliterate (written or printed matter), especially by drawing a line through it.” \n</div></blockquote> \n<p>On the other hand, a similar thing happens in the underlying OS (Linux). When the OS deletes a file, it just marks it as deleted. And you can <a data-href=\"https://unix.stackexchange.com/a/80285\" href=\"https://unix.stackexchange.com/a/80285\" rel=\"nofollow\" target=\"_blank\" title=\"recover deleted files\">recover the deleted files</a> with specialized forensic tools.</p> \n<p>Okay, so the actual, irreversible deleting of the data does not usually happen in the software engineering. But we would love to do as much as we can to make sure that the data is not accessible from Cassandra and any Cassandra tooling (like <em>sstabledump</em>, <em>sstable2json</em>). OS and file system engineers should do their part of work by doing the same for the OS level (if they think that’s necessary).</p> \n<figure id=\"df70\"><figure><img src=\"https://cdn-images-1.medium.com/max/1600/1*PnwAkR8_J22gyGY9swXPHA.png\" class=\"fr-fin fr-dib\" alt=\"image\" /><figcaption>\n   The only way to make sure that the data stays deleted. \n </figcaption></figure><p>Another problem in Cassandra is that it is hard to filter on fields that are not part of the primary key. So, if some of the user’s data is held in the table where the primary key is something like <em>deviceId</em>, that would mean that we would have to search all the records for all the <em>deviceIds</em> and remove the corresponding user’s data. That does not scale.</p> \n<h4 id=\"abef\">Data Deletion and Compactions</h4> \n<p>As already said, even after a delete statement is issued, it is not guaranteed that the data is deleted. Furthermore, if the data model is not well designed, the deleted data might never get evicted. In Cassandra 3.10, this behavior is improved, and compaction is triggered when there is a certain percent of expired tombstones (read more about it <a data-href=\"https://issues.apache.org/jira/browse/CASSANDRA-7019\" href=\"https://issues.apache.org/jira/browse/CASSANDRA-7019\" rel=\"nofollow\" target=\"_blank\" title=\"tombstone compaction\">here</a>), and <a data-href=\"https://github.com/protectwise/cassandra-util/tree/master/deleting-compaction-strategy\" href=\"https://github.com/protectwise/cassandra-util/tree/master/deleting-compaction-strategy\" rel=\"nofollow\" target=\"_blank\" title=\"deleting compaction strategy\">deleting compaction strategy</a> looks like it could solve this problem (note that the strategy is not an official part of Apache Cassandra). Also, I’m quite sure that I saw a Jira issue on an Apache Cassandra project about some other kind of Deleting compaction strategy, which should guarantee to actually delete the data, not only mark it as deleted, but I can’t find it now. That would be cool.</p> \n<p>Speaking of compaction strategies, <a data-href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html?hl=stcs#dmlHowDataMaintain__stcs-compaction\" href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/dml/dmlHowDataMaintain.html?hl=stcs#dmlHowDataMaintain__stcs-compaction\" rel=\"nofollow\" target=\"_blank\" title=\"STCS\">SizeTieredCompactionStrategy</a> can be tricky, because if you end up with one huge SSTable file, you need SSTables of a similar size to compact them. Which means that the tombstones will stay in a huge SSTable for a very long time; maybe forever. A situation similar to the one occurring in the 2048 game:</p> \n<p><img alt=\"2048\" class=\"fr-fin fr-dib\" src=\"https://cdn-images-1.medium.com/max/1600/1*BqjYx2m8F9u4_6lYyQj_2g.png\" title=\"2048\" width=\"452\" /></p> \n<p>Tile 2048 will not be merged anytime soon.</p> \n<p>The main takeaway is: be aware of how different compaction strategies work and know your system behavior. If you have a problem with tombstone eviction, it might be a good idea to change your compaction strategy and/or to redesign your tables</p> \n<h4 id=\"1794\">Delete User Data That Is Not Part of the Primary Key</h4> \n<p>Unlike in relational databases, in Cassandra data is stored in denormalized form. Thus, it is not possible to (easily) filter on fields that are not part of the partition key. So, if we have the following table:</p> \n<pre lang=\"text/x-cassandra\">CREATE TABLE device_measurements (\n  device_id uuid,   \n  measurement_type text,\n  measurement_value text,   \n  user_id uuid,   \n  PRIMARY KEY (device_id, measurement_type));</pre> \n<p>This means that we cannot just:</p> \n<pre lang=\"text/plain\">DELETE FROM device_measurement WHERE user_id = bf884b98–0a72–10e8-ba89–0ed5f89f718b</pre> \n<p>It is, however, possible to issue:</p> \n<pre lang=\"text/plain\">DELETE FROM device_measurement WHERE user_id = bf884b98–0a72–10e8-ba89–0ed5f89f718b ALLOW FILTERING</pre> \n<p>But this might ruin the performance of the entire cluster.</p> \n<p>Therefore, we should think about the user’s data in advance when designing the tables.</p> \n<h4 id=\"0b3f\">Embracing Privacy by Design</h4> \n<p>Solution 1: design tables in a way that the user’s data can be easily deleted (user_id part of the primary key) from all the tables. This solution will obviously have an impact on the design process in both greenfield projects and when redesigning existing databases.</p> \n<p>Solution 2: embrace encryption. Okay, this is not a production-ready solution, it’s more of an idea we’re currently playing with at <a data-href=\"https://www.smartcat.io/\" href=\"https://www.smartcat.io/\" rel=\"nofollow\" target=\"_blank\">SmartCat</a>. Encrypting the stored user’s data with <a data-href=\"https://github.com/shaih/HElib\" href=\"https://github.com/shaih/HElib\" rel=\"nofollow\" target=\"_blank\" title=\"homomorphic encryption\">homomorphic encryption</a> to preserve the ordering of clustering columns, and when the data needs to be deleted, just delete the key. If you have any thoughts on this or experience to share, we would love to hear from you.</p> \n<h3 id=\"5b69\">Conclusion</h3> \n<p>Embrace Privacy by design. The idea of GDPR is a good thing from a consumer perspective. A user’s data will be seen as a liability for the companies, not as an asset, which means that companies will, hopefully, be cautious when storing a user’s data. GDPR is also an excellent opportunity for new players on a database as a service market (DaaS) or some derivative of the concept; it seems that it is easier to build new systems with privacy in mind from scratch than to refactor the existing ones. What I would like to see is a database (as a service) that would allow me to issue a delete for the userId, and for me (as a programmer/user of the database) to stop worrying about it. The DaaS provider would be responsible for the rest.</p> \n<p>What are your thoughts on this?</p></figure></figure></div><div class=\"content-html\" itemprop=\"text\"><a>\n                        <img class=\"pub-image\" width=\"420\" itemprop=\"image\" src=\"src\" alt=\"image\" /></a></div>"}}]}},"pageContext":{"alternative_id":12285}}