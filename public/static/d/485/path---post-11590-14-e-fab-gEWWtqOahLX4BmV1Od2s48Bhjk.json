{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Apache Cassandra turns 10","alternative_id":11590,"content":"<figure class=\"image  image-medium shortcode-image\"><img src=\"https://zdnet1.cbsistatic.com/hub/i/r/2018/07/21/55ed8a96-6a44-4c71-b77c-7c645fa5ca30/resize/370xauto/a884e9c7912167555670d90cdbf72607/cassandra.gif\" class=\"\" alt=\"cassandra.gif\" height=\"auto\" width=\"370\" /></figure><p>The past couple years have seen a number of 10-year milestones being passed, like the decade anniversaries of <a href=\"https://aws.amazon.com/10year/\">Amazon Web Services</a>, <a href=\"https://www.linkedin.com/pulse/mongodb-world-2017-lonely-story-versus-john-de-goes/\">MongoDB</a>, <a href=\"https://www.cloudera.com/promos/hadoop10.html\">Hadoop</a> and many others. And so in 2018, it's <a href=\"https://cassandra.apache.org/\">Apache Cassandra's</a> turn. Today, Apache Cassandra has morphed into a modest ecosystem where there is one principle commercial platform supplier -- <a href=\"http://datastax.com/\">DataStax</a> -- supplemented by a <a href=\"https://wiki.apache.org/cassandra/ThirdPartySupport\">small collection of companies</a> delivering third-party support. It combines the versatility of a table-oriented database with the speed and efficiency of a key-value store.</p><p>But make no mistake about it -- the fact that there aren't a dozen vendors of Cassandra distros doesn't hide up the fact that Cassandra is a very popular database. It is one of a quartet of NoSQL databases that rank in <a href=\"https://db-engines.com/en/ranking\">db-Engine's</a> top ten. And in itself, Cassandra has carved out a niche for continuous online systems that can carry up to PBytes of data. Like other \"wide column\" databases that began life as key-value stores, Cassandra was first known for fast writes, but over the years, read performance has caught up.</p><p>For instance, when you get film recommendations served up on Netflix, they come from an application running on Cassandra. It has carved presence with maintaining of online user profiles, shopping carts, fraud detection, and increasingly, real-time mobile and IoT applications. For that matter, so have most of Cassandra's prime NoSQL competitors like <a href=\"https://mongodb.com/\">MongoDB</a>, <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a>, and <a href=\"https://azure.microsoft.com/en-us/services/cosmos-db/\">Cosmos DB</a>.</p><p>As this is 10th birthday time, it makes sense to look at Cassandra's beginnings. The story is a familiar one. An Internet giant -- Facebook -- needed a more scalable, always-on database alternative for its inbox feature and created Cassandra back in 2008 based on the <a href=\"https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\">Dynamo paper</a> published by Amazon. After open sourcing it, <a href=\"https://www.linkedin.com/in/jbellis/\">Jonathan Ellis</a>, an engineer at Rackspace at the time, saw its potential as a distributed database for powering cloud applications, and a year later, drew venture backing to cofound what is now DataStax with then-colleague <a href=\"https://www.linkedin.com/in/mattpfeil/\">Matt Pfeil</a>.</p><p>The biggest source of confusion early on was with Hadoop. Because of some <a href=\"https://www.theregister.co.uk/2011/03/23/cassandra_mashed_with_hadoop/\">ridiculous historical coincidences</a>, Cassandra got lumped into the Hadoop project where it still appears on the <a href=\"http://hadoop.apache.org/\">Apache project page</a>. That implies that Cassandra is an in-kind replacement for <a href=\"https://hbase.apache.org/\">HBase</a>. Well kinda and kinda not. Although both were initially designed to run as online production systems for big data, HBase requires HDFS, YARN, and Zookeeper to run, whereas Cassandra doesn't require Hadoop components and runs on its own cluster. Then there are other architectural differences, such as that HBase runs with Hadoop hierarchical topology, whereas Cassandra works in more of a peer-to-peer mode.</p><p><strong>Comparison to the usual suspects</strong></p><p>Hadoop flirtations notwithstanding, how does Cassandra differentiate from the usual NoSQL suspects? We'll start with the biggest differentiator: query language. Cassandra also has a <a href=\"https://cassandra.apache.org/doc/latest/cql/\">query language</a> that is much more like SQL compared to most rivals except <a href=\"https://www.couchbase.com/products/n1ql\">Couchbase</a>.</p>\n    <section class=\"sharethrough-top\" data-component=\"medusaContentRecommendation\" data-medusa-content-recommendation-options=\"{&quot;promo&quot;:&quot;promo_ZD_recommendation_sharethrough_top_in_article_desktop&quot;,&quot;spot&quot;:&quot;dfp-in-article&quot;}\">\n    </section><p>Compared to MongoDB, Cassandra was more write-friendly, but as both databases matured, differences in read and write performance are no longer as stark. Cassandra was initially designed as a tabular database for key-value data (compared to MongoDB's more object-like model), but in time was evolved to accommodate JSON documents. There are still basic differences in database topology: Cassandra was designed for higher availability writes with its multi-master architecture, whereas MongoDB uses a single master, but suggests <a href=\"https://www.mongodb.com/blog/post/active-active-application-architectures-with-mongodb\">managing sharding</a> for higher availability writes.</p><p>Among cloud-native counterparts, Cassandra shares lineage with Amazon DynamoDB. A detailed comparison can be found <a href=\"https://www.beyondthelines.net/databases/dynamodb-vs-cassandra/\">here</a>. But at high level, the obvious difference is where they run: DynamoDB only runs in <a href=\"http://aws.amazon.com/\">AWS</a> as a managed service (and likewise for Microsoft Azure Cosmos DB on <a href=\"http://azure.microsoft.com/\">Azure</a>); Cassandra, on the other hand, can run anywhere, but as managed service, <a href=\"https://www.datastax.com/products/datastax-managed-cloud\" target=\"_blank\">DataStax Managed Cloud Service</a> has only been introduced recently. Cassandra and DynamoDB both let you tune consistency levels -- Cassandra offers five options for consistency while DynamoDB narrows it down to two (eventual or strong). </p><p>Compared to Microsoft Azure Cosmos DB, the biggest difference is multi-model that is core to the Azure offering; by comparison, the commercial version of Cassandra -- <a href=\"https://www.datastax.com/products/datastax-enterprise\">DataStax Enterprise</a> -- is just starting on this road, as it is still integrating its graph model.</p><p><strong>Are we in a post-relational world?</strong></p><p>Given that four NoSQL databases have now made it to the mainstream (based on developer interest charted by db-Engines), one would think that the matter has been settled about the role that these platforms play. One would be wrong.</p><p>There's still healthy debate. On one side, there's the irrational exuberance of being in a <a href=\"https://www.datastax.com/2018/07/cassandras-journey-via-the-five-stages-of-grief\">post-relational world</a>. Yes, NoSQL databases have become very popular among database developers. And yes, DataStax does have its share of <a href=\"https://www.oracle.com/database/technologies/index.html\" target=\"_blank\">Oracle</a> run-ins, but these are going to be wins from outside of Oracle's core back office base. Actually, DataStax and Oracle are frenemies, as <a href=\"https://www.datastax.com/products/datastax-enterprise\" target=\"_blank\">DataStax Enterprise</a> (DSE) is one of the first third-party databases to become <a href=\"https://blogs.oracle.com/cloud-infrastructure/datastax-certified-nosql-cassandra-clusters-on-bare-metal-cloud\" target=\"_blank\">officially supported</a> in the Oracle Public Cloud's <a href=\"https://cloud.oracle.com/cloud-infrastructure\" target=\"_blank\">bare metal services</a>, but we digress.</p><p>Fortuitously, having spoken with  <a href=\"https://www.datastax.com/author/patrickdatastax-com\" target=\"_blank\">Patrick McFadin</a>, the five-stages-of-grief author, we've found his insights to be far more nuanced than his blog post would suggest. But there are many others taking more extreme views based on the notion of <a href=\"https://www.techopedia.com/2/32000/trends/big-data/why-the-world-is-moving-toward-nosql-databases\">big data becoming the mainstream</a>. On the other side, there's the constituency that still believes that <a href=\"https://read.acloud.guru/serverless-superheroes-lynn-langit-on-big-data-nosql-and-google-versus-aws-f4427dc8679c\">NoSQL is overhyped</a>.</p><p>Reality is much grayer. The fact that NoSQL databases like Cassandra allow schema to vary does not mean that they lack schema, or that developers should not bother with optimizing the database for specific types of schema. In a NoSQL database, schema still matters and so does table layout. Even if you don't design the data model exactly for the queries that you're going throw at it, you still need to consider which data the app will touch when laying out the tables.</p><p>Don't count relational out either. If your application or use case requires strict ACID guarantees and data with referential integrity, relational is going to be your choice. If the use case involves complex analytical queries, you have a couple options. You could go the NoSQL route if you denormalize the data to improve performance; design the application so you don't have to rely on complex table joins; and take advantage of the Spark connectors that are becoming checkbox items with commercial NoSQL databases like DataStax Enterprise. But if the purpose of the database is solely for analytics, NoSQL won't be the right route.</p><figure class=\"image  image-medium shortcode-image\"><img src=\"https://zdnet1.cbsistatic.com/hub/i/r/2018/07/21/c30e5d5f-c52d-409a-9076-4db9a09329a0/resize/370xauto/5bb3013fbc6e0bea9b81942248c45bea/datastaxlogo.png\" class=\"\" alt=\"datastaxlogo.png\" height=\"auto\" width=\"370\" /></figure><p><strong>DataStax and Cassandra today</strong></p><p>So what gives with Apache Cassandra and DataStax, the company that for most of its history was most closely associated with the database and open source project? It boils down to the nature of the open source project. Unlike MongoDB, which controls the underlying open source project and <a href=\"https://www.mongodb.com/community/licensing\">licenses the database</a> under <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">AGPL 3</a> license (which requires developers to contribute back to the community), Cassandra is an official Apache Foundation project that is governed by the Apache license.</p><p>So DataStax does not own or control Cassandra, and a couple years ago, <a href=\"https://sdtimes.com/apache/jonathan-ellis-steps-cassandra-project/\">stepped back</a> from <a href=\"https://www.datastax.com/2016/08/a-look-back-a-look-forward\">leadership</a> of the project. DataStax still contributes and maintains presence on the Cassandra project, but the bulk of its energies are in building the enterprise platform features around it. In essence, DataStax is becoming more of a classic \"open core\" software company, a strategy that is not all that different from <a href=\"http://cloudera.com/\">Cloudera's</a> on Hadoop.</p><p>With Cassandra at 10, DataStax still embraces the platform but views it as the starting point for additional features. It is reaching out to accommodate analytics and search with Spark connectivity and new search functions that have been added to its CQL query language. Then there is the addition of graph, which came from the 2015 acquisition of Aurelius that brought the leaders of the <a href=\"https://tinkerpop.apache.org/\">Apache TinkerPop</a> project to DataStax. While DataStax is still working to fully integrate graph into its implementation of Cassandra, in the <a href=\"https://www.datastax.com/products/datastax-enterprise-6\">DSE 6.0</a> release, you can load graph and Cassandra tables at the same time onto your cluster. And the company is now meeting cloud frenemies like Amazon head-on by rolling out the DataStax Managed Cloud service on AWS and Azure</p><p>There's a reason that we've been seeing all these tenth anniversaries in the big data space over the past few years. That's because in the first decade of the 2000s, a backlash formed against the post-Y2K consensus that we were at the end of times where n-tier was the de facto standard application architecture; .NET and Java were the predominant application development stacks; and relational databases were entrenched as the enterprise standard. Notably, it was the experiences of Internet companies like Amazon and Google who subsequently overthrew the enterprise IT order whose experiences with the limitations of the post-2000 technology stack gave rise to the innovations that are now hitting middle age.</p><p>A decade in, Cassandra is no longer the new kid on the block. But the database has become one of the fixtures of modern operational systems, and the company most associated with it is using it as a jumping off point to a broader platform.</p>"}}]}},"pageContext":{"alternative_id":11590}}