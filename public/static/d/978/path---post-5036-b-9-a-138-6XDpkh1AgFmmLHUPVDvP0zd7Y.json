{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Hello Cassandra! A Java Client Example","alternative_id":5036,"content":"<p>package test1;</p><p>import java.util.Date;</p><p>import com.datastax.driver.core.*;</p><p>import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;</p><p>/*</p><p> * Simple Java client test to connect to trial cluster, create a time series data table, fill it, query it, and save it as csv for graphing.</p><p> */</p><p>public class CassTest1 {</p><p> // the 3 node trial Cassandra test cluster Public IPs. These are dummy values.</p><p> static String n1PubIP = \"01.23.45.678\";</p><p> static String n2PubIP = \"01.234.56.78\";</p><p> static String n3PubIP = \"01.23.456.78\";</p><p> static String dcName = \"hal_sydney\"; // this is the DC name you used when created</p><p> static String user = \"user\";</p><p> static String password = \"password\";</p><p> public static void main(String[] args) {</p><p> long t1 = 0; // time each CQL operation, t1 is start time t2 is end time, time is t2-t1</p><p> long t2 = 0;</p><p> long time = 0; </p><p> Cluster.Builder clusterBuilder = Cluster.builder()</p><p>     .addContactPoints(</p><p>      n1PubIP, n2PubIP, n3PubIP // provide all 3 public IPs</p><p>     )</p><p>     .withLoadBalancingPolicy(DCAwareRoundRobinPolicy.builder().withLocalDc(dcName).build()) // your local data centre</p><p>     .withPort(9042)</p><p>     .withAuthProvider(new PlainTextAuthProvider(user, password));</p><p> Cluster cluster = null;</p><p> try {</p><p> cluster = clusterBuilder.build();</p><p>     Metadata metadata = cluster.getMetadata();</p><p>     System.out.printf(\"Connected to cluster: %s\\n\", metadata.getClusterName());</p><p>     for (Host host: metadata.getAllHosts()) {</p><p>         System.out.printf(\"Datacenter: %s; Host: %s; Rack: %s\\n\", host.getDatacenter(), host.getAddress(), host.getRack());</p><p>     }</p><p>     Session session = cluster.connect();                                           </p><p>     ResultSet rs;</p><p>     boolean createTable = true;</p><p>     if (createTable) {</p><p>      rs = session.execute(\"CREATE KEYSPACE IF NOT EXISTS hals WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3}\");</p><p>      rs = session.execute(\"DROP TABLE IF EXISTS hals.sensordata\");</p><p>      rs = session.execute(\"CREATE TABLE hals.sensordata(host text, metric text, time timestamp, value double, PRIMARY KEY ((host, metric), time) ) WITH CLUSTERING ORDER BY (time ASC)\");</p><p>      System.out.println(\"Table hals.sensordata created!\");</p><p>     }</p><p>     // Fill the table with some realistic sensor data. if createTable=false we just ADD data to the table</p><p>     double startValue = 100; // start value for random walk</p><p>     double nextValue = startValue; // next value in random walk, initially startValue</p><p>     int numHosts = 100; // how many host names to generate</p><p>     int toCreate = 1000; // how many times to pick a host name and create all metrics for it</p><p>     boolean usePrepared = false;</p><p>     PreparedStatement prepared = null;</p><p>     // prepare a prepared statement</p><p>     if (usePrepared) </p><p>      {</p><p>      System.out.println(\"Using PREPARED statements for INSERT\");</p><p>      prepared = session.prepare(\"insert into hals.sensordata (host, metric, time, value) values (?, ?, ?, ?)\");</p><p>      }</p><p>     t1 = System.currentTimeMillis();</p><p>     System.out.println(\"Creating data... iterations = \" + toCreate);</p><p>     for (int r=1; r &amp;lt;= toCreate; r++) {</p><p>      long now = System.currentTimeMillis();</p><p>      Date date = new Date(now);</p><p>      // generate a random host name</p><p>      String hostname = \"host\" + (long)Math.round((Math.random() * numHosts));</p><p>      // do a random walk to produce realistic data</p><p>      double rand = Math.random();</p><p>      if (rand &amp;lt; 0.5)</p><p>      // 50% chance that value doesn't change</p><p>      ;</p><p>      else if (rand &amp;lt; 0.75)</p><p>      // 25% chance that value increases by 1</p><p>      nextValue++;</p><p>      else</p><p>      // 25% chance that value decreases by 1</p><p>      nextValue--;</p><p>      // never go negative</p><p>      if (nextValue &amp;lt; 0)</p><p>      nextValue = 0;</p><p>      // comparison of prepared vs. non-prepared statements</p><p>      if (usePrepared)  {</p><p>      session.execute(prepared.bind(\"'\" + hostname + \"'\", \"'m1'\", date, nextValue));</p><p>      session.execute(prepared.bind(\"'\" + hostname + \"'\", \"'m2'\", date, nextValue * 10));</p><p>      session.execute(prepared.bind(\"'\" + hostname + \"'\", \"'m3'\", date, nextValue * 100));</p><p>      }</p><p>      else {</p><p>      // fake three metrics (m1, m2, m3) which are somehow related.</p><p>      rs = session.execute(\"insert into hals.sensordata (host, metric, time, value) values (\" + \"'\" + hostname + \"'\" + \", \" + \"'m1'\" + \", \" + now + \",\" + (nextValue) + \");\" );</p><p>      rs = session.execute(\"insert into hals.sensordata (host, metric, time, value) values (\" + \"'\" + hostname + \"'\" + \", \" + \"'m2'\" + \", \" + now + \",\" + (nextValue * 10) + \");\" );</p><p>      rs = session.execute(\"insert into hals.sensordata (host, metric, time, value) values (\" + \"'\" + hostname + \"'\" + \", \" + \"'m3'\" + \", \" + now + \",\" + (nextValue * 100) + \");\" );</p><p>      }</p><p>      }</p><p>     t2 = System.currentTimeMillis();</p><p>     System.out.println(\"Created rows = \" + toCreate*3 + \" in time = \" + (t2-t1)); </p><p>     // find the max value for a sample</p><p>     System.out.println(\"Getting max value for sample...\");</p><p>     t1 = System.currentTimeMillis();</p><p>     rs = session.execute(\"select max(value) from hals.sensordata where host='host1' and metric='m1'\");   </p><p>     t2 = System.currentTimeMillis();</p><p>     time = t2-t1;</p><p>     Row row = rs.one();</p><p>     System.out.println(\"Max value = \" + row.toString() + \" in time = \" + time);   </p><p>     // get all the values for a sample</p><p>     System.out.println(\"Getting all rows for sample...\");</p><p>     t1 = System.currentTimeMillis();</p><p>     rs = session.execute(\"select * from hals.sensordata where host='host1' and metric='m1'\"); </p><p>     for (Row rowN : rs) {</p><p>      System.out.println(rowN.toString());</p><p>     }</p><p>     t2 = System.currentTimeMillis();</p><p>     time = t2-t1;</p><p>     System.out.println(\"time = \" + time);   </p><p>     // get all host/metric permutations</p><p>     System.out.println(\"Getting all host/metric permutations\");</p><p>     t1 = System.currentTimeMillis();</p><p>     rs = session.execute(\"select distinct host, metric from hals.sensordata\"); </p><p>     for (Row rowN : rs) {</p><p>      System.out.println(rowN.toString());</p><p>     }</p><p>     t2 = System.currentTimeMillis();</p><p>     time = t2-t1;</p><p>     System.out.println(\"time = \" + time);   </p><p>     // Note that SELECT * will return all results without limit (even though the driver might use multiple queries in the background).</p><p>     // To handle large result sets, you use a LIMIT clause in your CQL query, or use one of the techniques described in the paging documentation.</p><p>     System.out.println(\"Select ALL...\");</p><p>     t1 = System.currentTimeMillis();</p><p>     rs = session.execute(\"select * from hals.sensordata\");   </p><p>     System.out.println(\"Got rows (without fetching) = \" + rs.getAvailableWithoutFetching());</p><p>     int i = 0;</p><p>     long numBytes = 0;</p><p>     // example use of the data: count rows and total bytes returned.</p><p>     for (Row rowN : rs)</p><p>     {</p><p>      i++;</p><p>      numBytes += rowN.toString().length();</p><p>     }</p><p>     t2 = System.currentTimeMillis();</p><p>     time = t2-t1;</p><p>     System.out.println(\"Returned rows = \" + i + \", total bytes = \" + numBytes + \", in time = \" + time);</p><p> } finally {</p><p> if (cluster != null) cluster.close();     </p><p> }</p><p> }</p><p>}</p>"}}]}},"pageContext":{"alternative_id":5036}}