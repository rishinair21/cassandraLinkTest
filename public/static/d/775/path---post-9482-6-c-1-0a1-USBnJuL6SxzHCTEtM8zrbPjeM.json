{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"JeremyGrosser/tablesnap","alternative_id":9482,"content":"<h2>Theory of Operation</h2><p>Tablesnap is a script that uses inotify to monitor a directory for <code>IN_MOVED_TO</code>\nevents and reacts to them by spawning a new thread to upload that file to\nAmazon S3, along with a JSON-formatted list of what other files were in the\ndirectory at the time of the copy.</p><p>When running a Cassandra cluster, this behavior can be quite useful as it\nallows for automated point-in-time backups of SSTables. Theoretically,\ntablesnap should work for any application where files are written to some\ntemporary location, then moved into their final location once the data is\nwritten to disk. Tablesnap also makes the assumption that files are immutable\nonce written.</p><h2>Installation</h2><p>The simplest way to install tablesnap is from the Python Package Index, PyPI.\n<a href=\"https://pypi.python.org/pypi/tablesnap\" rel=\"nofollow\">https://pypi.python.org/pypi/tablesnap</a></p><pre>pip install tablesnap\n</pre><p>This distribution provides a debian/ source directory, allowing it to be built\nas a standard Debian/Ubuntu package and stored in a repository. The Debian\npackage includes an init script that can run and daemonize tablesnap for you.\nTablesnap does not daemonize itself. This is best left to tools like\ninit, supervisord, daemontools, etc.</p><p>We do not currently maintain binary packages of tablesnap. To build the debian\npackage from source, assuming you have a working pbuilder environment:</p><pre>git checkout debian\ngit-buildpackage --git-upstream-branch=master --git-debian-branch=debian --git-builder='pdebuild'\n</pre><p>The daemonized version of the Debian/Ubuntu package uses syslog for logging.\nThe messages are sent to the <code>DAEMON</code> logging facility and tagged with\n<code>tablesnap</code>. If you want to redirect the log output to a log file other than\n<code>/var/log/daemon.log</code> you can filter by this tag. E.g. if you are using\nsyslog-ng you could add</p><pre># tablesnap\nfilter f_tablesnap { filter(f_daemon) and match(\"tablesnap\" value(\"PROGRAM\")); };\ndestination d_tablesnap { file(\"/var/log/tablesnap.log\"); };\nlog { source(s_src); filter(f_tablesnap); destination(d_tablesnap); flags(final); };\n</pre><p>to <code>/etc/syslog-ng/syslog-ng.conf</code>.</p><p>If you are not a Debian/Ubuntu user or do not wish to install the tablesnap\npackage, you may copy the tablesnap script anywhere you'd like and run it from\nthere. Tablesnap depends on the pyinotify and boto Python packages. These are\navailable via \"pip install pyinotify; pip install boto;\", or as packages from\nmost common Linux distributions.</p><h2>Configuration</h2><p>All configuration for tablesnap happens on the command line. If you are using\nthe Debian package, you'll set these options in the <code>DAEMON_OPTS</code> variable in\n<code>/etc/default/tablesnap</code>.</p><pre>usage: tablesnap [-h] -k AWS_KEY -s AWS_SECRET [-r] [-a] [-B] [-p PREFIX]\n                 [--without-index] [--keyname-separator KEYNAME_SEPARATOR]\n                 [-t THREADS] [-n NAME] [-e EXCLUDE | -i INCLUDE]\n                 [--listen-events {IN_MOVED_TO,IN_CLOSE_WRITE}]\n                 [--max-upload-size MAX_UPLOAD_SIZE]\n                 [--multipart-chunk-size MULTIPART_CHUNK_SIZE]\n                 bucket paths [paths ...]\nTablesnap is a script that uses inotify to monitor a directory for events and\nreacts to them by spawning a new thread to upload that file to Amazon S3,\nalong with a JSON-formatted list of what other files were in the directory at\nthe time of the copy.\npositional arguments:\n  bucket                S3 bucket\n  paths                 Paths to be watched\noptional arguments:\n  -h, --help            show this help message and exit\n  -k AWS_KEY, --aws-key AWS_KEY\n  -s AWS_SECRET, --aws-secret AWS_SECRET\n  -r, --recursive       Recursively watch the given path(s)s for new SSTables\n  -a, --auto-add        Automatically start watching new subdirectories within\n                        path(s)\n  -B, --backup          Backup existing files to S3 if they are not already\n                        there\n  -p PREFIX, --prefix PREFIX\n                        Set a string prefix for uploaded files in S3\n  --without-index       Do not store a JSON representation of the current\n                        directory listing in S3 when uploading a file to S3.\n  --keyname-separator KEYNAME_SEPARATOR\n                        Separator for the keyname between name and path.\n  -t THREADS, --threads THREADS\n                        Number of writer threads\n  -n NAME, --name NAME  Use this name instead of the FQDN to identify the\n                        files from this host\n  -e EXCLUDE, --exclude EXCLUDE\n                        Exclude files matching this regular expression from\n                        upload.WARNING: If neither exclude nor include are\n                        defined, then all files matching \"-tmp\" are excluded.\n  -i INCLUDE, --include INCLUDE\n                        Include only files matching this regular expression\n                        into upload.WARNING: If neither exclude nor include\n                        are defined, then all files matching \"-tmp\" are\n                        excluded.\n  --listen-events {IN_MOVED_TO,IN_CLOSE_WRITE,IN_CREATE}\n                        Which events to listen on, can be specified multiple\n                        times. Values: IN_MOVED_TO, IN_CLOSE_WRITE, IN_CREATE\n                        (default: IN_MOVED_TO, IN_CLOSE_WRITE)\n  --max-upload-size MAX_UPLOAD_SIZE\n                        Max size for files to be uploaded before doing\n                        multipart (default 5120M)\n  --multipart-chunk-size MULTIPART_CHUNK_SIZE\n                        Chunk size for multipart uploads (default: 256M or 10%\n                        of free memory if default is not available)\n</pre><p>For example:</p><pre>$ tablesnap -k AAAAAAAAAAAAAAAA -s BBBBBBBBBBBBBBBB me.synack.sstables /var/lib/cassandra/data/GiantKeyspace\n</pre><p>This would cause tablesnap to use the given Amazon Web Services credentials to\nbackup the SSTables for my <code>GiantKeyspace</code> to the S3 bucket named\n<code>me.synack.sstables</code>.</p><h2>Questions, Comments, and Help</h2><p>The fine folks in <code>#cassandra-ops</code> on <code>irc.freenode.net</code> are an excellent\nresource for getting tablesnap up and running, and also for solving more\ngeneral Cassandra issues.</p>"}}]}},"pageContext":{"alternative_id":9482}}