{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Learn Cassandra Data Modeling with Simple Example","alternative_id":10869,"content":"<p>Although Cassandra query language resembles with<a href=\"https://www.guru99.com/sql.html\"> SQL </a>language, their data modelling methods are totally different. </p><p>In Cassandra, a bad data model can degrade performance, especially when users try to implement the RDBMS concepts on Cassandra. It is best to keep in mind few rules detailed below. </p><p>In this tutorial, you will learn- </p><ul><li><a href=\"#1\">Cassandra Data Model Rules</a></li> <li><a href=\"#2\">Model Your Data in Cassandra</a></li> <li><a href=\"#3\">Handling One to One Relationship</a></li> <li><a href=\"#4\">Handling one to many relationships</a></li> <li><a href=\"#5\">Handling Many to Many Relationship</a></li> </ul><h2>Cassandra Data Model Rules</h2><p>In Cassandra, writes are not expensive. Cassandra does not support joins, group by, OR clause, aggregations, etc. So you have to store your data in such a way that it should be completely retrievable. So these rules must be kept in mind while modelling data in Cassandra. </p><ol><li><strong>Maximize the number of writes</strong><p>In Cassandra, writes are very cheap. Cassandra is optimized for high write performance. So try to maximize your writes for better read performance and data availability. There is a tradeoff between data write and data read. So, optimize you data read performance by maximizing the number of data writes.</p></li> <li><strong>Maximize Data Duplication</strong><p>Data denormalization and data duplication are defacto of Cassandra. Disk space is not more expensive than memory, CPU processing and IOs operation. As Cassandra is a distributed database, so data duplication provides instant data availability and no single point of failure.</p></li> </ol><p><strong>Data Modeling Goals </strong> </p><p>You should have following goals while modelling data in Cassandra. </p><ol><li><strong>Spread Data Evenly Around the Cluster</strong><p>You want an equal amount of data on each node of Cassandra cluster. Data is spread to different nodes based on partition keys that is the first part of the primary key. So, try to choose integers as a primary key for spreading data evenly around the cluster.</p></li> <li><strong>Minimize number of partitions read while querying data</strong><p>Partition are a group of records with the same partition key. When the read query is issued, it collects data from different nodes from different partitions. </p><p>If there will be many partitions, then all these partitions need to be visited for collecting the query data. </p><p>It does not mean that partitions should not be created. If your data is very large, you can’t keep that huge amount of data on the single partition. The single partition will be slowed down. </p><p>So try to choose a balanced number of partitions. </p></li> </ol><p><strong>Good Primary Key</strong> </p><p>Let’s take an example and find which primary key is good. </p><p>Here is the table MusicPlaylist. </p><pre>&#13;\nCreate table MusicPlaylist&#13;\n    (&#13;\n        SongId int,&#13;\n        SongName text,&#13;\n        Year int,&#13;\n        Singer text,&#13;\n        Primary key(SongId, SongName)&#13;\n    );&#13;\n</pre><p>In above example, table MusicPlaylist, </p><ul><li>Songid is the partition key, and </li> <li>SongName is the clustering column</li> <li>Data will be clustered on the basis of SongName. Only one partition will be created with the SongId. There will not be any other partition in the table MusicPlaylist. </li> </ul><p>Data retrieval will be slow by this data model due to the bad primary key. </p><p>Here is another table MusicPlaylist. </p><pre>&#13;\nCreate table MusicPlaylist&#13;\n    (&#13;\n        SongId int,&#13;\n        SongName text,&#13;\n        Year int,&#13;\n        Singer text,&#13;\n        Primary key((SongId, Year), SongName)&#13;\n    );&#13;\n</pre><p>In above example, table MusicPlaylist, </p><ul><li>Songid and Year are the partition key, and </li> <li>SongName is the clustering column. </li> <li>Data will be clustered on the basis of SongName. In this table, each year, a new partition will be created. All the songs of the year will be on the same node. This primary key will be very useful for the data. </li> </ul><p>Our data retrieval will be fast by this data model. </p><h2>Model Your Data in Cassandra</h2><p>Following things should be kept in mind while modelling your queries. </p><ol><li><strong>Determine what queries you want to support</strong></li>             </ol><ul><li>Joins</li> <li>Group by</li> <li>Filtering on which column etc.</li> </ul><strong>Create table according to your queries</strong><p>Create table according to your queries. Create a table that will satisfy your queries. Try to create a table in such a way that a minimum number of partitions needs to be read.</p><h2>Handling One to One Relationship</h2><p>One to one relationship means two tables have one to one correspondence. For example, the student can register only one course, and I want to search on a student that in which course a particular student is registered in. </p><p>So in this case, your table schema should encompass all the details of the student in corresponding to that particular course like the name of the course, roll no of the student, student name, etc. </p><pre>&#13;\nCreate table Student_Course&#13;\n    (&#13;\n        Student rollno int primary key,&#13;\n        Student_name text,&#13;\n        Course_name text,&#13;\n    );&#13;\n</pre><h2>Handling one to many relationships</h2><p>One to many relationships means having one to many correspondence between two tables. </p><p>For example, a course can be studied by many students. I want to search all the students that are studying a particular course. </p><p>So by querying on course name, I will have many student names that will be studying a particular course. </p><pre>&#13;\nCreate table Student_Course&#13;\n    (&#13;\n        Student_rollno int,&#13;\n        Student_name text,&#13;\n        Course_name text,&#13;\n    );&#13;\n</pre><p>I can retrieve all the students for a particular course by the following query. </p><pre>&#13;\nSelect * from Student_Course where Course_name='Course Name';&#13;\n</pre><h2>Handling Many to Many Relationship</h2><p>Many to many relationships means having many to many correspondence between two tables. </p><p>For example, a course can be studied by many students, and a student can also study many courses. </p><p>I want to search all the students that are studying a particular course. Also, I want to search all the course that a particular student is studying. </p><p>So in this case, I will have two tables i.e. divide the problem into two cases. </p><p>First, I will create a table by which you can find courses by a particular student. </p><pre>&#13;\nCreate table Student_Course&#13;\n    (&#13;\n        Student_rollno int primary key,&#13;\n        Student_name text,&#13;\n        Course_name text,&#13;\n    );&#13;\n</pre><p>I can find all the courses by a particular student by the following query. </p><pre>&#13;\nSelect * from Student_Course where student_rollno=rollno;&#13;\n</pre><p>Second, I will create a table by which you can find how many students are studying a particular course. </p><pre>&#13;\nCreate table Course_Student&#13;\n    (&#13;\n        Course_name text primary key,&#13;\n        Student_name text,&#13;\n        student_rollno int&#13;\n    );&#13;\n</pre><p>I can find a student in a particular course by the following query. </p><pre>&#13;\nSelect * from Course_Student where Course_name=CourseName;&#13;\n</pre><p><strong>Difference between RDBMS and Cassandra Data Modelling</strong></p><table class=\"table table-striped\"><tr><td><p><strong>RDBMS</strong> </p></td><td><p><strong>Cassandra</strong> </p></td></tr><tr><td><p>Stores data in normalized form </p></td><td><p>Stores data in denormalized form </p></td></tr><tr><td><p>Legacy dbms; structured data </p></td><td><p>Wide row store,Dynamic; structured &amp; unstructured data </p></td></tr></table><p><strong>Summary</strong> </p><p>Data modelling in Cassandra is different than other RDBMS databases. Cassandra data modelling has some rules. These rules must be followed for good data modelling. Besides these rules, we saw three different data modelling cases and how to deal with them. </p><p id=\"slidetag\"> </p>"}}]}},"pageContext":{"alternative_id":10869}}