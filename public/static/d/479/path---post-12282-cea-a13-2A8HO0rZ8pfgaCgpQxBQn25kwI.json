{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Easy Cassandra scaling","alternative_id":12282,"content":"<div class=\"section-inner sectionLayout--insetColumn\"><h1 id=\"3a2a\" class=\"graf graf--h3 graf--leading graf--title\">Easy Cassandra scaling</h1><h2 id=\"74a3\" class=\"graf graf--h4 graf-after--h3 graf--subtitle\">With Terraform, Chef and Rundeck</h2><figure id=\"2439\" class=\"graf graf--figure graf-after--h4\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*1gsGOvBiRupn3TwGVFDZOw.png\" data-width=\"1600\" data-height=\"727\" data-action=\"zoom\" data-action-value=\"1*1gsGOvBiRupn3TwGVFDZOw.png\" src=\"https://cdn-images-1.medium.com/max/1600/1*1gsGOvBiRupn3TwGVFDZOw.png\" alt=\"image\" /></div><figcaption class=\"imageCaption\">Painting of Cassandra by <a href=\"https://commons.wikimedia.org/wiki/Evelyn_de_Morgan\" data-href=\"https://commons.wikimedia.org/wiki/Evelyn_de_Morgan\" class=\"markup--anchor markup--figure-anchor\" title=\"Evelyn de Morgan\" rel=\"nofollow noopener\" target=\"_blank\">Evelyn de Morgan</a> — Wikimedia</figcaption></div></figure><p id=\"8660\" class=\"graf graf--p graf-after--figure\"><em class=\"markup--em markup--p-em\">When dealing with many Cassandra clusters, day-to-day operations can get complicated. At Teads, we like to </em><a href=\"https://landing.google.com/sre/book/chapters/eliminating-toil.html\" data-href=\"https://landing.google.com/sre/book/chapters/eliminating-toil.html\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"><em class=\"markup--em markup--p-em\">eliminate toil</em></a><em class=\"markup--em markup--p-em\"> as much as possible. In this article, we describe how we automate scaling operations on our AWS infrastructure using </em><a href=\"https://www.terraform.io/\" data-href=\"https://www.terraform.io/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"><em class=\"markup--em markup--p-em\">Terraform</em></a><em class=\"markup--em markup--p-em\"> coupled with </em><a href=\"https://docs.chef.io/\" data-href=\"https://docs.chef.io/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"><em class=\"markup--em markup--p-em\">Chef</em></a><em class=\"markup--em markup--p-em\"> and </em><a href=\"http://rundeck.org/\" data-href=\"http://rundeck.org/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"><em class=\"markup--em markup--p-em\">Rundeck</em></a><em class=\"markup--em markup--p-em\">.</em></p><h3 id=\"d7ee\" class=\"graf graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">Starting point</strong></h3><p id=\"1521\" class=\"graf graf--p graf-after--h3\">We are heavy <a href=\"https://fr.slideshare.net/pygnosis/cassandra-at-teads\" data-href=\"https://fr.slideshare.net/pygnosis/cassandra-at-teads\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Cassandra users</a>, given our current infrastructure which includes 145 production nodes and performs up to one million queries per second.</p><figure id=\"9ce9\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*WaaerBKULWlA-WtQlXTGag.png\" data-width=\"750\" data-height=\"143\" data-action=\"zoom\" data-action-value=\"1*WaaerBKULWlA-WtQlXTGag.png\" src=\"https://cdn-images-1.medium.com/max/1600/1*WaaerBKULWlA-WtQlXTGag.png\" alt=\"image\" /></div><figcaption class=\"imageCaption\"><em class=\"markup--em markup--figure-em\">Writes (blue) vs Reads (green)</em></figcaption></div></figure><p id=\"9e5c\" class=\"graf graf--p graf-after--figure\">C* is a central and critical piece of this infrastructure. We use it for a lot of things from storing tracking events to targeting data used to display the right ad to the right user. We use both C* 3.0 and C* 2.1.</p><p id=\"2922\" class=\"graf graf--p graf-after--p\">One of the challenges we had operating our C* clusters was streamlining and simplifying day-to-day operations. In fact, even the most<strong class=\"markup--strong markup--p-strong\"> basic tasks required in-depth knowledge</strong> of the technology.</p><p id=\"903c\" class=\"graf graf--p graf-after--p\">In early 2016, our processes relied a lot on manual operations with little automation (<a href=\"http://capistranorb.com/\" data-href=\"http://capistranorb.com/\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\">Capistrano</a>, pssh, sed) so we had several needs in order to:</p><ul class=\"postList\"><li id=\"8338\" class=\"graf graf--li graf-after--p\">Launch and operate a new region</li><li id=\"9ae9\" class=\"graf graf--li graf-after--li\">Reverse engineer existing regions</li><li id=\"58a3\" class=\"graf graf--li graf-after--li\">Build a staging environment</li><li id=\"cf87\" class=\"graf graf--li graf-after--li\">Improve staff turnover support</li><li id=\"0f9d\" class=\"graf graf--li graf-after--li\">Track infrastructure changes and revert them easily</li></ul><h3 id=\"df78\" class=\"graf graf--h3 graf-after--li\">Step 1: Cassandra configuration automation</h3><p id=\"f5d5\" class=\"graf graf--p graf-after--h3\">The first step we took at that time was moving from Capistrano to Chef with adapted<a href=\"https://github.com/michaelklishin/cassandra-chef-cookbook\" data-href=\"https://github.com/michaelklishin/cassandra-chef-cookbook\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\"> cookbooks</a> and a custom wrapper.</p><p id=\"1b50\" class=\"graf graf--p graf-after--p\">It was a big win because we gained confidence in our infrastructure state. That said, when we needed to bootstrap or replace a node we still had to manually spawn an instance and then run a Rundeck job to install Chef client, etc. There was an obvious need for more automation.</p><h3 id=\"dae3\" class=\"graf graf--h3 graf-after--p\">Step 2: AMI creation</h3><p id=\"ac3f\" class=\"graf graf--p graf-after--h3\">At this point we were still using a DataStax AMI based on Ubuntu 12.04 and wanted better control over the whole process. As we are extensive Debian users we decided to build our own AMIs with this distribution.</p><p id=\"df76\" class=\"graf graf--p graf-after--p\">To do that, we chose<a href=\"https://www.packer.io/intro/index.html\" data-href=\"https://www.packer.io/intro/index.html\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\"> Packer</a>, a great tool from Hashicorp. Packer spawns a VM and then calls Chef to: install common software, create an AMI out of the instance and finally kill the VM.</p><p id=\"52a8\" class=\"graf graf--p graf-after--p\">A Jenkins job is used to build production or staging AMIs in different AWS regions.</p><figure id=\"6360\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*vd4dxbRQnngsr6PsgpYAAA.png\" data-width=\"350\" data-height=\"245\" src=\"https://cdn-images-1.medium.com/max/1600/1*vd4dxbRQnngsr6PsgpYAAA.png\" alt=\"image\" /></div></div></figure><p id=\"e1a2\" class=\"graf graf--p graf-after--figure\">Packer works well and even let us <strong class=\"markup--strong markup--p-strong\">debug provisioning</strong> (we already had to): in this case each step has to be confirmed manually and then a SSH key is generated to log onto the spawned instance.</p><h3 id=\"96ce\" class=\"graf graf--h3 graf-after--p\">Step 3: Cluster creation automation (first attempt)</h3><p id=\"1504\" class=\"graf graf--p graf-after--h3\">As we were already using Chef, we tried<a href=\"https://docs.chef.io/provisioning.html\" data-href=\"https://docs.chef.io/provisioning.html\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\"> Chef provisioning</a> to spawn one or several VMs based on our custom AMI.</p><p id=\"dbd9\" class=\"graf graf--p graf-after--p\">At first, it was being used on a local workstation which was really handy. However, it strongly relied upon the laptop configuration launching it. Eventually, it became difficult to maintain and rather fragile. Another drawback to Chef provisioning is that it cannot spawn<a href=\"https://github.com/chef/knife-ec2/pull/284\" data-href=\"https://github.com/chef/knife-ec2/pull/284\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\"> Spot instances</a> that we wanted to use for testing purposes.</p><p id=\"de59\" class=\"graf graf--p graf-after--p\">In the end, we realised we were still relying on a lot of manual operations and the process wasn’t ideal for teamwork.</p><h3 id=\"924f\" class=\"graf graf--h3 graf-after--p\">Step 4: Cluster creation automation (rinse and repeat)</h3><p id=\"4cda\" class=\"graf graf--p graf-after--h3\">At that time we were evaluating <em class=\"markup--em markup--p-em\">Infrastructure-as-Code</em>. We had mainly identified two solutions: <a href=\"https://aws.amazon.com/fr/cloudformation/\" data-href=\"https://aws.amazon.com/fr/cloudformation/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Cloud Formation</a> (via <a href=\"https://github.com/cloudtools/troposphere\" data-href=\"https://github.com/cloudtools/troposphere\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Troposphere</a>) and <a href=\"https://www.terraform.io/\" data-href=\"https://www.terraform.io/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">Terraform</a>.</p><p id=\"7822\" class=\"graf graf--p graf-after--p\">Choosing the latter wasn’t totally rational at the time but <strong class=\"markup--strong markup--p-strong\">Terraform looked sexier</strong> and seemed to have greater potential (open source and a fairly active community). Despite the fact that most of our infrastructure is on AWS, it was a plus to be able to <strong class=\"markup--strong markup--p-strong\">describe cross vendor infrastructure</strong> into one unique repository.</p><p id=\"e248\" class=\"graf graf--p graf-after--p\">Also, Terraform is about to <a href=\"https://stackshare.io/terraform\" data-href=\"https://stackshare.io/terraform\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">become the standard</a> for managing infrastructure. It enables high level of abstraction for describing resources and uses a highly declarative and easily readable language (HCL, Hashicorp Language).</p><p id=\"4c8a\" class=\"graf graf--p graf-after--p\">Moving forward, we started by using it to launch a new AWS Region and quickly Terraformed most of our clusters.</p><p id=\"cd0f\" class=\"graf graf--p graf-after--p\">Terraform lets us go much further than before and manage everything from VMs, identity and access management (IAM), network, DNS, managed RDBMS (RDS), alerting (Cloudwatch) to object storage (S3) and more. One of the great things about it is its ability to simulate the impacts of a modification (dry run using a <em class=\"markup--em markup--p-em\">plan</em> command) before executing it for real.</p><p id=\"5708\" class=\"graf graf--p graf-after--p\">Essentially, what we did with Terraform was industrializing around it. We defined pull requests processes, team reviews and <strong class=\"markup--strong markup--p-strong\">ensured that Jenkins and only Jenkins can <em class=\"markup--em markup--p-em\">apply</em>.</strong></p><figure id=\"e72f\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*vKJcvT-9Tpf4e1-X_-cZww.png\" data-width=\"680\" data-height=\"280\" src=\"https://cdn-images-1.medium.com/max/1600/1*vKJcvT-9Tpf4e1-X_-cZww.png\" alt=\"image\" /></div></div></figure><h3 id=\"5f37\" class=\"graf graf--h3 graf-after--figure\">Step 5: Cluster operations automation</h3><h4 id=\"be92\" class=\"graf graf--h4 graf-after--h3\">Scale Out</h4><p id=\"2440\" class=\"graf graf--p graf-after--h4\">To bootstrap a new C* node we use Terraform and<a href=\"https://www.terraform.io/docs/provisioners/chef.html\" data-href=\"https://www.terraform.io/docs/provisioners/chef.html\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\"> Chef provisioner</a> (not to be mistaken for Chef provisioning mentioned in <em class=\"markup--em markup--p-em\">step 3</em>).</p><figure id=\"c887\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*_nqzVxe-N9LJwciTnxJdYw.png\" data-width=\"625\" data-height=\"340\" src=\"https://cdn-images-1.medium.com/max/1600/1*_nqzVxe-N9LJwciTnxJdYw.png\" alt=\"image\" /></div></div></figure><p id=\"77ba\" class=\"graf graf--p graf-after--figure\">Here is a Terraform rack definition example:</p><figure id=\"fe35\" class=\"graf graf--figure graf--iframe graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><div class=\"iframeContainer\"><iframe width=\"700\" height=\"250\" src=\"https://medium.com/media/10613c72e4cb7cd0a935d2e4be6bb70d?postId=9443e0375aa7\" data-media-id=\"10613c72e4cb7cd0a935d2e4be6bb70d\" data-thumbnail=\"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F20056%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\">[embedded content]</iframe></div></div></div></figure><p id=\"5909\" class=\"graf graf--p graf-after--figure\">If we want to scale out, <strong class=\"markup--strong markup--p-strong\">all we have to do is a pull request</strong> that modifies the number of nodes in a rack (+1 on node count):</p><figure id=\"87c3\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*_kcXUDLQDk_23JPyR3CQTw.png\" data-width=\"800\" data-height=\"58\" data-action=\"zoom\" data-action-value=\"1*_kcXUDLQDk_23JPyR3CQTw.png\" src=\"https://cdn-images-1.medium.com/max/1600/1*_kcXUDLQDk_23JPyR3CQTw.png\" alt=\"image\" /></div><figcaption class=\"imageCaption\">Github pull request diff</figcaption></div></figure><p id=\"56a9\" class=\"graf graf--p graf-after--figure\">Then we run a Terraform <em class=\"markup--em markup--p-em\">plan</em> with Jenkins and paste the link of the console output in a pull request comment.</p><figure id=\"4c65\" class=\"graf graf--figure graf--iframe graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><div class=\"iframeContainer\"><iframe width=\"700\" height=\"250\" src=\"https://medium.com/media/f1496489378b0132f86596e2f4f22ae1?postId=9443e0375aa7\" data-media-id=\"f1496489378b0132f86596e2f4f22ae1\" data-thumbnail=\"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F20056%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\">[embedded content]</iframe></div></div><figcaption class=\"imageCaption\">&lt;computed&gt; values will be computed by Terraform/AWS during apply</figcaption></div></figure><p id=\"406a\" class=\"graf graf--p graf-after--figure\">From an organisational standpoint, a <strong class=\"markup--strong markup--p-strong\">mandatory review has to be done</strong> by a team member before merging. Then, we Terraform <em class=\"markup--em markup--p-em\">apply</em> via Jenkins, it will still ask us if we want to proceed:</p><figure id=\"fe4f\" class=\"graf graf--figure graf-after--p\"><div class=\"aspectRatioPlaceholder is-locked\"><div class=\"aspectRatioPlaceholder-fill\"><img class=\"graf-image\" data-image-id=\"1*KgFg-fou1CRsbbpQlcl0yw.png\" data-width=\"400\" data-height=\"102\" src=\"https://cdn-images-1.medium.com/max/1600/1*KgFg-fou1CRsbbpQlcl0yw.png\" alt=\"image\" /></div><figcaption class=\"imageCaption\">Jenkins confirmation</figcaption></div></figure><p id=\"fc92\" class=\"graf graf--p graf-after--figure\">Once the VM is up, Terraform calls Chef using the dedicated <a href=\"https://www.terraform.io/docs/provisioners/chef.html\" data-href=\"https://www.terraform.io/docs/provisioners/chef.html\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">plugin</a> to provision the VM. It will install Cassandra, Datadog’s agent, some C* tools, etc.</p><p id=\"0663\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">We do not start Cassandra automatically</strong> since we want each node to be added sequentially.</p><p id=\"cf26\" class=\"graf graf--p graf-after--p\">However, we automatically verify that everything went fine using a <em class=\"markup--em markup--p-em\">bootstrap</em> Rundeck job, checking that:</p><ul class=\"postList\"><li id=\"db7d\" class=\"graf graf--li graf-after--p\">RAID0 is correctly mounted</li><li id=\"071e\" class=\"graf graf--li graf-after--li\">the new node is located in the right datacenter</li><li id=\"16ce\" class=\"graf graf--li graf-after--li\">the new node will be able to contact seed nodes</li><li id=\"bbc1\" class=\"graf graf--li graf-after--li\">ensure there are no existing Cassandra data</li></ul><p id=\"6f76\" class=\"graf graf--p graf-after--li\">If all checks are OK, actual C* bootstrap is triggered. When bootstrapping starts we receive an alert on Slack, same goes once it’s finished so we know we can safely carry on with the next node.</p><p id=\"3316\" class=\"graf graf--p graf-after--p\">Provisioning is now possible <strong class=\"markup--strong markup--p-strong\">without mastering Cassandra</strong>. Tuning and troubleshooting still require our expertise, but in normal situations, <strong class=\"markup--strong markup--p-strong\">these operations can be done by everybody</strong> in the team.</p><h4 id=\"76e5\" class=\"graf graf--h4 graf-after--p\">Scale In</h4><p id=\"750c\" class=\"graf graf--p graf-after--h4\">In case of downscale, usually because of a bad node (noisy neighbor, hardware failure), basic alerting helps us identifying a suspicious instance. If proven faulty, we face two situations: A VM can be faulty but still accessible or otherwise totally inaccessible, usually when it’s due for <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-retirement.html\" data-href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-retirement.html\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow noopener\" target=\"_blank\">retirement</a>.</p><p id=\"19aa\" class=\"graf graf--p graf-after--p\">In the first scenario we use a <em class=\"markup--em markup--p-em\">decommissioning</em> Rundeck job that will:</p><ul class=\"postList\"><li id=\"d9ac\" class=\"graf graf--li graf-after--p\">make sure the node is located in the right datacenter</li><li id=\"ebfd\" class=\"graf graf--li graf-after--li\">pause after displaying its information so that we can kill it if we spot a mistake</li></ul><p id=\"9a71\" class=\"graf graf--p graf-after--li\">The job also triggers an alert on Slack when starting and then when it’s done (whether it’s a success or not).</p><p id=\"30e7\" class=\"graf graf--p graf-after--p\">Once decommissioned, we manually kill the VM on AWS and then launch a Terraform <em class=\"markup--em markup--p-em\">apply</em>. Terraform will identify the missing node and respawn a new one.</p><h4 id=\"4915\" class=\"graf graf--h4 graf-after--p\">Replace</h4><p id=\"3c00\" class=\"graf graf--p graf-after--h4\">When totally inaccessible, we manually terminate the AWS instance from the console. <strong class=\"markup--strong markup--p-strong\">We do not want to automate termination</strong>, the main reason being we have seen VMs pop back on after a few minutes.</p><p id=\"0d50\" class=\"graf graf--p graf-after--p\">Once terminated:</p><ul class=\"postList\"><li id=\"8185\" class=\"graf graf--li graf-after--p\">we launch a Terraform <em class=\"markup--em markup--li-em\">apply</em> that will provision a new node</li><li id=\"290f\" class=\"graf graf--li graf-after--li\">then we use a <em class=\"markup--em markup--li-em\">replace</em> Rundeck job that will modify the <em class=\"markup--em markup--li-em\">cassandra-env.sh </em>file accordingly and bootstrap the new node</li></ul><h4 id=\"0022\" class=\"graf graf--h4 graf-after--li\">Other Ops</h4><p id=\"e044\" class=\"graf graf--p graf-after--h4\">We also leverage Rundeck features for other day-to-day operations like:</p><ul class=\"postList\"><li id=\"fb22\" class=\"graf graf--li graf-after--p\">Monitoring rolling restarts,</li><li id=\"3f5d\" class=\"graf graf--li graf-after--li\">Running nodetool commands,</li><li id=\"a26d\" class=\"graf graf--li graf-after--li\">Applying schema migrations,</li><li id=\"e5a8\" class=\"graf graf--li graf-after--li\">Scheduling jobs for backups, major compactions on some specific tables, etc.</li></ul><h3 id=\"3f62\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Main progress and feedback</strong></h3><p id=\"ac38\" class=\"graf graf--p graf-after--h3\">Using Terraform, Chef provisioner, Packer and Rundeck we have greatly simplified and automated scaling operations. It also <strong class=\"markup--strong markup--p-strong\">helped us build a complex yet trusted infrastructure</strong>. Having to precisely know which files to change before starting a new node is now a thing of the past and potential mistakes are checked.</p><p id=\"cfd8\" class=\"graf graf--p graf-after--p\">But using Terraform to handle Kafka and Cassandra datastores in production wasn’t an easy decision. <strong class=\"markup--strong markup--p-strong\">We carefully tested it in staging environment</strong> to make sure that it respawned the right instances (i.e. hostname and Terraform index) and <strong class=\"markup--strong markup--p-strong\">we encourage everybody to do so</strong>.</p><p id=\"0ebd\" class=\"graf graf--p graf-after--p graf--trailing\">We have always used the most recent Terraform version and<strong class=\"markup--strong markup--p-strong\"> have had surprises</strong> after some updates. For example, due to a regression of Chef provisioner we once couldn’t spawn Cassandra nodes anymore. To prevent this from happening again, we implemented a testing process for several use cases on staging environment with a Jenkins slave.</p></div><div class=\"section-inner sectionLayout--insetColumn\"><p id=\"1f6c\" class=\"graf graf--p graf--leading\">To wrap up, here are the <strong class=\"markup--strong markup--p-strong\">key improvements</strong> we wouldn’t give up now:</p><ul class=\"postList\"><li id=\"c9a9\" class=\"graf graf--li graf-after--p\">A <strong class=\"markup--strong markup--li-strong\">unified Infrastructure as code</strong> in one repository, describing both our AWS and GCP resources.</li><li id=\"e27d\" class=\"graf graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">Explicit documentation and history</strong> that we couldn’t have using cloud consoles. Each commit contains actionable information, newcomers aren’t lost anymore when discovering our infrastructure (e.g. until<a href=\"https://aws.amazon.com/fr/blogs/aws/new-descriptions-for-security-group-rules/\" data-href=\"https://aws.amazon.com/fr/blogs/aws/new-descriptions-for-security-group-rules/\" class=\"markup--anchor markup--li-anchor\" rel=\"nofollow noopener\" target=\"_blank\"> recently</a> security group IPs couldn’t be annotated).</li><li id=\"e30e\" class=\"graf graf--li graf-after--li\">The ability to <strong class=\"markup--strong markup--li-strong\">spawn entire clusters promptly and safely.</strong></li><li id=\"9dec\" class=\"graf graf--li graf-after--li graf--trailing\">An history of previous actions’ execution time, really useful to give ETAs.</li></ul></div><div class=\"section-inner sectionLayout--insetColumn\"><p id=\"2308\" class=\"graf graf--p graf--leading\">Of course, we are continually looking for new enhancements to <strong class=\"markup--strong markup--p-strong\">automate our way out of repeatable tasks</strong>.</p><p id=\"178d\" class=\"graf graf--p graf-after--p\">As <strong class=\"markup--strong markup--p-strong\">Cloud instances are </strong><a href=\"https://www.datadoghq.com/pdf/top_5_aws_ec2_performance_problems_ebook.pdf\" data-href=\"https://www.datadoghq.com/pdf/top_5_aws_ec2_performance_problems_ebook.pdf\" class=\"markup--anchor markup--p-anchor\" rel=\"noopener nofollow\" target=\"_blank\"><strong class=\"markup--strong markup--p-strong\">not all equal</strong></a><strong class=\"markup--strong markup--p-strong\">, </strong>we would like to automatically select a good one when we spawn a new node. By benchmarking several of them we should be able to identify instances that are soon to be retired or prone to performance issues and only pick the best one.</p><p id=\"6a9b\" class=\"graf graf--p graf-after--p\">If you find these kind of challenges exiting, please reach out, we would be happy to talk about it.</p><p id=\"9656\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">In the meantime </strong>here is a couple of other articles from Teads’ Infrastructure team:</p><div id=\"e7f3\" class=\"graf graf--mixtapeEmbed graf-after--p\"><a href=\"https://medium.com/teads-engineering/real-life-aws-cost-optimization-strategy-at-teads-135268b0860f\" data-href=\"https://medium.com/teads-engineering/real-life-aws-cost-optimization-strategy-at-teads-135268b0860f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/teads-engineering/real-life-aws-cost-optimization-strategy-at-teads-135268b0860f\"><strong class=\"markup--strong markup--mixtapeEmbed-strong\">Real-life AWS cost optimization strategy</strong><br /><em class=\"markup--em markup--mixtapeEmbed-em\">How we keep a good Amazon Web Services billing hygiene at Teads</em>medium.com</a></div><div id=\"a20b\" class=\"graf graf--mixtapeEmbed graf-after--mixtapeEmbed graf--trailing\"><a href=\"https://medium.com/teads-engineering/scaling-your-on-duty-team-bc467c480747\" data-href=\"https://medium.com/teads-engineering/scaling-your-on-duty-team-bc467c480747\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/teads-engineering/scaling-your-on-duty-team-bc467c480747\"><strong class=\"markup--strong markup--mixtapeEmbed-strong\">Scaling your on-duty team</strong><br /><em class=\"markup--em markup--mixtapeEmbed-em\">The internet never sleeps, and even with the best design for resilience, one day, your system will go down.</em>medium.com</a></div></div>"}}]}},"pageContext":{"alternative_id":12282}}