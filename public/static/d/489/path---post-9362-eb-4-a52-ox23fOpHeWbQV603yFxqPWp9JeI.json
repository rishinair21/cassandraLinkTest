{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Apache Cassandra","alternative_id":9362,"content":"Apache Cassandra - Google Slides<noscript><div class=\"docs-butterbar-container\"><div class=\"docs-butterbar-wrap\"><p>JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.</p></div><br /></div></noscript><article role=\"article\" class=\"slide\" title=\"Slide 1\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Oliver Ruebenacker, SoftEng, Wed, Jan 17, 2018</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 2\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>What we will talk about today</p></div><div class=\"shape\" title=\"\"><p>If your SQL DB (MySQL, Oracle DB, PostgreSQL, H2, MariaDB, etc) is too slow because your data is too big <br />(typically above a terabyte, depending on data, setup, queries, hardware and acceptable response times), <br />then Apache Cassandra may be a great alternative.</p><ul class=\"list-kix_2u2b96dqnkw6-0\"><li value=\"1\">Some background on databases</li><li value=\"1\">SQL vs noSQL</li><li value=\"2\">Replication vs sharding</li><li value=\"3\">CAP theorem</li><li value=\"4\">ACID vs BASE</li></ul>What is Apache Cassandra and why you might want to use it<ul class=\"list-kix_2u2b96dqnkw6-1\"><li value=\"1\">Overview</li><li value=\"2\">Architecture/implementation</li><li value=\"3\">Cassandra Query Language (CQL)</li><li value=\"4\">Strengths and limitations</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 3\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Background: SQL</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_otbvo7e7o70n-0\"><li value=\"1\">1970ies to 2000s, almost any popular DB was relational and (then soon) SQL</li><li value=\"1\">Early 1970ies, IBM develops Structured English Query Language (SEQUEL)</li><li value=\"2\">Soon renamed to Structured Query Language (SQL), since SEQUEL already taken</li><li value=\"3\">Soon almost any relational DB supports SQL</li><li value=\"4\">ANSI standard since 1986, but varying dialects persist (valid ids, case sensitivity, etc)</li></ul>Examples of SQL DBs: IBM DB2, Oracle, MySQL, MariaDB, PostgreSQL, H2SQL is very powerful and flexibleSQL DBs do not scale well into terabytes</div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 4\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Relational databases</p></div><div class=\"shape\" title=\"\"><p>Data is stored in tables linked by keys. Queries join tables by keys. Typically, data is normalized (avoid duplications).</p></div><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"3\"><div><p>Transactions</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Customer</p></div></td><td rowspan=\"1\" colspan=\"1\"><div><p>Product</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr></table><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"3\"><div><p>Customers</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Boston</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Austin</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Seattle</p></div></td></tr></table><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"3\"><div><p>Products</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>washer</p></div></td><td rowspan=\"1\" colspan=\"1\"></td></tr></table></section></article><article role=\"article\" class=\"slide\" title=\"Slide 5\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Joining tables</p></div><div class=\"shape\" title=\"\"><p>SQL typically involves joining tables on the fly to larger tables:</p></div><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"7\"><div><p>Transactions-Customers-Products joined</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Customer</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Product</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Austin</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Seattle</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>washer</p></div></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>Austin</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>washer</p></div></td><td rowspan=\"1\" colspan=\"1\"></td></tr></table></section></article><article role=\"article\" class=\"slide\" title=\"Slide 6\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>All SQL DBs follow ACID principles that make life easier:</p><ul class=\"list-kix_cpyzj12749wo-0\"><li value=\"1\">Atomicity: a request is either executed completely, or not at all. No partial execution.</li><li value=\"2\">Consistency: a request can only transform a valid state into another valid state</li><li value=\"3\">Isolation: result of multiple concurrent requests is same as if requests are executed in sequence</li><li value=\"4\">Durability: a request only completed successfully if permanent (i.e. stored to disk)</li></ul><p>ACID usually implies that a write needs a (often global) lock - other requests (read or write) will have to wait.</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 7\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Scaling out: replication vs sharding</p></div><div class=\"shape\" title=\"\"><p>Replication</p></div><div class=\"shape\" title=\"\"><p>Sharding</p></div><div class=\"shape\" title=\"\"><p>Sharding with replication (n = 2)</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 8\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Replication</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_yhp1hf5ts1ko-0\"><li value=\"1\">Can help avoid single point of failure</li><li value=\"2\">Allows high volume of reads, since these can be served in parallel by different nodes</li><li value=\"3\">But a write still needs to be executed by every node</li><li value=\"4\">If amount of data gets large, all requests become slow, and replication won't prevent that</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 9\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Sharding</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_29tczu9j09pv-0\"><li value=\"1\">Network is the bottleneck: Sharding only works well if each node can work with its own shard without communicating too much with other nodes. </li><li value=\"2\">Under this condition:</li><li value=\"1\">Can handle large volume of reads or writes.</li><li value=\"2\">Can scale with large data sets.</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 10\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Distributed SQL</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_c09mlr5uthpg-0\"><li value=\"1\">SQL allows joining any row in any table with any other row in any table</li><li value=\"2\">If we would shard, rows to be joined would end up on different shards most of the time.</li><li value=\"3\">This makes sharding unfeasible for SQL DBs.</li><li value=\"4\">Distributed SQL DBs are always fully replicated, never sharded.</li><li value=\"5\">Therefore, distributed SQL DBs can scale with high volumes of reads, but not writes.</li><li value=\"6\">Distributed SQL DBs will be slow for any read or write if data gets too big (typically, terabytes)</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 11\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><ul class=\"list-kix_jw3eda2a8ekv-0\"><li value=\"1\">Originally, noSQL meant relational DB without SQL.</li><li value=\"2\">But now, noSQL means non-relational DBs.</li><li value=\"3\">Often, noSQL is a synonym for big data </li><li value=\"4\">Many take noSQL to mean \"not only SQL\"</li><li value=\"5\">Examples for noSQL:</li><li value=\"1\">Wide table: Bigtable, Cassandra, HBase, Scylla</li><li value=\"2\">Graph: Rdf4j, Blazegraph, Neo4j, Tinkerpop</li><li value=\"3\">Key-value: Voldemort, Riak, Dynamo</li><li value=\"4\">Document: MongoDB, CouchDB</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 12\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>CAP theorem</p></div><div class=\"shape\" title=\"\"><p>You cannot have all three of these (Eric Brewer, 1998):</p><ul class=\"list-kix_s3lz09dqq5au-0\"><li value=\"1\">Consistency: Every read receives the most recent write or an error</li><li value=\"1\">Note: different from ACID consistency; CAP consistency is roughly ACID isolation</li></ul>Availability: Every request receives a (non-error) response – without guarantee that it contains the most recent writePartition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes<p>ACID DBs choose consistency over availability.</p><p>NoSQL DBs typically choose availability over consistency.</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 13\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Most often, noSQL means:</p><p>Basically available, soft state, eventually consistent (BASE)</p><p>(in chemistry, bases are opposites of acids)</p><p>Eventually consistent means, reads may not see most recent writes, but will eventually.</p><p>BASE allows writes in parallel to reads or other writes.</p><p>Typically/roughly, requests are timestamped when received and percolate through the system. The later timestamp wins, but different parts of system may receive requests with delays and in different order.</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 14\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Cassandra history</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_q736sso1gtxm-0\"><li value=\"1\">Started at Facebook by Avinash Lakshman (one author of Amazon's Dynamo) and Prashant Malik</li><li value=\"2\">Cassandra in Greek mythology is a prophetess cursed not to be believed. She warned of the Trojan Horse.</li><li value=\"1\">Name stands for \"doom of the Oracle\"</li></ul>2008: open-source2009/2010: Apache incubator/top-level project2010: DataStax founded, commercial support for Cassandra2011: Cassandra Query Language (CQL)2012: Highest throughput according to studyMost popular wide-table DB according to DB-EnginesCompatible DBs:<ul class=\"list-kix_q736sso1gtxm-1\"><li value=\"1\">DataStax Enterprise</li><li value=\"2\">Scylla</li></ul></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 15\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Replication and tunable consistency</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_956ta65hdb6-0\"><li value=\"1\">Each table belongs to a keyspace. </li><li value=\"2\">Replication strategy is defined per keyspace</li><li value=\"3\">Replication strategy can be simply be a number of replicas, or replicas per datacenter or rack</li><li value=\"4\">Requests are:</li><li value=\"1\">Received by any node</li><li value=\"2\">Forwarded to each replica</li><li value=\"3\">Considered successful if number of replicas reporting success reaches consistency level</li></ul>Consistency level can be chosen per request:<ul class=\"list-kix_956ta65hdb6-1\"><li value=\"1\">Minimal: one replica</li><li value=\"2\">Quorum: majority of replicas</li><li value=\"3\">Maximum: all replicas</li><li value=\"4\">Can also be defined based on</li><li value=\"1\">local datacenter</li><li value=\"2\">all datacenters</li></ul><p>​</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 16\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Cassandra tables are sparse</p></div><div class=\"shape\" title=\"\"><p>Compact table (typical for SQL DBs):</p><p>​</p></div><div class=\"shape\" title=\"\"><p>Sparse table (wide table DBs):</p><p>​</p></div><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>poodle</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>physics</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>corolla</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>great dane</p></div></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"></td></tr></table><table class=\"table\" cellpadding=\"0\" title=\"\" style=\"border-spacing: 0px;\"><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>dog: poodle, love: bob, phd: physics</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>car: prius, love: alice</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>car: corolla, phd: math</p></div></td></tr><tr><td rowspan=\"1\" colspan=\"1\"></td><td rowspan=\"1\" colspan=\"1\"><div><p>dog: great dane</p></div></td></tr></table></section></article><article role=\"article\" class=\"slide\" title=\"Slide 17\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Cassandra Implementation</p></div><div class=\"shape\" title=\"\"><p>Token ring: all primary keys are converted to hashes (tokens) that form a ring-shaped space</p><p>Consistent hashing: tokens are assigned to shards (and nodes) such as to minimize necessary redistributing of data when nodes are added or removed</p><p>Tombstones: cells to be deleted are marked with tombstones and removed later (during compactification). This avoids accidental resurrection by earlier, still uncompleted creates/updates.</p><p>Bloom filters: A hash mask can prove in many cases the non-existence of a hash (i.e. primary key)</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 18\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Cassandra Node Architecture</p></div><div class=\"shape\" title=\"\"><p>memory</p></div><div class=\"shape\" title=\"\"><p>MemTables</p></div><div class=\"shape\" title=\"\"><p>CommitLog (append-only)</p></div><div class=\"shape\" title=\"\"><p>SSTables (read-only)</p></div><div class=\"shape\" title=\"\"><p>compact</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 19\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Table in Cassandra</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_o38tcgqwbmvf-0\"><li value=\"1\">One or more columns are primary key</li><li value=\"1\">Among these, one or more columns are the partition key</li><li value=\"1\">Same partition means same node</li></ul>The others (can be none) are the clustering keyPrimary key uniquely identifies a rowPrimary key is converted to tokenOrder of columns in primary key determines order of rows Cassandra is essentially like a Map[PartitionKey, Map[ClusteringKey, Map[String, Cell]]]</div><div class=\"shape\" title=\"\"><p>partition key</p></div><div class=\"shape\" title=\"\"><p>partition</p></div><div class=\"shape\" title=\"\"><p>clustering key</p></div><div class=\"shape\" title=\"\"><p>column name</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 20\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Cassandra Query Language (CQL) Features</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_2e0g42f57kou-0\"><li value=\"1\">Similar to SQL, but much simpler</li><li value=\"2\">No joins, no subqueries, no stored procedures, no constraints</li><li value=\"3\">A cell can also contain a collection (list, set or map) or a JSON object</li><li value=\"4\">Can have user-defined types and functions</li><li value=\"5\">To insert/update/delete, need to specify primary key</li><li value=\"6\">To select, need either:</li><li value=\"1\">primary key or range</li><li value=\"2\">columns for which an index has been created</li></ul>We can also build materialized views</div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 21\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Create Table (CQL)</p></div><div class=\"shape\" title=\"\"><p>CREATE TABLE models (<br />make text,<br />model text,<br />year int,<br />seats int,<br />engine text,<br />fuel text,<br />PRIMARY KEY ((make, model), year)<br />)</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 22\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>INSERT (CQL)</p></div><div class=\"shape\" title=\"\"><p>Valid:</p><p>INSERT INTO models (make, model, year, seats, fuel)<br />VALUES ('Toyota', 'Corolla', 2005, 5, 'regular')</p><p>Invalid (primary key not given - year is missing):</p><p>INSERT INTO models (make, model, seats, fuel)<br />VALUES ('Toyota', 'Corolla', 5, 'regular')</p><p>​</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 23\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>SELECT (CQL)</p></div><div class=\"shape\" title=\"\"><p>Valid, gives one result (if exists):</p><p>SELECT make, model, year, seats, fuel FROM models <br />WHERE make = 'Toyota' AND model = 'Corolla' AND year = 2005</p><p>Also valid, even without year, since it is a continuous range of primary keys (results are all years):</p><p>SELECT make, model, year, seats, fuel FROM models <br />WHERE make = 'Toyota' AND model = 'Corolla'</p><p>Invalid, since not a continuous range of primary keys (order of columns in primary key matters!):</p><p>SELECT make, model, year, seats, fuel FROM models <br />WHERE make = 'Toyota' AND year = 2005</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 24\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Need to organize data around queries</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_iu6czgfxvole-0\"><li value=\"1\">Data needs to be organized around queries</li><li value=\"1\">Any query needs a primary key or key range, so pick primary key with caution</li><li value=\"2\">We can have secondary indices, although they are slower (they redirect)</li><li value=\"3\">We can scan over a range of keys</li><li value=\"4\">We can filter results, although that is discouraged</li><li value=\"5\">We can make a full scan and filter. Obviously, much slower</li></ul>May need to duplicate data:<ul class=\"list-kix_iu6czgfxvole-1\"><li value=\"1\">Extra columns to make up  for lack of joins</li><li value=\"2\">If we don't have primary key for one table, may need another, similar table but with a different primary key</li><li value=\"3\">Materialized views are an automatic way of duplication</li></ul>Consistency for duplicated data is enforced by client applicationClient app needs to manage lack of immediate consistency<p>Already miss SQL? That's the price we pay for large data and/or high write volume.</p></div></section></article><article role=\"article\" class=\"slide\" title=\"Slide 25\"><section class=\"slide-content\" title=\"Slide content\"><div class=\"shape\" title=\"\"><p>Resources</p></div><div class=\"shape\" title=\"\"><ul class=\"list-kix_kuhqbnc755uo-0\"><li value=\"1\">Link to these slides: <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.google.com/url?q=https://broad.io/cassandra&amp;sa=D&amp;ust=1519758362925000&amp;usg=AFQjCNFTcYw-L4zoVfd4ffdG1RLjH8I4ug\">https://broad.io/cassandra</a></li><li value=\"2\">Contact me: Oliver Ruebenacker, <a target=\"_blank\" rel=\"noreferrer\" href=\"mailto:oliverr@broadinstitute.org\">oliverr@broadinstitute.org</a></li><li value=\"3\">Slack channel: #cassandra</li><li value=\"4\">Google group: cassandra@broadinstitute.org</li></ul></div></section></article>"}}]}},"pageContext":{"alternative_id":9362}}