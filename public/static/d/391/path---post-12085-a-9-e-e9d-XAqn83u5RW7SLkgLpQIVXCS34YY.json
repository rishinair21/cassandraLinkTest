{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Apache Cassandra, Part 2: Cassandra vs MongoDB","alternative_id":12085,"content":"<section class=\"section section--body section--first\"><div class=\"section-content\"><div class=\"section-inner sectionLayout--insetColumn\"><p id=\"2182\" class=\"graf graf--p graf-after--h3 graf--trailing\">This <a href=\"https://blog.emumba.com/apache-cassandra-part-1-introduction-and-key-features-18d02ba0b8cc\" data-href=\"https://blog.emumba.com/apache-cassandra-part-1-introduction-and-key-features-18d02ba0b8cc\" class=\"markup--anchor markup--p-anchor\" target=\"_blank\">series of posts</a> present an introduction to Apache Cassandra. It discusses key Cassandra features, its core concepts, how it works under the hood, how it is different from other data stores, data modelling best practices with examples, and some tips &amp; tricks.</p></div></div></section><section class=\"section section--body section--last\"><div class=\"section-content\"><div class=\"section-inner sectionLayout--insetColumn\"><figure id=\"0ecf\" class=\"graf graf--figure graf--leading\"><div class=\"aspectRatioPlaceholder is-locked\"><img class=\"graf-image\" data-image-id=\"1*jjO-vhoXinKrQgAX8UaS0w.png\" data-width=\"500\" data-height=\"267\" src=\"https://cdn-images-1.medium.com/max/1600/1*jjO-vhoXinKrQgAX8UaS0w.png\" alt=\"image\" /></div></figure><p id=\"8498\" class=\"graf graf--p graf-after--figure\">This series is not about MongoDB or even MongoDB vs Cassandra, but “<em class=\"markup--em markup--p-em\">How is it different from MongoDB</em>?” is a commonly asked question when talking about Cassandra. So before going deep into Cassandra, I would like to describe some commonalities as well as key differences between the two.</p><h4 id=\"9fe8\" class=\"graf graf--h4 graf-after--p\">Commonalities</h4><p id=\"7ade\" class=\"graf graf--p graf-after--h4\">Here are some properties which both Cassandra and MongoDB share:</p><ul class=\"postList\"><li id=\"c61c\" class=\"graf graf--li graf-after--p\">None of these data stores are a replacement for RDBMS.</li><li id=\"a2eb\" class=\"graf graf--li graf-after--li\">They do not provide ACID compliance.</li><li id=\"0a84\" class=\"graf graf--li graf-after--li\">Both keep recent data in memory to improve performance.</li><li id=\"1c0a\" class=\"graf graf--li graf-after--li\">Both data stores discourage joins and prefer denormalization.</li><li id=\"dfbe\" class=\"graf graf--li graf-after--li\">Both are open source, have been in industry for quite some time, and have comprehensive support.</li></ul><h4 id=\"7b9a\" class=\"graf graf--h4 graf-after--li\">Differences</h4><p id=\"08a9\" class=\"graf graf--p graf-after--h4\">At a high level, some major differences between these two stores are:</p><ul class=\"postList\"><li id=\"a37d\" class=\"graf graf--li graf-after--p\">MongoDB uses B-Trees under the hood for storage while Cassandra is based on LSM trees which makes Cassandra more scalable for writes.</li><li id=\"8f41\" class=\"graf graf--li graf-after--li\">MongoDB is more closer to a RDBMS than Cassandra as you can implement concepts like relationships and joins on top of MongoDB. Same is not true for Cassandra.</li><li id=\"8479\" class=\"graf graf--li graf-after--li\">MongoDB supports nested objects, Cassandra does not.</li><li id=\"79d7\" class=\"graf graf--li graf-after--li\">MongoDB offers both primary and secondary index and also allows indexing of nested properties. While Cassandra only supports primary index. [More on this later]</li><li id=\"a28d\" class=\"graf graf--li graf-after--li\">MongoDB lets you write queries in JSON format and allow <a href=\"https://docs.mongodb.com/manual/reference/operator/query/\" data-href=\"https://docs.mongodb.com/manual/reference/operator/query/\" class=\"markup--anchor markup--li-anchor\" rel=\"noopener\" target=\"_blank\">all kinds of</a> operators. Cassandra offers <a href=\"https://docs.datastax.com/en/cql/3.1/cql/cql_intro_c.html\" data-href=\"https://docs.datastax.com/en/cql/3.1/cql/cql_intro_c.html\" class=\"markup--anchor markup--li-anchor\" rel=\"noopener\" target=\"_blank\">CQL</a> which only supports limited operators and use of these operators also depend on how you have defined the schema.</li><li id=\"c5f5\" class=\"graf graf--li graf-after--li\">MongoDB provides built-in aggregation, which works well for small to medium sized databases, Cassandra has no such feature.</li><li id=\"18e1\" class=\"graf graf--li graf-after--li\">MongoDB does not enforce schema on write, Cassandra prefers design time schema.</li><li id=\"0f25\" class=\"graf graf--li graf-after--li\">MongoDB is document based store which is somewhat similar to rows in a table, Cassandra on the other hand is a column family store (and not a column oriented store, more on this later).</li><li id=\"9582\" class=\"graf graf--li graf-after--li\">Cassandra provides high write availability through its master-less or multi master architecture as compared to MongoDB which works on master slave architecture. (More on this later)</li><li id=\"84ad\" class=\"graf graf--li graf-after--li\">Cassandra provides linear write scalability which is not the case with MongoDB.</li></ul><p id=\"5b91\" class=\"graf graf--p graf-after--li graf--trailing\"><a href=\"https://blog.emumba.com/apache-cassandra-part-3-row-vs-column-stores-fcc2a8d5c632\" data-href=\"https://blog.emumba.com/apache-cassandra-part-3-row-vs-column-stores-fcc2a8d5c632\" class=\"markup--anchor markup--p-anchor\" target=\"_blank\">Next: Apache Cassandra, Part 3: Row vs Column Stores</a></p></div></div></section>"}}]}},"pageContext":{"alternative_id":12085}}