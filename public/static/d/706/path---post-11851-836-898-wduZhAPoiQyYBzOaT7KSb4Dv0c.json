{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Let’s play with Cassandra…(Part 2/3)","alternative_id":11851,"content":"<div class=\"sharify-container\"><ul><li class=\"sharify-btn-twitter\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Tweet on Twitter\" href=\"https://twitter.com/intent/tweet?text=Let%26%238217%3Bs+play+with+Cassandra%26%238230%3B%28Part+2%2F3%29: https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-twitter\">&#13;\n\t\t\t\t\t\t\t\t\tTweet&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-facebook\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Facebook\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fblog.octo.com%2Fen%2Fnosql-lets-play-with-cassandra-part-23%2F\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-facebook\">&#13;\n\t\t\t\t\t\t\t\t\tShare&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-gplus\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Google+\" href=\"http://plus.google.com/share?url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-gplus\">&#13;\n\t\t\t\t\t\t\t\t\t+1&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-linkedin\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Linkedin\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/&amp;title=Let’s play with Cassandra…(Part 2/3)\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-linkedin\">&#13;\n\t\t\t\t\t\t\t\t\tLinkedIn&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li></ul></div><p>In this part, we will work in more details and closer to the code with Cassandra. The idea is to provide a kind of simplified current account system where a user has an account and the account has a balance…<br />\nThis system will so manipulate the following concepts:<br />\n– A client has different kind of properties defining his identity<br />\n– A client has one account<br />\n– The account has a list of operations (withdrawal, transfer are all kind of operations)<br />\nHere is the way it would have been modelized in the relational world (or at least UML world)<br /><a href=\"https://blog.octo.com/wp-content/uploads/2010/06/uml1.png\"><img src=\"https://blog.octo.com/wp-content/uploads/2010/06/uml1.png\" alt=\"\" title=\"uml\" width=\"530\" height=\"172\" class=\"aligncenter size-full wp-image-11785\" srcset=\"https://blog.octo.com/wp-content/uploads/2010/06/uml1.png 530w, https://blog.octo.com/wp-content/uploads/2010/06/uml1-300x97.png 300w, https://blog.octo.com/wp-content/uploads/2010/06/uml1-160x52.png 160w\" /></a><br /></p>\n<h2>The Cassandra set up</h2>\n<p>I will not drive deep into the details of a Cassandra set up. <a href=\"http://www.sodeso.nl/?p=80\">This article explains</a> it in details but here are the main points. </p>\n<h3>Define your cluster</h3>\n<p>Each nodes of the cluster has a configuration file called storage-conf.xml where are defined the following main sections<br />\n– <strong>Cluster and Keyspace definition</strong>. The cluster is made of several nodes (the Seed) which store all the Keyspaces you will define (and of course data).<br />\nAs we talked about in the previous part [add a link], you define the Keyspace that will contain all the ColumnFamily. </p>\n<pre><code class=\"xml\">&lt;storage&gt;&#13;\n  &lt;clustername&gt;Test Cluster&lt;/clustername&gt;&#13;\n  &lt;autobootstrap&gt;false&lt;/autobootstrap&gt;&#13;\n&lt;keyspaces&gt;&#13;\n    &lt;keyspace Name=\"myBank\"&gt;&#13;\n...&#13;\n&lt;/keyspace&gt;&lt;/keyspaces&gt;&#13;\n...&#13;\n&lt;partitioner&gt;org.apache.cassandra.dht.RandomPartitioner&lt;/partitioner&gt;&#13;\n&lt;initialtoken&gt;&lt;/initialtoken&gt;&#13;\n &lt;seeds&gt;&#13;\n    &lt;seed&gt;192.168.216.129&lt;/seed&gt;&#13;\n    &lt;seed&gt;192.168.216.130&lt;/seed&gt;&#13;\n  &lt;/seeds&gt;&#13;\n&lt;/storage&gt;</code></pre>\n<p>Then, you define the IP address of all the nodes (ie. The seeds) that will compose your cluster. During the startup phase, all the nodes will communicate to each other (using Gossip protocol), thus detecting starting or node failures.  You can go further in the definition of your cluster topology and group (as far as I know in another conf file) IPs by datacenters. </p>\n<p>The InitialToken, if not defined, will automatically be set by Cassandra (based on the cluster topology and following the Consistent Hashing algorithm). The documentation gives more details about <a href=\"http://wiki.apache.org/cassandra/Operations\">ring management</a><br />\nThe partitioner is a much more tricky and Cassandra provides, by default, <a href=\"http://spyced.blogspot.com/2009/05/consistent-hashing-vs-order-preserving.html\">two partitioners</a> : the <a href=\"http://ria101.wordpress.com/2010/02/22/cassandra-randompartitioner-vs-orderpreservingpartitioner/\">RandomPartitioner and the OrderPreservingPartitioner</a>. In the first case, the data will be partitioned using a row key hash (typically md5). In the second case, the data will be partitioned in their natural order and thus facilitates the range queries. So once again, the choice you made (and you cannot change it during your cluster life) is depending on the way your data is manipulated.</p>\n<p>– <strong>Node access</strong></p>\n<pre><code class=\"xml\">&lt;listenaddress&gt;192.168.216.128&lt;/listenaddress&gt;&#13;\n  &lt;storageport&gt;7000&lt;/storageport&gt;&#13;\n&#13;\n  &lt;thriftaddress&gt;192.168.216.128&lt;/thriftaddress&gt;&#13;\n  &lt;!-- Thrift RPC port (the port clients connect to). --&gt;&#13;\n  &lt;thriftport&gt;9160&lt;/thriftport&gt;&#13;\n...</code></pre>\n<p>The <code>ListenAddress</code> and <code>ThriftAddress</code> enable to define the current IP and listening port for the current node. The first IP is used by all the nodes to gossip each others. The second address is the one used by thrift clients to connect to the node and insert, delete or update data.</p>\n<h3>Define your data models</h3>\n<p>In our example, we will define two ColumnFamily. The first one will store all the customers. The second one all the operations. </p>\n<pre><code class=\"xml\">&lt;keyspace Name=\"myBank\"&gt;&#13;\n&lt;columnfamily CompareWith=\"UTF8Type\" Name=\"customers\"/&gt;&#13;\n&lt;columnfamily CompareWith=\"TimeUUIDType\" Name=\"operations\" ColumnType=\"Super\" CompareSubcolumnsWith=\"UTF8Type\"/&gt;&#13;\n&#13;\n&lt;!-- Number of replicas of the data --&gt;&#13;\n&lt;replicationfactor&gt;2&lt;/replicationfactor&gt;&#13;\n       &lt;replicaplacementstrategy&gt;org.apache.cassandra.locator.RackUnawareStrategy&lt;/replicaplacementstrategy&gt;&#13;\n&lt;keyscachedfraction&gt;0.01&lt;/keyscachedfraction&gt;&#13;\n      &lt;endpointsnitch&gt;org.apache.cassandra.locator.EndPointSnitch&lt;/endpointsnitch&gt;&#13;\n&lt;/keyspace&gt;</code></pre>\n<p>To begin with the simplest things, the replicationFactor defines the number of nodes the data will be replicated. Then let’s talk about the ColumnFamily. First, you will notice that the schema for each ColumnFamily is not defined (whereas the actual 0.6 version of Cassandra does not allow dynamically adding or removing ColumnFamily, the 0.7 should provide this feature) and you only know that customers and operations will be stored.<br />\nData modeling<br />\nIf you look at the UML diagram representing the different concepts, you will notice that there is a “one-to-many” relationship between an account and the operations on this account. An easy way to model this in Cassandra is by using the <a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-13\">SuperColumn</a>. Thus the operation has the following structure: </p>\n<p><a href=\"https://blog.octo.com/wp-content/uploads/2010/06/column-oriented-model.png\"><img src=\"https://blog.octo.com/wp-content/uploads/2010/06/column-oriented-model.png\" alt=\"\" title=\"column-oriented model\" width=\"553\" height=\"271\" class=\"aligncenter size-full wp-image-11802\" srcset=\"https://blog.octo.com/wp-content/uploads/2010/06/column-oriented-model.png 553w, https://blog.octo.com/wp-content/uploads/2010/06/column-oriented-model-300x147.png 300w, https://blog.octo.com/wp-content/uploads/2010/06/column-oriented-model-160x78.png 160w\" /></a></p>\n<p>Thus:<br />\n–\tThe key is the account Id<br />\n–\tThe “Value” is a SuperColumn which stores all the operations for this account (the limitation of this model is the number of operations you could have…). Thus the operation is a list of columns (type, amount, date…) ordered by a <a href=\"http://wiki.apache.org/cassandra/FAQ\">time-based UUID</a> inside the SuperColumn. The CompareWith tells Cassandra how to sort the columns (remember the column are sorted, within a row, by their name. In our examples, I want my operations (whose name is a time-based UUID) to be chronologically sorted. That’s what I specify to Cassandra with the CompareWith attribute. The CompareSubcolumnsWith attribute will be responsible for sorting the Column included in the SuperColumn…<br />\nHere is what you get using the Cassandra-cli tools<br /><a href=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png\"><img src=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png\" alt=\"\" title=\"exit\" width=\"564\" height=\"319\" class=\"aligncenter size-full wp-image-11797\" srcset=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png 564w, https://blog.octo.com/wp-content/uploads/2010/06/exit-300x170.png 300w, https://blog.octo.com/wp-content/uploads/2010/06/exit-160x90.png 160w\" /></a></p>\n<div class=\"sharify-container\"><ul><li class=\"sharify-btn-twitter\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Tweet on Twitter\" href=\"https://twitter.com/intent/tweet?text=Let%26%238217%3Bs+play+with+Cassandra%26%238230%3B%28Part+2%2F3%29: https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-twitter\">&#13;\n\t\t\t\t\t\t\t\t\tTweet&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-facebook\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Facebook\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fblog.octo.com%2Fen%2Fnosql-lets-play-with-cassandra-part-23%2F\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-facebook\">&#13;\n\t\t\t\t\t\t\t\t\tShare&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-gplus\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Google+\" href=\"http://plus.google.com/share?url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-gplus\">&#13;\n\t\t\t\t\t\t\t\t\t+1&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-linkedin\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Linkedin\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/&amp;title=Let’s play with Cassandra…(Part 2/3)\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-linkedin\">&#13;\n\t\t\t\t\t\t\t\t\tLinkedIn&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li></ul></div><div class=\"yarpp-related\">\n<h3>Related posts:</h3><ol><li><a href=\"https://blog.octo.com/en/nosqleu-and-nosql-what%e2%80%99s-the-deal/\" rel=\"bookmark\" title=\"no:sql(eu) and NoSQL: What’s the deal?\">no:sql(eu) and NoSQL: What’s the deal? </a></li>\n<li><a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-13/\" rel=\"bookmark\" title=\"Let’s play with Cassandra… (Part 1/3)\">Let’s play with Cassandra… (Part 1/3) </a></li>\n<li><a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/\" rel=\"bookmark\" title=\"Let’s play with Cassandra… (Part 3/3)\">Let’s play with Cassandra… (Part 3/3) </a></li>\n</ol></div>"}}]}},"pageContext":{"alternative_id":11851}}