{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Access Cassandra Data with Entity Framework 6","alternative_id":11055,"content":"<p>\n     Entity Framework is an object-relational mapping framework that can be used to work with data as objects. While you can run the ADO.NET Entity Data Model wizard in Visual Studio to handle generating the Entity Model, this approach, the model-first approach, can put you at a disadvantage if there are changes in your data source or if you want more control over how the entities operate. In this article you will complete the code-first approach to accessing Cassandra data using the CData ADO.NET Provider.\n\t</p><ol><li>Open Visual Studio and create a new Windows Form Application. This article uses a C# project with .NET 4.5.</li>\n    <li>Run the command 'Install-Package EntityFramework' in the Package Manger Console in Visual Studio to install the latest release of Entity Framework.</li>\n    <li><p>Modify the App.config file in the project to add a reference to the Cassandra Entity Framework 6 assembly and the connection string.</p>\n\t   &#13;\n<p>&#13;\nSet the Server, Port, and Database connection properties to connect to Cassandra. Additionally, to use internal authentication set the User and Password connection properties.&#13;\n</p> \n<code lang=\"xml\" xml:lang=\"xml\">\n&lt;configuration&gt;\n   ... \n  &lt;connectionStrings&gt;\n    &lt;add name=\"CassandraContext\" connectionString=\"Offline=False;Database=MyCassandraDB;Port=7000;Server=127.0.0.1;\" providerName=\"System.Data.CData.Cassandra\" /&gt;\n  &lt;/connectionStrings&gt;\n  &lt;entityFramework&gt;\n    &lt;providers&gt;\n       ... \n      &lt;provider invariantName=\"System.Data.CData.Cassandra\" type=\"System.Data.CData.Cassandra.CassandraProviderServices, System.Data.CData.Cassandra.Entities.EF6\" /&gt;\n    &lt;/providers&gt;\n  &lt;entityFramework&gt;\n&lt;/configuration&gt;\n&lt;/code&gt; \n</code>\n    </li>\n    <li>Add a reference to System.Data.CData.Cassandra.Entities.EF6.dll, located in the lib -&gt; 4.0 subfolder in the installation directory.\n    </li><li>\nBuild the project at this point to ensure everything is working correctly.  Once that's done, you can start coding using Entity Framework.\n  </li>\n\t\t<li>Add a new .cs file to the project and add a class to it. This will be your database context, and it will extend the DbContext class. In the example, this class is named CassandraContext. The following code example overrides the OnModelCreating method to make the following changes:\n<ul><li>Remove PluralizingTableNameConvention from the ModelBuilder Conventions.\n</li><li>Remove requests to the MigrationHistory table.\n</li></ul><code lang=\"csharp\" xml:lang=\"csharp\">\nusing System.Data.Entity;\nusing System.Data.Entity.Infrastructure;\nusing System.Data.Entity.ModelConfiguration.Conventions;\nclass CassandraContext : DbContext {\n  public CassandraContext() { }\n  protected override void OnModelCreating(DbModelBuilder modelBuilder)\n  {\n    // To remove the requests to the Migration History table\n    Database.SetInitializer&lt;CassandraContext&gt;(null);  \n    // To remove the plural names    \n    modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();\n  }  \n}\n</code>\n  </li>\n    <li>Create another .cs file and name it after the Cassandra entity you are retrieving, for example, Customer. In this file, define both the Entity and the Entity Configuration, which will resemble the example below:\n    <code lang=\"csharp\" xml:lang=\"csharp\">\nusing System.Data.Entity.ModelConfiguration;\nusing System.ComponentModel.DataAnnotations.Schema;\n[System.ComponentModel.DataAnnotations.Schema.Table(\"Customer\")]\npublic class Customer {\n  [System.ComponentModel.DataAnnotations.Key] \n  public System.String Id { get; set; }\n  public System.String City { get; set; }\n}\n    \n</code>\n  </li>\n    <li>Now that you have created an entity, add the entity to your context class:\n  \n<code lang=\"csharp\" xml:lang=\"csharp\">\npublic DbSet&lt;Customer&gt; Customer { set; get; }\n</code>\n  </li>\n    <li>With the context and entity finished, you are now ready to query the data in a separate class. For example: \n\t\n<code lang=\"csharp\" xml:lang=\"csharp\">\nCassandraContext context = new CassandraContext();\ncontext.Configuration.UseDatabaseNullSemantics = true;\nvar query = from line in context.Customer select line;\n</code>\n    </li>\n  </ol>"}}]}},"pageContext":{"alternative_id":11055}}