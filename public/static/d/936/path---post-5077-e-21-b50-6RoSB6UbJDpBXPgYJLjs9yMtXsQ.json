{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"tbarbugli/cassandra_snapshotter","alternative_id":5077,"content":"<p>A tool to backup cassandra nodes using snapshots and incremental backups on S3</p><p>The scope of this project is to make it easier to backup a cluster to S3 and to combine\nsnapshots and incremental backups.</p><p><a href=\"https://travis-ci.org/tbarbugli/cassandra_snapshotter\"><img src=\"https://camo.githubusercontent.com/2371daaafb8623168cc5a53f10146329d022023c/68747470733a2f2f7472617669732d63692e6f72672f746261726275676c692f63617373616e6472615f736e617073686f747465722e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/tbarbugli/cassandra_snapshotter.svg?branch=master\" /></a></p><h2><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#how-to-install\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-how-to-install\"></a>How to install</h2><p>Both the machine that runs the backup and the Cassandra nodes need to install the tool</p><div class=\"highlight highlight-source-shell\"><pre>pip install cassandra_snapshotter</pre></div><p>Nodes in the cluster also need to have lzop installed so that backups on S3 can be archived compressed</p><p>You can install it on Debian/Ubuntu via apt-get</p><div class=\"highlight highlight-source-shell\"><pre>apt-get install lzop</pre></div><p>Make sure you have JNA enabled and (if you want to use them) that incremental backups are enabled in your cassandra config file.</p><h2><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#usage\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-usage\"></a>Usage</h2><p>You can see the list of parameters available via <code>cassandra-snapshotter --help</code></p><h4><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#create-a-new-backup-for-mycluster\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-create-a-new-backup-for-mycluster\"></a>Create a new backup for <em>mycluster</em>:</h4><div class=\"highlight highlight-source-shell\"><pre>cassandra-snapshotter --s3-bucket-name=Z \\\n                      --s3-bucket-region=eu-west-1 \\\n                      --s3-base-path=mycluster \\\n                      --aws-access-key-id=X \\ # optional\n                      --aws-secret-access-key=Y \\ # optional\n                      --s3-ssenc \\ # optional\n                      backup \\\n                      --hosts=h1,h2,h3,h4 \\\n                      --user=cassandra # optional</pre></div><ul><li>connects via ssh to hosts h1,h2,h3,h4 using user cassandra</li>\n<li>backups up (using snapshots or incremental backups) on the S3 bucket Z</li>\n<li>backups are stored in /mycluster/</li>\n<li>if your bucket is not on us-east-1 region (the default region), you should really specify the region in the command line; otherwise weird 'connection reset by peer' errors can appear as you'll be transferring files amongst regions</li>\n<li><code>--aws-access-key-id</code> and <code>--aws-secret-access-key</code> are optional. Omitting them will use the instance IAM profile. See <a href=\"http://docs.pythonboto.org/en/latest/boto_config_tut.html\">http://docs.pythonboto.org/en/latest/boto_config_tut.html</a> for more details.</li>\n<li>if you wish to use AWS S3 server-side encryption specify <code>--s3-ssenc</code></li>\n</ul><h4><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#list-existing-backups-for-mycluster\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-list-existing-backups-for-mycluster\"></a>List existing backups for <em>mycluster</em>:</h4><div class=\"highlight highlight-source-shell\"><pre>cassandra-snapshotter --s3-bucket-name=Z \\\n                      --s3-bucket-region=eu-west-1 \\\n                      --s3-base-path=mycluster \\\n                      --aws-access-key-id=X \\ # optional\n                      --aws-secret-access-key=Y \\ # optional\n                      --s3-ssenc \\ # optional\n                      list</pre></div><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#how-it-works\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-how-it-works\"></a>How it works</h3><p>cassandra_snapshotter connects to your cassandra nodes using ssh and uses nodetool to generate\nthe backups for keyspaces / table you want to backup.</p><p>Backups are stored on S3 using this convention:</p><h4><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#snapshots\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-snapshots\"></a>Snapshots:</h4><pre>/s3_base_path/snapshot_creation_time/hostname/cassandra/data/path/keyspace/table/snapshots\n</pre><h4><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#incremental-backups\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-incremental-backups\"></a>Incremental Backups:</h4><pre>/s3_base_path/snapshot_creation_time/hostname/cassandra/data/path/keyspace/table/backups\n</pre><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#s3_base_path\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-s3_base_path\"></a>S3_BASE_PATH</h3><p>This parameter is used to make it possible to use for a single S3 bucket to store multiple cassandra backups.</p><p>This parameter can be also seen as a backup profile identifier; the snapshotter uses the s3_base_path to search for existing snapshots on your S3 bucket.</p><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#incremental-backups-1\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-incremental-backups-1\"></a>INCREMENTAL BACKUPS</h3><p>Incremental backups are created only when a snapshot already exists, incremental backups are stored in their parent snapshot path.</p><p>incremental_backups are only used when all this conditions are met:</p><ul><li>there is a snapshot in the same base_path</li>\n<li>the existing snapshot was created for the same list of nodes</li>\n<li>the existing snapshot was created with the same keyspace / table parameters</li>\n</ul><p>if one of this condition is not met a new snapshot will be created.</p><p>In order to take advantage of incremental backups you need to configure your cassandra cluster for it (see cassandra.yaml config file).</p><p><strong>NOTE:</strong> Incremental backups are not enabled by default on cassandra.</p><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#create-new-snapshot\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-create-new-snapshot\"></a>CREATE NEW SNAPSHOT</h3><p>If you dont want to use incremental backups, or if for some reason you want to create a new snapshot for your data, run the cassandra_snapshotter with the <code>--new-snapshot</code> argument.</p><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#data-retention--cleanup-old-snapshots\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-data-retention--cleanup-old-snapshots\"></a>Data retention / Cleanup old snapshots</h3><p>Its not in the scope of this project to clean up your S3 buckets.\nS3 Lifecycle rules allows you do drop or archive to Glacier object stored based on their age.</p><h3><a href=\"https://github.com/tbarbugli/cassandra_snapshotter#restore-your-data\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-restore-your-data\"></a>Restore your data</h3><p>cassandra_snaphotter tries to store data and metadata in a way to make restores less painful; There is not (yet) a feature complete restore command; every patch / pull request about this is more than welcome (hint hint).</p><p>In case you need, cassandra_snapshotter stores the ring token description every time a backup is done ( you can find it the ring file in the snapshot base path )</p><p>The way data is stored on S3 should makes it really easy to use the Node Restart Method (<a href=\"https://docs.datastax.com/en/cassandra/2.1/cassandra/operations/ops_backup_snapshot_restore_t.html#task_ds_vf4_z1r_gk\">https://docs.datastax.com/en/cassandra/2.1/cassandra/operations/ops_backup_snapshot_restore_t.html#task_ds_vf4_z1r_gk</a>)</p>"}}]}},"pageContext":{"alternative_id":5077}}