{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"waldmark/spark-cassandra-batch-s3-examples","alternative_id":5076,"content":"<h3>\n      <svg aria-hidden=\"true\" class=\"octicon octicon-book\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/>\n      README.md\n    </h3>\n      <article class=\"markdown-body entry-content\" itemprop=\"text\"><h2><a href=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples#spark-casaandra-example\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-spark-casaandra-example\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Spark Casaandra Example</h2>\n<p><a href=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples/blob/master/images/spark-logo-trademark.png\" target=\"_blank\"><img src=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples/raw/master/images/spark-logo-trademark.png\" alt=\"Alt text\"/></a></p>\n<p>\nJava example of Apache Spark consuming and processing 911 calls stored in Cassandra. \n</p>\n<p><i>Requirements:</i></p>\n<ul><li>Java 8 installed</li>\n<li>Cassandra</li>\n<li>Scality S3 server</li>\n</ul><p>This demo was developed using docker images running locally for Cassandra and Scality S3. Other instances of Cassandra and S3 should work as well.</p>\n<p>The example can be run from an IDE (like IntelliJ), or from a runnable jar. See instructions below on building the runnable <i>uber-jar</i>.</p>\n<h3><a href=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples#stand-alone-processing-from-a-file\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-stand-alone-processing-from-a-file\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Stand alone processing from a file</h3>\n<p>The class com.objectpartners.spark.rt911.standalone.MainApplication has a runnable main. It loads data into Cassandra;\nonce loaded, it uses the Spark Cassandra Connector to read and then analyze data from Cassandra, and then store the results into S3.</p>\n<h2><a href=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples#building-a-runnable-jar\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-building-a-runnable-jar\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Building a runnable jar</h2>\n<p>A standalone jar can be created using Gradle. In the project root directory, in a terminal run gradle:</p>\n<ol><li>gradle clean build</li>\n<li>gradle shadowjar</li>\n</ol><p>The uber-jar will be built and placed in the {$project.dir}/build/libs directory.</p>\n<h2><a href=\"https://github.com/waldmark/spark-cassandra-batch-s3-examples#resources\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-resources\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Resources</h2>\n<p>In src/main/resources are two gzips containing 911 call data in csv format:</p>\n<ol><li>Seattle_Real_Time_Fire_911_Calls_10_Test.csv.gz contains 10 911 calls (10 lines) and can be used for simple testing.\nNote that the application assumes the first line contains header data, so only 9 calls are actually processed.</li>\n<li>Seattle_Real_Time_Fire_911_Calls_Chrono.csv.gz\nA chronologically ordered set of (lots of) calls.</li>\n</ol></article>"}}]}},"pageContext":{"alternative_id":5076}}