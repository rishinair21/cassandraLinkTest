{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"intuit/wasabi","alternative_id":12190,"content":"<p><strong>Support:</strong> <a href=\"https://gitter.im/intuit/wasabi?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/13115004d1de8c8debb6d9636ed770ceb3cd44ea/68747470733a2f2f6261646765732e6769747465722e696d2f696e747569742f7761736162692e737667\" alt=\"Join the chat at https://gitter.im/intuit/wasabi\" data-canonical-src=\"https://badges.gitter.im/intuit/wasabi.svg\" /></a> <br /><strong>Documentation:</strong> <a href=\"https://intuit.github.io/wasabi/v1/guide/index.html\" rel=\"nofollow\">User Guide</a>, <a href=\"https://intuit.github.io/wasabi/v1/javadocs/latest/\" rel=\"nofollow\">JavaDocs</a>\n<br /><strong>A/B Testing Overview:</strong> <a href=\"https://www.youtube.com/watch?v=_HtvJwBPUqk&amp;feature=youtu.be\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7d0321a6112c23f202f9852f1db1d4587db17d85/687474703a2f2f696d672e736869656c64732e696f2f62616467652f766964656f2d412532464225323054657374696e672532304f766572766965772d7265642e737667\" alt=\"A/B Testing Overview\" data-canonical-src=\"http://img.shields.io/badge/video-A%2FB%20Testing%20Overview-red.svg\" /></a> <a href=\"https://medium.com/blueprint-by-intuit/open-sourcing-wasabi-the-a-b-testing-platform-by-intuit-a8d5abc958d\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/31955dbe1b8474ed4a4ab59e38a26e05b0ac0622/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626c6f672d4d6565742532305761736162692d627269676874677265656e2e737667\" alt=\"Blog Meet Wasabi\" data-canonical-src=\"https://img.shields.io/badge/blog-Meet%20Wasabi-brightgreen.svg\" /></a> <a href=\"https://medium.com/blueprint-by-intuit/the-architecture-behind-wasabi-an-open-source-a-b-testing-platform-b52430d3fd80\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/f1f2ee9250c9a93017c1c82c4dc7fa0013d61401/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626c6f672d417263686974656374757265253230426568696e642532305761736162692d6f72616e67652e737667\" alt=\"Blog Architecture Behind Wasabi\" data-canonical-src=\"https://img.shields.io/badge/blog-Architecture%20Behind%20Wasabi-orange.svg\" /></a> <br /><strong>Continuous Integration:</strong> <a href=\"https://travis-ci.org/intuit/wasabi\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/c02cc709a1c51c0107101c3d1a96e28b7f10dd1c/68747470733a2f2f6170692e7472617669732d63692e6f72672f696e747569742f7761736162692e7376673f6272616e63683d646576656c6f70\" alt=\"Build Status\" data-canonical-src=\"https://api.travis-ci.org/intuit/wasabi.svg?branch=develop\" /></a>\n<a href=\"https://coveralls.io/github/intuit/wasabi?branch=develop\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/21a3f18f699685c7ac4db1f687158a9bcfe1470f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f696e747569742f7761736162692f62616467652e737667\" alt=\"Coverage Status\" data-canonical-src=\"https://coveralls.io/repos/github/intuit/wasabi/badge.svg\" /></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/com.intuit.wasabi/wasabi\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/6da12cf851ba62b357771ca25a0e3561339330c5/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f636f6d2e696e747569742e7761736162692f7761736162692f62616467652e737667\" alt=\"Maven Central\" data-canonical-src=\"https://maven-badges.herokuapp.com/maven-central/com.intuit.wasabi/wasabi/badge.svg\" /></a> <br /><strong>License:</strong> <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/cb7ed4d28c8df19eb3b269fe0cad477d17621500/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322d627269676874677265656e2e737667\" alt=\"Apache 2\" data-canonical-src=\"http://img.shields.io/badge/license-Apache%202-brightgreen.svg\" /></a> <br /></p><h2>Project</h2><p>Wasabi A/B Testing Service is a real-time, enterprise-grade, 100% API driven project. Users are empowered to own their own data, and run experiments across web, mobile, and desktop. It’s fast, easy to use, it’s chock full of features, and instrumentation is minimal.</p><p>Learn more about how Wasabi can empower your team to move from hunches to actionable, data-driven user insights with our simple, flexible, and scalable experimentation platform.</p><h3>Features</h3><ul><li><strong>Own your own data</strong> - Wasabi runs on your servers, in the cloud or on-premise, where you have complete control over your data.</li>\n<li><strong>Proven</strong> - Wasabi is battle-tested in production at Intuit, Inc., a financial technology company. Wasabi is the experimentation platform for TurboTax, QuickBooks, Mint.com, and other Intuit offerings.</li>\n<li><strong>High Performance</strong> - Consistent server-side response times for user assignments within 30ms.</li>\n<li><strong>100% API-Driven</strong> - The Wasabi REST API is compatible with any language and environment.</li>\n<li><strong>Platform Agnostic</strong> - Uniform, consistent testing across Web, mobile, desktop. Also supports front-end, back-end integrations.</li>\n<li><strong>Real-time user assignments</strong> - Assign users into experiments in real time, to preserve traffic for other parallel A/B tests.</li>\n<li><strong>Cloud and on-premise</strong> - Designed to live in the cloud or in your own data center.</li>\n<li><strong>Analytics</strong> - Core experiment analytics and metrics visualization out of the box, as well as the ability to send data to your existing analytics infrastructure.</li>\n<li><strong>Pluggable</strong> - Well-defined interfaces for plugging in your own access control, sending data to data pipelines, and providing fully custom bucket allocations.</li>\n<li><strong>Experiment Management UI</strong> - Setup and manage experiments via a modern Web interface. Management via REST API is also possible.</li>\n<li><strong>Dockerized</strong> - Spin up a Wasabi Docker instance in 5 minutes and be in production with the platform, instrumentation, and experiments within a day.</li>\n</ul><h3>User Interface</h3><ul><li><strong>Create an experiment and its buckets:</strong>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/2e4a1b3b58c231a9b2ee753131d28b8982f751c5/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4372656174654275636b65742e706e67\"><img src=\"https://camo.githubusercontent.com/2e4a1b3b58c231a9b2ee753131d28b8982f751c5/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4372656174654275636b65742e706e67\" alt=\"\" data-canonical-src=\"https://intuit.github.io/wasabi/v1/guide/images/readme/CreateBucket.png\" /></a></li>\n<li><strong>Filter which customers are considered for your experiment:</strong>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/86693dfd1865dc803f40a0a61786a1f573903968/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f5365676d656e746174696f6e52756c65732e706e67\"><img src=\"https://camo.githubusercontent.com/86693dfd1865dc803f40a0a61786a1f573903968/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f5365676d656e746174696f6e52756c65732e706e67\" alt=\"\" data-canonical-src=\"https://intuit.github.io/wasabi/v1/guide/images/readme/SegmentationRules.png\" /></a></li>\n<li><strong>Follow your currently running experiments:</strong>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f0372ebe376391b70abe344675870d8830e32621/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4578706572696d656e744c6973742e706e67\"><img src=\"https://camo.githubusercontent.com/f0372ebe376391b70abe344675870d8830e32621/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4578706572696d656e744c6973742e706e67\" alt=\"\" data-canonical-src=\"https://intuit.github.io/wasabi/v1/guide/images/readme/ExperimentList.png\" /></a></li>\n<li><strong>Track your experiment results in real-time:</strong>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/26570e8c8a76366b25111ee208473c5f85b057ee/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4578706572696d656e7444657461696c732e706e67\"><img src=\"https://camo.githubusercontent.com/26570e8c8a76366b25111ee208473c5f85b057ee/68747470733a2f2f696e747569742e6769746875622e696f2f7761736162692f76312f67756964652f696d616765732f726561646d652f4578706572696d656e7444657461696c732e706e67\" alt=\"\" data-canonical-src=\"https://intuit.github.io/wasabi/v1/guide/images/readme/ExperimentDetails.png\" /></a></li>\n</ul><h2>Get Started</h2><p>The following steps will help you install the needed tools, then build and run a complete Wasabi stack.</p><h4>Bootstrap Your Environment</h4><h5>Mac OS</h5><div class=\"highlight highlight-source-shell\"><pre>% /usr/bin/ruby \\\n  -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n% brew install git\n% git clone https://github.com/intuit/wasabi.git\n% cd wasabi\n% ./bin/wasabi.sh bootstrap</pre></div><p>Installed tools include: <a href=\"http://brew.sh\" rel=\"nofollow\">homebrew 0.9</a>, <a href=\"https://git-scm.com\" rel=\"nofollow\">git 2</a>,\n<a href=\"https://maven.apache.org\" rel=\"nofollow\">maven 3</a>, <a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\" rel=\"nofollow\">java 1.8</a>,\n<a href=\"https://docker.com\" rel=\"nofollow\">docker 1.12</a>, <a href=\"https://nodejs.org/en\" rel=\"nofollow\">node 6</a> and <a href=\"https://www.python.org\" rel=\"nofollow\">python 2.7</a>.</p><h5>Ubuntu</h5><p>Bootstrapping on Ubuntu requires sudo privileges to install all the required dependencies. You will be prompted to enter your password. Currently only 16.04 (x64) is supported.</p><div class=\"highlight highlight-source-shell\"><pre>% sudo apt-get install git\n% git clone https://github.com/intuit/wasabi.git\n% cd wasabi\n% ./bin/wasabi.sh bootstrap\n% sudo reboot</pre></div><p>NOTE: A reboot is required after running the bootstrap command on Ubuntu.</p><p>For all other processes (build, start etc.) the commands are same for Ubuntu and Mac OS.</p><p>Installed tools include: <a href=\"https://git-scm.com\" rel=\"nofollow\">git 2</a>,\n<a href=\"https://maven.apache.org\" rel=\"nofollow\">maven 3</a>, <a href=\"http://openjdk.java.net/projects/jdk8/\" rel=\"nofollow\">OpenJdk 8</a>,\n<a href=\"https://docker.com\" rel=\"nofollow\">docker 1.12</a>, <a href=\"https://nodejs.org/en\" rel=\"nofollow\">node 6</a> and <a href=\"https://www.python.org\" rel=\"nofollow\">python 2.7</a></p><p>Similar tooling will work for Windows. Contribute a patch :)</p><h4>Start Wasabi</h4><p>Now that we have the necessary tools in place, let's move on to build and start Wasabi, followed by issuing a <em>ping</em>\ncommand to verify the build:</p><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh build start\n...\nwasabi is operational:\n  ui: % open http://localhost:8080     note: sign in as admin/admin\n  ping: % curl -i http://localhost:8080/api/v1/ping\n  debug: attach to localhost:8180\n% curl -i http://localhost:8080/api/v1/ping\nHTTP/1.1 200 OK\nDate: Wed, 25 May 2016 00:25:47 GMT\n...\nX-Application-Id: wasabi-api-20151215171929-SNAPSHOT-development\nContent-Type: application/json\nTransfer-Encoding: chunked\nServer: Jetty(9.3.z-SNAPSHOT)\n{\n  \"componentHealths\":[\n    {\n      \"componentName\":\"Experiments Cassandra\",\n      \"healthy\":true\n    },\n    {\n      \"componentName\":\"MySql\",\"healthy\":true\n    }\n  ],\n  \"wasabiVersion\":\"wasabi-api-20151215171929-SNAPSHOT-development\"\n}</pre></div><p>Congratulations! You are the proud owner of a newly minted Wasabi instance. :)</p><h3>Running Wasabi with remote storage</h3><h5>Set Mysql and Cassandra credentials</h5><ul><li>Modify /pom.xml to set the values that apply to your environment</li>\n</ul><h5>Download Cassandra migration tool <a href=\"https://oss.sonatype.org/content/repositories/public/com/builtamont/cassandra-migration/0.9/cassandra-migration-0.9-jar-with-dependencies.jar\" rel=\"nofollow\">https://oss.sonatype.org/content/repositories/public/com/builtamont/cassandra-migration/0.9/cassandra-migration-0.9-jar-with-dependencies.jar</a></h5><h5>Set up your environment variables</h5><ul><li>Set location of the migration tool</li>\n</ul><div class=\"highlight highlight-source-shell\"><pre>export CASSANDRA_MIGRATION=/location/of/cassandra-migration-0.9-jar-with-dependencies.jar</pre></div><ul><li>Set location of migration scripts within your project</li>\n</ul><div class=\"highlight highlight-source-shell\"><pre>export MIGRATION_SCRIPT=/location/of/modules/repository-datastax/src/main/resources/com/intuit/wasabi/repository/impl/cassandra/migration</pre></div><h5>Set up Cassandra tables</h5><div class=\"highlight highlight-source-shell\"><pre>CQLSH_VERSION=&lt;version&gt; CQLSH_USERNAME=&lt;username&gt; CQLSH_PASSWORD=&lt;pwd&gt; CQLSH_HOST=&lt;host&gt; bin/docker/migration.sh</pre></div><h5>Run Wasabi with env variables for remote storage hosts</h5><div class=\"highlight highlight-source-shell\"><pre>MYSQL_HOST=&lt;mysql_host&gt; NODE_HOST=&lt;cassandra_host&gt; ./bin/wasabi.sh start:wasabi</pre></div><h5>Run Wasabi outside of docker with WASABI_CONFIGURATION for remote storage hosts</h5><div class=\"highlight highlight-source-shell\"><pre>WASABI_CONFIGURATION=\"\n  -Ddatabase.url.host=$MYSQL_HOST\\\n  -Ddatabase.url.port=$MYSQL_PORT\\\n  -Ddatabase.url.dbname=$MYSQL_DATABASE\\\n  -Ddatabase.user=$MYSQL_USER\\\n  -Ddatabase.password=$MYSQL_PASSWORD\\\n  -Ddatabase.pool.connections.min=$MYSQL_MIN_CONNECTIONS\\\n  -Ddatabase.pool.connections.max=$MYSQL_MAX_CONNECTIONS\\\n  -Dusername=$CASSANDRA_USER\\\n  -Dpassword=$CASSANDRA_PASSWORD\\\n  -DnodeHosts=$CASSANDRA_HOST\\\n  -DtokenAwareLoadBalancingLocalDC=$CASSANDRA_DATACENTER\\\n  -Dapplication.http.port=$PORT\" bash usr/local/wasabi-main-*/bin/run</pre></div><h4>Troubleshooting</h4><ul><li>\n<p>While starting Wasabi, if you see an error when the docker containers are starting up, you could do the following:</p>\n<ul><li>Look at the current docker containers that have been successfully started.</li>\n</ul></li>\n</ul><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh status\nCONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                                                                     NAMES\n8c12458057ef        wasabi-main              \"entrypoint.sh wasabi\"   25 minutes ago      Up 25 minutes       0.0.0.0:8080-&gt;8080/tcp, 0.0.0.0:8090-&gt;8090/tcp, 0.0.0.0:8180-&gt;8180/tcp    wasabi-main\n979ecc885239        mysql:5.6                \"docker-entrypoint.sh\"   26 minutes ago      Up 26 minutes       0.0.0.0:3306-&gt;3306/tcp                                                    wasabi-mysql\n2d33a96abdcb        cassandra:2.1            \"/docker-entrypoint.s\"   27 minutes ago      Up 27 minutes       7000-7001/tcp, 0.0.0.0:9042-&gt;9042/tcp, 7199/tcp, 0.0.0.0:9160-&gt;9160/tcp   wasabi-cassandra</pre></div><ul><li>The above shell output shows a successful start of 3 docker containers needed by Wasabi: wasabi-main (the Wasabi server),\nwasabi-mysql, and wasabi-cassandra. If any of these are not running, try starting them individually. For example, if the\nMySQL container is running, but Cassandra and Wasabi containers failed to start (perhaps due to a network timeout docker\ncould not download the Cassandra image), do the following:</li>\n</ul><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh start:cassandra\n% ./bin/wasabi.sh start:wasabi</pre></div><h4>Call Wasabi</h4><p>These are the 3 common REST endpoints that you will use to instrument your client application with Wasabi.</p><p>Let's assume that you've created and started an experiment, 'BuyButton,' in the 'Demo_App' application with the following buckets:</p><ul><li>'BucketA': green button (control bucket)</li>\n<li>'BucketB': orange button bucket</li>\n</ul><p>You can assign a user with a unique ID (e.g. 'userID1') to the experiment by making this HTTP request:</p><blockquote>\n<p>Assign a user to experiment and bucket:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% curl -H \"Content-Type: application/json\" \\\n    http://localhost:8080/api/v1/assignments/applications/Demo_App/experiments/BuyButton/users/userID1\n{  \n   \"cache\":true,\n   \"payload\":\"green\",\n   \"assignment\":\"BucketA\",\n   \"context\":\"PROD\",\n   \"status\":\"NEW_ASSIGNMENT\"\n}</pre></div><p>Now the 'userID1' user is assigned into the 'BucketA' bucket. Let's further record an impression, meaning the user has seen a given experience:</p><blockquote>\n<p>Record an impression:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% curl -H \"Content-Type: application/json\" \\\n    -d \"{\\\"events\\\":[{\\\"name\\\":\\\"IMPRESSION\\\"}]}\" \\\n    http://localhost:8080/api/v1/events/applications/Demo_App/experiments/BuyButton/users/userID1</pre></div><p>If the 'userID1' user performs an action such as clicking the Buy button, you'd record that action with the following request:</p><blockquote>\n<p>Record an action:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% curl -H \"Content-Type: application/json\" \\\n    -d \"{\\\"events\\\":[{\\\"name\\\":\\\"BuyClicked\\\"}]}\" \\\n    http://localhost:8080/api/v1/events/applications/Demo_App/experiments/BuyButton/users/userID1</pre></div><h4>Explore Various Resources</h4><p>The following developer resources are available:</p><blockquote>\n<p>API: Swagger API playground</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh resource:api</pre></div><blockquote>\n<p>Javadoc</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh resource:doc</pre></div><blockquote>\n<p>Wasabi UI</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh resource:ui</pre></div><blockquote>\n<p>Cassandra: cqlsh shell</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh resource:cassandra</pre></div><blockquote>\n<p>MySQL: mysql shell</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh resource:mysql</pre></div><blockquote>\n<p>Java Debugger: Remote attach configuration</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8180</pre></div><h4>Stop Wasabi</h4><p>Alas, all good things must come to an end. Let's clean things up a bit stop the newly created Wasabi stack:</p><p>At this point in time, we now have all the requisite tools installed, and subsequent invocations of Wasabi will\nstart up much more quickly.</p><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh stop</pre></div><h4>Get Familiar with wasabi.sh</h4><p>Further, there are a number of additional wasabi.sh options available you should become familiar with:</p><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh --help\n  usage: wasabi.sh [options] [commands]\n  options:\n    -e | --endpoint [ host:port ]          : api endpoint; default: localhost:8080\n    -v | --verify [ true | false ]         : verify installation configuration; default: false\n    -s | --sleep [ sleep-time ]            : sleep/wait time in seconds; default: 30\n    -h | --help                            : help message\n  commands:\n    bootstrap                              : install dependencies\n    build                                  : build project\n    start[:cassandra,mysql,wasabi]         : start all, cassandra, mysql, wasabi\n    test                                   : test wasabi\n    stop[:wasabi,cassandra,mysql]          : stop all, wasabi, cassandra, mysql\n    resource[:ui,api,doc,cassandra,mysql]  : open resource api, javadoc, cassandra, mysql\n    status                                 : display resource status\n    remove[:wasabi,cassandra,mysql]        : remove all, wasabi, cassandra, mysql\n    package                                : build deployable packages\n    release[:start,finish]                 : promote release</pre></div><h2>Develop</h2><h4>Build and Run Wasabi Server</h4><div class=\"highlight highlight-source-shell\"><pre>% mvn package\n% ./bin/wasabi.sh start:cassandra,mysql\n% (cd modules/main/target; \\\n    WASABI_CONFIGURATION=\"-DnodeHosts=localhost -Ddatabase.url.host=localhost\" ./wasabi-main-*-SNAPSHOT-development/bin/run) &amp;\n% curl -i http://localhost:8080/api/v1/ping\n...</pre></div><p>The runtime logs can be accessed executing the following command in a another shell:</p><blockquote>\n<p>Viewing runtime logs:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% tail -f modules/main/target/wasabi-main-*-SNAPSHOT-development/logs/wasabi-main-*-SNAPSHOT-development.log</pre></div><h4>Build and Run Wasabi UI</h4><div class=\"highlight highlight-source-shell\"><pre>% cd modules/ui\n% grunt build</pre></div><div class=\"highlight highlight-source-shell\"><pre>% grunt serve</pre></div><h4>Stop Wasabi</h4><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh stop</pre></div><p>Now while that was fun, in all likelihood you will be using an IDE to work on Wasabi. In doing so, you need only\nadd the configuration information above to the JVM commandline prior to startup:</p><blockquote>\n<p>Wasabi runtime configuration:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>-DnodeHosts=localhost -Ddatabase.url.host=localhost</pre></div><h4>Run Integration Tests</h4><p>Code changes can readily be verified by running the growing collection of included integration tests:</p><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh start test stop</pre></div><h5>Troubleshooting</h5><p>Integration tests might fail intermittently due to a time drift issue in docker containers on Mac OSX.</p><p>When the Mac sleeps and wakes back up, there is a lag created between the clock in the Mac vs the\nrunning docker containers. This is a known issue in Docker for Mac.</p><p>This can be fixed by running the following command:</p><div class=\"highlight highlight-source-shell\"><pre>% docker run --rm --privileged alpine hwclock -s</pre></div><p>The above command will need to be run every time when there is a time drift.</p><p>To automatically run this command and update the time each time the Mac wakes up, you could install\nthe following agent:</p><div class=\"highlight highlight-source-shell\"><pre>% curl https://raw.githubusercontent.com/arunvelsriram/docker-time-sync-agent/master/install.sh | bash</pre></div><p>You can read more about this at: <a href=\"https://blog.shameerc.com/2017/03/quick-tip-fixing-time-drift-issue-on-docker-for-mac\" rel=\"nofollow\">quick-tip-fixing-time-drift-issue-on-docker-for-mac</a></p><h2>Package and Deploy at Scale</h2><p>Wasabi can readily be packaged as installable <em>rpm</em> or <em>deb</em> distributions and deployed at scale as follows:</p><blockquote>\n<p>Package by running integration tests 1st:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh start package</pre></div><blockquote>\n<p>Package without integration tests, if needed:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% ./bin/wasabi.sh -t false package</pre></div><blockquote>\n<p>Find generated package files:</p>\n</blockquote><div class=\"highlight highlight-source-shell\"><pre>% find . -type f \\( -name \"*.rpm\" -or -name \"*.deb\" \\)</pre></div><p>Note: <a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\" rel=\"nofollow\">Java 8</a> is a runtime dependency</p><h2>Integrate</h2><p>Wasabi is readily embeddable via the following <em>maven</em> dependency GAV family:</p><div class=\"highlight highlight-text-xml\"><pre>&lt;dependency&gt;\n    &lt;groupId&gt;com.intuit.wasabi&lt;/groupId&gt;\n    &lt;artifactId&gt;wasabi&lt;/artifactId&gt;\n    &lt;version&gt;1.0.20160627213750&lt;build_timestamp&gt;&lt;/version&gt;\n&lt;/dependency&gt;</pre></div><h2>Contribute</h2><p>We greatly encourage contributions! You can add new features, report and fix existing bugs, write docs and\ntutorials, or any of the above. Feel free to open issues and/or send pull requests.</p><p>The <code>master</code> branch of this repository contains the latest stable release of Wasabi, while snapshots are published to the <code>develop</code> branch. In general, pull requests should be submitted against <code>develop</code> by forking this repo into your account, developing and testing your changes, and creating pull requests to request merges. See the <a href=\"https://guides.github.com/activities/contributing-to-open-source/\">Contributing to a Project</a>\narticle for more details about how to contribute in general and find more specific information on how to write code for Wasabi in our <a href=\"https://intuit.github.io/wasabi/v1/guide/index.html#developing-wasabi\" rel=\"nofollow\">user guide</a>.</p><p>Extension projects such as browser plugins, client integration libraries, and apps can be contributed under the <code>contrib</code> directory.</p><p>Steps to contribute:</p><ol><li>Fork this repository into your account on Github</li>\n<li>Clone <em>your forked repository</em> (not our original one) to your hard drive with <code>git clone https://github.com/YOURUSERNAME/wasabi.git</code></li>\n<li>Design and develop your changes</li>\n<li>Add/update unit tests</li>\n<li>Add/update integration tests</li>\n<li>Add/update documentation on <code>gh-pages</code> branch</li>\n<li>Create a pull request for review to request merge</li>\n<li>Obtain 2 approval <em>squirrels</em> before your changes can be merged</li>\n</ol><p>Thank you for your contribution!</p>"}}]}},"pageContext":{"alternative_id":12190}}