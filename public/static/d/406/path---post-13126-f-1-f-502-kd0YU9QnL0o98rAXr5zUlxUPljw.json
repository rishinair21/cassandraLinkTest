{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"How Not To Use Cassandra Like An RDBMS (and what will happen if you do) - OpenCredo","alternative_id":13126,"content":"<img src=\"https://15rf562os5r61q4tvf2630fw-wpengine.netdna-ssl.com/wp-content/uploads/2018/08/OpenCredo-20180802-0390_web-895x597.jpg\" alt=\"How Not To Use Cassandra Like An RDBMS (and what will happen if you do)\" class=\"-mt-120 mb-30 md:mb-60\" /><p>Not only is Cassandra <em>not</em> an RDBMS, it’s not even <em>like</em> an RDBMS in some of the ways you might expect. In this post I’ll review a few example scenarios where a beginner might be unpleasantly surprised by the differences, and suggest some remedies.</p><h2>Example 1: querying by non-key columns</h2><p>Here’s some CQL to create a “shopping trolley contents” table in Cassandra:</p><p>Suppose we wanted to find all of the shopping trolleys that contains a particular item, identified by <code>itemId</code>. Here’s a query that would make perfect sense in SQL, that Cassandra will not allow you to perform:</p><p>If you try to run this query through CQLSH, you will get the response “No secondary indexes on the restricted columns support the provided operators”. What this means is that the columns in this table are indexed only by the columns listed in the <code>PRIMARY KEY</code> clause. Without defining a “secondary index” there is no way to search for values using a <code>WHERE</code> clause restricting on any other column.</p><p><em>OK</em>, you may think, <em>so I have to define secondary indexes explicitly</em>. A quick <a href=\"https://docs.datastax.com/en/cql/3.1/cql/cql_reference/create_index_r.html\">Google search</a> later, and you have:</p><p>You can now run the query you wanted. Unfortunately, while restrictions on primary indexes allow queries to be routed efficiently to the specific nodes in the Cassandra cluster that hold the data you’re looking for, the secondary index must be consulted on every node of the Cassandra cluster in order to find matching records. Use of secondary indexes can thus severely hamper the scalability of Cassandra, especially if the indexed column has a high cardinality (i.e. can contain many distinct values).</p><p>In this scenario, it is probably better to have a second table that explicitly provides for <code>trolleyId</code> lookups by <code>itemId</code>:</p><p>However, you now have to consider the overhead of maintaining this table, and the fact that Cassandra does not support transactional updates to multiple tables with ACID guarantees.</p><p>Suppose that a line item is removed from a trolley, and a user queries for orders containing line items with that <code>itemId</code> before the <code>lineItemsByItemId</code> table has been updated. The returned <code>trolleyId</code>/<code>lineItemId</code> pair will then refer to a record in the <code>shoppingTrolleyContents</code> table that no longer exists. This is precisely the scenario that the referential integrity mechanisms (foreign key constraints) provided by an RDBMS are designed to avoid – but Cassandra provides <em>no</em> mechanisms for ensuring referential integrity between tables.</p><h2>Example 2: joining tables</h2><p>Suppose we search in <code>lineItemsByItemId</code> for all of the line items with <code>itemId='SKU0001'</code>:</p><p>Because Cassandra doesn’t support <code>JOIN</code>s, if we get back 1,000 <code>trolleyId</code>/<code>lineItemId</code> pairs, we must then retrieve each line item’s details separately from the <code>shoppingTrolleyContents</code> table in order to obtain the associated quantity and price data. This is tremendously inefficient. It may be better to denormalise further, copying all of the relevant columns from <code>shoppingTrolleyContents</code> into <code>lineItemsByItemId</code>:</p><p>This kind of duplication of data is anathema in relational database design. In the Cassandra world, it’s commonplace and necessary in order to support efficient querying.</p><h2>Example 3: reverse lookups</h2><p>A shopping trolley usually has an owner, and perhaps some other metadata associated with it. Here’s the CQL for a table which associates user ids with shopping trolley ids:</p><p>We can use this to find out who owns a given trolley by id:</p><p>However, the reverse lookup, to find trolleys by owner, is not supported, even though ownerId is a primary index key:</p><p>The error we get back if we try to run the above is:</p><p>Once again, if Cassandra doesn’t immediately allow you to do something, it’s worth making sure you understand why before just going ahead and adding <code>ALLOW FILTERING</code> to the query to “make it work”.</p><p>The problem here is that the <code>trolleyId</code> is used as the <em>partition</em> key, which determines which node in the Cassandra cluster the data is stored on, while the <code>ownerId</code> is used as the <em>cluster</em> key, which indexes data within the partition. In order to perform the query as written, Cassandra would have to send it to all of the nodes within the cluster, obtain the records for all <code>trolleyId</code> values within each partition, and then filter them by <code>ownerId</code>. This has the potential to be very inefficient.</p><p>A better solution, in this case, would be to create a second table to support the reverse lookup:</p><p>Once again, the previous warnings about data consistency apply: both tables must be written to whenever a shopping trolley is created, and there are no ACID transactions to ensure that this pair of updates is carried out atomically.</p><h2>Conclusions</h2><p>Cassandra can usefully be thought of as something like a distributed version of the storage engine that an RDBMS might use, but without the data management capabilities that an RDBMS brings in addition to the ability to persist and retrieve data.</p><p>It is certainly possible to build an RDBMS-like system on top of Cassandra, but doing so will progressively negate all of the performance and scalability advantages that Cassandra’s distributed data model provides. If you find yourself doing this – implementing in-memory joins, distributed locks or other mechanisms to get RDBMS-like behaviour out of a Cassandra-backed system – then it may be time to stop and reconsider. Will Cassandra still deliver the performance you want, if you use it in this way?</p><p>An RDBMS provides a consistent, principled approach to data management that works for all cases, at the cost of limited scalability: you pay the “relational tax” in exchange for a highly flexible yet predictable data model, By contrast, Cassandra’s is a “pay for what you use” model, in which data integrity is an application-level concern, and specific query patterns must be explicitly supported through decisions made about the physical layout of data across the cluster. It “unsolves” some of the problems the RDBMS was invented to solve, in order to address different problems more effectively.</p><p>For many purposes, a dual or polyglot approach is worth considering. Use Cassandra as the primary data store for capturing information as it arrives into the system; but then build “query-optimised views” of subsets of that data in other databases specialised to the kinds of access users require. Use an indexing engine such as SOLR to provide full-text search across records, or a graph database such as Neo4j to store metadata in a way that supports “traversal-heavy” queries that join together many different kinds of entity. Use an RDBMS when you need the full power and flexibility of SQL to express ad hoc queries that explore the data in multiple dimensions.</p><p>Alternatively, a stream-processing approach may be the way to go when you need to generate complex reports which consume large amounts of captured data. Stream the records you have captured in Cassandra into an Apache Spark cluster, and use Spark SQL to execute complex queries using filters, joins and aggregations. This approach, which I call “write first, reason later”, is especially suited to event-driven systems where capture of event information can be decoupled from decision-making about how to react to events in the aggregate.</p><h4>This is the third post in our blog series “Cassandra – What You May Learn The Hard Way.” Get the full overview <a href=\"https://opencredo.com/?p=28779\" target=\"_blank\" rel=\"noopener\">here</a>.</h4><h4>The associated webinar, “Cassandra – The Good, the Bad, and the Ugly” was broadcast on October 6th, 2016. View the recording <strong><a href=\"https://opencredo.com/?p=28889\"> here</a>.</strong></h4><h4><a class=\"button\" href=\"#text_icl-6\">Sign up to receive updates via email</a></h4>"}}]}},"pageContext":{"alternative_id":13126}}