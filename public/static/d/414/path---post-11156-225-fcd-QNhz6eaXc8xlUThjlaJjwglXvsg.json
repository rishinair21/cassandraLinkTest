{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Secret HotSpot option improving GC pauses on large heaps","alternative_id":11156,"content":"<div><p>\n<a href=\"http://www.blogger.com/2011/07/openjdk-patch-cutting-down-gc-pause.html\">my\nPatch mentioned in this post</a> (<i><a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7068625\">RFE-7068625</a>)</i>\nfor JVM garbage collector was accepted into HotSpot JDK code base and available starting from 7u40 version of HotSport JVM from Oracle.</p></div>\n<div class=\"MsoNormal\">\n<br />\nThis was a reason for me to redo some of my GC benchmarking experiments. I have already mentioned ParGCCardsPerStrideChunk\nin article related to patch. This time, I decided study effect of this option more closely.</div>\n<div class=\"MsoNormal\">\n<br />\nParallel copy collector (ParNew), responsible for young\ncollection in CMS, use ParGCCardsPerStrideChunk\n value to control granularity of tasks\ndistributed between worker threads. Old space is broken into strides of equal\nsize and each worker responsible for processing (find dirty pages, find old to\nyoung references, copy young objects etc) a subset of strides. Time to process each\nstride may vary greatly, so workers may steal work from each other. For that\nreason number of strides should be greater than number of workers. </div>\n<div class=\"MsoNormal\">\n<br />\nBy default ParGCCardsPerStrideChunk\n=256 (card is 512 bytes, so it would be 128KiB of heap space per stride) which means that 28GiB heap\nwould be broken into 224 thousands of strides. Provided that number of parallel\nGC threads is usually 4 orders of magnitude less, this is probably too many.</div>\n<h4>\nSynthetic benchmark</h4>\n<div class=\"MsoNormal\">\nFirst, I have run GC benchmark from <a href=\"http://www.blogger.com/2011/07/openjdk-patch-cutting-down-gc-pause.html\">previous\narticle</a> using 2k, 4k and 8K for this option. HotSpot JVM 7u3 was used in\nexperiment. </div>\n<div class=\"MsoNormal\">\n<div class=\"separator\">\n<a href=\"http://1.bp.blogspot.com/-JqGI0UUFw_8/T3NivPutmSI/AAAAAAAAKTs/X5H4eqqOdOs/s1600/blog-25.png\"><img border=\"0\" height=\"242\" src=\"http://1.bp.blogspot.com/-JqGI0UUFw_8/T3NivPutmSI/AAAAAAAAKTs/X5H4eqqOdOs/s400/blog-25.png\" width=\"400\" alt=\"image\" /></a></div>\n<br /></div>\n<div class=\"MsoNormal\">\nIt seems that default value (256 cards per strides) is too\nsmall even for moderate size heaps. I decided to continue my experiments with\nstride size 4k as it shows most consistent improvement across whole range of\nheap sizes.</div>\n<div class=\"MsoNormal\">\n<br />\nBenchmark above is synthetic and very simple. Next step is\nto choose more realistic use case. I usual, my choice is to use <a href=\"http://www.oracle.com/technetwork/middleware/coherence/overview/index.html\">Oracle\nCoherence</a> storage node as my guinea pig.</div>\n<h4>\nBenchmarking Coherence storage node</h4>\n<div class=\"MsoNormal\">\nIn this experiment I’m filling cache node with objects (object\n70% of old space filled with live objects), then put it under mixed read/write\nload and measuring young GC pauses of JVM. Experiment was conducted with two\ndifferent heap sizes (28 GiB and 14 GiB), young space for both cases was\nlimited by 128MiB, compressed pointers were enabled.</div>\n<h5>\nCoherence node with 28GiB of heap</h5>\n<table border=\"1\" cellpadding=\"0\" class=\"MsoNormalTable\" style=\"border-spacing: 0px;\"><tbody><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n<b>JVM</b></div>\n</td>\n  <td valign=\"top\" style=\"width: 90px;\"><div class=\"MsoNormal\">\n<b>Avg. pause</b></div>\n</td>\n  <td valign=\"top\" style=\"width: 108px;\"><div class=\"MsoNormal\">\n<b>Improvement</b></div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n7u3</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.0697</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0</div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n7u3, stride=4k</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.045</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n35.4%</div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n<a href=\"http://blog.ragozin.info/2011/07/openjdk-patch-cutting-down-gc-pause.html\">Patched OpenJDK 7</a></div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.0546</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n21.7%</div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n<a href=\"http://blog.ragozin.info/2011/07/openjdk-patch-cutting-down-gc-pause.html\">Patched OpenJDK 7</a>,\n  stride=4k</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.0284</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n59.3%</div>\n</td>\n </tr></tbody></table><h5>\nCoherence node with 14GiB of heap</h5>\n<table border=\"1\" cellpadding=\"0\" class=\"MsoNormalTable\" style=\"border-spacing: 0px;\"><tbody><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n<b>JVM</b></div>\n</td>\n  <td valign=\"top\" style=\"width: 90px;\"><div class=\"MsoNormal\">\n<b>Avg. pause</b></div>\n</td>\n  <td valign=\"top\" style=\"width: 108px;\"><div class=\"MsoNormal\">\n<b>Improvement</b></div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n7u3</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.05</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0</div>\n</td>\n </tr><tr><td valign=\"top\" style=\"width: 193px;\"><div class=\"MsoNormal\">\n7u3, stride=4k</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 90px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n0.0322</div>\n</td>\n  <td valign=\"bottom\" style=\"width: 108px;\"><div class=\"MsoNormal\" style=\"text-align: right;\">\n35.6%</div>\n</td>\n </tr></tbody></table><div class=\"MsoNormal\">\nThis test is close enough to real live Coherence work\nprofile and such improvement of GC pause time has practical importance. I have\nalso included JVM built from OpenJDK trunk with enabled <i><a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7068625\">RFE-7068625</a>\n</i>patch for 28 GiB test, as expected effect of patch is cumulative with\nstride size tuning.</div>\n<div class=\"MsoNormal\">\n<h4>\nStock JVMs from Oracle are supported</h4>\nGood news is that you do not have to wait for next version\nof JVM, ParGCCardsPerStrideChunk\noption is available in all Java 7 HotSpot JVMs and most recent Java 6 JVMs. But\nthis option is classified as diagnostic so you should enable diagnostic options\nto use it.</div>\n<div>\n<div class=\"MsoNormal\">\n-XX:+UnlockDiagnosticVMOptions </div>\n<div class=\"MsoNormal\">\n-XX:ParGCCardsPerStrideChunk=4096</div>\n</div>\n<div>\n<br /></div>\n<div></div>"}}]}},"pageContext":{"alternative_id":11156}}