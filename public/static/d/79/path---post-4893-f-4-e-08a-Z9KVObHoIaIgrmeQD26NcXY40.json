{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Cassandra & Zeppelin Notebook on Docker","alternative_id":4893,"content":"<p>This is a repository for a couple of docker-compose scripts, one of which that creates two Docker containers - one with a Zeppelin instance and the other one with a Cassandra node, the other one starting 4 containers - one with Zeppelin and 3 with a Cassandra three node cluster</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#configuration-and-installation\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-configuration-and-installation\"></a>Configuration and Installation</h2><p>Make sure to have a valid Docker and docker-compose Installation, running on a 64-bit system (either directly on a mac or Linux machine, or on a VirtualBox - or similar - VM running a 64-bit guest; this means that you'll end up running Docker inside a VM, this is fine for testing and learning purposes).</p><p>To install/configure Docker and/or Docker Compose follow the steps described at <a href=\"https://docs.docker.com/compose/install/\" rel=\"nofollow\">https://docs.docker.com/compose/install/</a> and <a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/\" rel=\"nofollow\">https://docs.docker.com/engine/installation/linux/ubuntu/</a> (this is for Ubuntu based Linux systems)</p><p>As a last step, clone this repository (you might need to do first <code>apt-get install git</code>)</p><pre>git clone https://github.com/academyofdata/cassandra-zeppelin\n</pre><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#starting-a-single-node-cassandra--zeppelin-instance\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-starting-a-single-node-cassandra--zeppelin-instance\"></a>Starting a single node Cassandra + Zeppelin instance</h2><p>Once the docker &amp; docker-compose prerequisites are met and the repository is cloned (example below assumes it is cloned in a folder called cassandra-zeppelin), do the following</p><pre>cd cassandra-zeppelin\ndocker-compose build\ndocker-compose up -d\n</pre><p>Assuming that you haven't encountered problems during build or run phase, you can now test that the containers are running by issuing the following command</p><pre>docker ps\n</pre><p>which should have an output similar with the one below</p><pre>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                                                                      NAMES\n110e8f4b16b3        zeppelin_zeppelin   \"bin/zeppelin.sh\"        4 days ago          Up 3 days           0.0.0.0:4040-&gt;4040/tcp, 0.0.0.0:8080-8081-&gt;8080-8081/tcp                                                   zeppelin_zeppelin_1\nbbb70c263987        cassandra:3.9       \"/docker-entrypoint.s\"   4 days ago          Up 3 days           0.0.0.0:7000-7001-&gt;7000-7001/tcp, 0.0.0.0:7199-&gt;7199/tcp, 0.0.0.0:9042-&gt;9042/tcp, 0.0.0.0:9160-&gt;9160/tcp   zeppelin_cassandra_1\n</pre><p>(pay attention in special to the STATUS column - it should say Up and not Exited)\nOnce the containers are running you can go to <a href=\"http://virtualmachineip:8080\" rel=\"nofollow\">http://virtualmachineip:8080</a> (replace with your own VirtualBox or local machine IP) and you should see the Zeppelin interface</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#starting-a-zeppelin-instance-connected-to-a-cassandra-cluster-with-3-nodes\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-starting-a-zeppelin-instance-connected-to-a-cassandra-cluster-with-3-nodes\"></a>Starting a Zeppelin instance connected to a Cassandra cluster (with 3 nodes)</h2><p><em><strong>PLEASE NOTE</strong></em>\nIf you've previously started other containers with Zeppelin (for instance the Zeppelin + a single Cassandra node as outlined above), make sure to stop them before starting the instance connected to the cluster. You can do that with</p><pre>docker-compose stop\n</pre><p>Otherwise there will be port conflicts when attempting to start the new cluster and the new Zeppelin instance.</p><p>Start with this more complex configuration by issuing the command below (in the same folder where you've cloned this git repository)</p><pre>docker-compose -f docker-cluster.yml up -d\n</pre><p>After starting check that the containers are running (<code>docker ps -a</code>), wait for a few seconds (20-30 should be enough), log into one of the cassandra nodes (<code>docker exec -ti zeppelin_node01_1 bash</code>) and check the cluster status (run this in the container)</p><pre>nodetool status\n</pre><p>If the cluster started correctly you should see back a few lines, three of them starting with UN, like this</p><pre>Datacenter: datacenter1\n=======================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack\nUN  172.17.0.3  110.13 KiB  256          67.6%             5460abe0-cf14-4d87-bf11-04f4ccd3f14c  rack1\nUN  172.17.0.2  108.46 KiB  256          62.0%             17d1e7cd-2ff6-4397-8495-a42c12a3807f  rack1\nUN  172.17.0.4  103.09 KiB  256          70.4%             70d2d32c-d7cd-4662-9e98-906167b0e4b7  rack1\n</pre><p>This means that all the nodes are up (U) and operating normally (N)</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#bulk-loading-data-in-cassandra\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-bulk-loading-data-in-cassandra\"></a>Bulk-Loading data in Cassandra</h2><p><em><strong>PLEASE NOTE</strong></em>\nIf you already have a 'test' keyspace it's better to drop it before executing the steps below.</p><p>To load all the exercise data into a newly created \"test\" keyspace and creating all the required tables, run the following command inside the Cassandra container (if you have an existing \"test\" keyspace, drop it)</p><pre>apt-get update &amp;&amp; apt-get install -y wget &amp;&amp; wget -qO- https://raw.githubusercontent.com/academyofdata/cassandra-zeppelin/master/script.sh | bash\n</pre><p>(to log into the container run 'docker exec -ti containers_cassandra_1 bash' from your container host, after you check the exact name of your container with 'docker ps -a')</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#connecting-zeppelin-to-cassandra\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-connecting-zeppelin-to-cassandra\"></a>Connecting Zeppelin to Cassandra</h2><p>To be able to run queries from Zeppelin against a cassandra cluster (or a single node) we need to instruct Zeppelin's interpreter for Cassandra to connect to the right host. Since when using docker-compose we've specified that the cassandra container (or, when using a cluster, one of the containers) is available as the host 'cassandra', we just need adjust a single  configuration value. For this, click in the right top corner of Zeppelin the \"Anonymous\" button to open the menu with a few options, one of which is \"Interpreter\"</p><p><a href=\"https://github.com/academyofdata/cassandra-zeppelin/blob/master/assets/1.png\" target=\"_blank\"><img src=\"https://github.com/academyofdata/cassandra-zeppelin/raw/master/assets/1.png\" alt=\"image\" /></a></p><p>Once on that page scroll to the Cassandra section and edit the value for <strong>cassandra.hosts</strong> to read <strong>cassandra</strong> as shown below</p><p><a href=\"https://github.com/academyofdata/cassandra-zeppelin/blob/master/assets/2.png\" target=\"_blank\"><img src=\"https://github.com/academyofdata/cassandra-zeppelin/raw/master/assets/2.png\" alt=\"image\" /></a></p><p><em><strong>NOTE</strong></em>\nWe could configure Zeppelin to connect to any of the hosts when running in the cluster configuration. For this we would first need to ammend the docker-compose configuration to also link the other nodes into zeppelin (in \"links\" section) and then we could set the cassandra.hosts to the hostnames separated by comma (e.g. \"cassandra,cassandra2,cassandra3\")</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#starting-containers-without-docker-compose\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-starting-containers-without-docker-compose\"></a>Starting containers without docker-compose</h2><p>Assuming that you already have a running Cassandra container, in order to connect a new zeppelin instance to it run the following</p><pre>docker run -d -p 8080:8080 -p 8081:8081 -p 4040:4040 -e MASTER=\"local[*]\" -e ZEPPELIN_PORT=\"8080\" -e ZEPPELIN_JAVA_OPTS=\"-Dspark.driver.memory=1g -Dspark.executor.memory=2g\" -e SPARK_SUBMIT_OPTS=\"--conf spark.driver.host=localhost --conf spark.driver.port=8081\" --link &lt;id_or_name_of_cassandra_container&gt;:cassandra --name zeppelin dylanmei/zeppelin\n</pre><p>after the container starts run</p><pre>docker exec -ti `docker ps --format '{{.Names}}' | grep zeppelin` bash -c \"/usr/zeppelin/bin/install-interpreter.sh --name cassandra\"\n</pre><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#starting-a-zeppelin-only-instance\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-starting-a-zeppelin-only-instance\"></a>Starting a Zeppelin only instance</h2><p>Edit the docker-compose.yml file to read as below</p><pre>zeppelin:\n  image:  dylanmei/zeppelin\n  environment:\n    ZEPPELIN_PORT: 8080\n    ZEPPELIN_JAVA_OPTS: &gt;-\n      -Dspark.driver.memory=1g\n      -Dspark.executor.memory=2g\n    SPARK_SUBMIT_OPTIONS: &gt;-\n      --conf spark.driver.host=localhost\n      --conf spark.driver.port=8081\n      \n    MASTER: local[*]\n  ports:\n    - 8080:8080\n    - 8081:8081\n    - 4040:4040\n  volumes:\n    - ./znotebooks:/usr/zeppelin/notebook\n</pre><p>and issue the same docker-compose up -d command</p><h2><a href=\"https://github.com/academyofdata/cassandra-zeppelin#get_num_processes\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-get_num_processes\"></a>get_num_processes</h2><p>If you get a <em><strong>get_num_processes() takes no keyword arguments error</strong></em>, get out of cqlsh (but stay in the container shell, not on the host system) and run</p><p>rm /usr/lib/pymodules/python2.7/cqlshlib/copyutil.so</p>"}}]}},"pageContext":{"alternative_id":4893}}