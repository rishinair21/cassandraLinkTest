{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Stratio/stratio-deep Â· GitHub","alternative_id":4891,"content":"<h3>\n      <svg aria-hidden=\"true\" class=\"octicon octicon-book\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/>\n      README.md\n    </h3>\n      <article class=\"markdown-body entry-content\" itemprop=\"text\"><p>*Disclaimer: As of 01/06/2015 this project has been deprecated. Thank you for your understanding and continued help throughout the project's life.</p>\n<p>Deep is a thin integration layer between Apache Spark and several NoSQL datastores.\nWe actually support Apache Cassandra, MongoDB, Elastic Search, Aerospike, HDFS, S3 and any database accessible through JDBC, but in the near future we will add support for sever other datastores.</p>\n<ul><li>JIRA: <a href=\"https://deep-spark.atlassian.net\">https://deep-spark.atlassian.net</a></li>\n</ul>\n<p>In order to compile the deep-jdbc module is necessary to add the Oracle ojdbc driver into your local repository. You can download it from the URL: <a href=\"http://www.oracle.com/technetwork/database/features/jdbc/default-2280470.html\">http://www.oracle.com/technetwork/database/features/jdbc/default-2280470.html</a>. When you are on the web you must click in \"Accept License Agreement\" and later downlad ojdbc7.jar library. You need a free oracle account to download the official driver.</p>\n<p>To install the ojdbc driver in your local repository you must execute the command below:</p>\n<blockquote>\n<p>mvn install:install-file -Dfile= -DgroupId=com.oracle -DartifactId=ojdbc7  -Dversion=12.1.0.2 -Dpackaging=jar</p>\n</blockquote>\n<p>After that you can compile Deep executing the following steps:</p>\n<blockquote>\n<p>cd deep-parent</p>\n</blockquote>\n<blockquote>\n<p>mvn clean install</p>\n</blockquote>\n<p>If you want to create a Deep distribution you must execute the following steps:</p>\n<blockquote>\n<p>cd deep-scripts</p>\n</blockquote>\n<blockquote>\n<p>make-distribution-deep.sh</p>\n</blockquote>\n<p>During the creation you'll see the following question:</p>\n<blockquote>\n<p>What tag want to use for Aerospike native repository?</p>\n</blockquote>\n<p>You must type 0.7.0 and press enter.</p>\n<p>The integration is <em>not</em> based on the Cassandra's Hadoop interface.</p>\n<p>Deep comes with an user friendly API that lets developers create Spark RDDs mapped to Cassandra column families.\nWe provide two different interfaces:</p>\n<ul><li>\n<p>The first one will let developers map Cassandra tables to plain old java objects (POJOs), just like if you were using any other ORM. We call this API the 'entity objects' API.\nThis abstraction is quite handy, it will let you work on RDD (under the hood Deep will transparently map Cassandra's columns to entity properties).\nYour domain entities must be correctly annotated using Deep annotations (take a look at deep-core example entities in package com.stratio.deep.core.entity).</p>\n</li>\n<li>\n<p>The second one is a more generic 'cell' API, that will let developerss work on RDD&lt;com.stratio.deep.entity.Cells&gt; where a 'Cells' object is a collection of com.stratio.deep.entity.Cell objects.\nColumn metadata is automatically fetched from the data store. This interface is a little bit more cumbersome to work with (see the example below),\nbut has the advantage that it doesn't require the definition of additional entity classes.\nExample: you have a table called 'users' and you decide to use the 'Cells' interface. Once you get an instance 'c' of the Cells object,\nto get the value of column 'address' you can issue a c.getCellByName(\"address\").getCellValue().\nPlease, refer to the Deep API documentation to know more about the Cells and Cell objects.</p>\n</li>\n</ul><p>We encourage you to read the more comprehensive documentation hosted on the <a href=\"http://www.openstratio.org/\">Openstratio website</a>.</p>\n<p>Deep comes with an example sub project called 'deep-examples' containing a set of working examples, both in Java and Scala.\nPlease, refer to the deep-example project README for further information on how to setup a working environment.</p>\n<p>Spark-MongoDB connector is based on Hadoop-mongoDB.</p>\n<p>Support for MongoDB has been added in version 0.3.0.</p>\n<p>We provide two different interfaces:</p>\n<ul><li>\n<p>ORM API, you just have to annotate your POJOs with Deep annotations and magic will begin, you will be able to connect MongoDB with Spark using your own model entities.</p>\n</li>\n<li>\n<p>Generic cell API, you do not need to specify the collection's schema or add anything to your POJOs, each document will be transform to an object \"Cells\".</p>\n</li>\n</ul><p>We added a few working examples for MongoDB in deep-examples subproject, take a look at:</p>\n<p>Entities:</p>\n<ul><li>com.stratio.deep.examples.java.ReadingEntityFromMongoDB</li>\n<li>com.stratio.deep.examples.java.WritingEntityToMongoDB</li>\n<li>com.stratio.deep.examples.java.GroupingEntityWithMongoDB</li>\n</ul><p>Cells:</p>\n<ul><li>com.stratio.deep.examples.java.ReadingCellFromMongoDB</li>\n<li>com.stratio.deep.examples.java.WritingCellToMongoDB</li>\n<li>com.stratio.deep.examples.java.GroupingCellWithMongoDB</li>\n</ul><p>You can check out our first steps guide here:</p>\n<p><a href=\"https://github.com/Stratio/deep-spark/blob/master/doc/src/site/sphinx/t20-first-steps-deep-mongodb.rst\">First steps with Deep-MongoDB</a></p>\n<p>We are working on further improvements!</p>\n<p>Support for ElasticSearch has been added in version 0.5.0.</p>\n<p>Support for Aerospike has been added in version 0.6.0.</p>\n<p>Examples:</p>\n<p>Entities:</p>\n<ul><li>com.stratio.deep.examples.java.ReadingEntityFromAerospike</li>\n<li>com.stratio.deep.examples.java.WritingEntityToAerospike</li>\n<li>com.stratio.deep.examples.java.GroupingEntityWithAerospike</li>\n</ul><p>Cells:</p>\n<ul><li>com.stratio.deep.examples.java.ReadingCellFromAerospike</li>\n<li>com.stratio.deep.examples.java.WritingCellToAerospike</li>\n<li>com.stratio.deep.examples.java.GroupingCellWithAerospike</li>\n</ul>\n<p>Support for JDBC has been added in version 0.7.0.</p>\n<p>Examples:</p>\n<p>Entities:</p>\n<ul><li>package com.stratio.deep.examples.java.ReadingEntityWithJdbc</li>\n<li>package com.stratio.deep.examples.java.WritingEntityWithJdbc</li>\n</ul><p>Cells:</p>\n<ul><li>package com.stratio.deep.examples.java.ReadingCellWithJdbc</li>\n<li>package com.stratio.deep.examples.java.WritingCellWithJdbc</li>\n</ul>\n<ul><li>Cassandra, we tested versions from 1.2.8 up to 2.0.11 (for Spark &lt;=&gt; Cassandra integration).</li>\n<li>MongoDB, we tested the integration with MongoDB versions 2.2, 2.4 y 2.6 using Standalone, Replica Set and Sharded Cluster (for Spark &lt;=&gt; MongoDB integration).</li>\n<li>ElasticSearch, 1.3.0+</li>\n<li>Aerospike, 3.3.0+</li>\n<li>Spark 1.1.1</li>\n<li>Apache Maven &gt;= 3.0.4</li>\n<li>Java 1.7</li>\n<li>Scala 2.10.3</li>\n</ul>\n<ul><li>\n<p>Clone the project</p>\n</li>\n<li>\n<p>To configure a development environment in Eclipse: import as Maven project. In IntelliJ: open the project by selecting the deep-parent POM file</p>\n</li>\n<li>\n<p>Install the project in you local maven repository. Enter deep-parent subproject and perform: mvn clean install (add -DskipTests to skip tests)</p>\n</li>\n<li>\n<p>Put Deep to work on a working cassandra + spark cluster. You have several options:</p>\n<ul><li>\n<p>Download a pre-configured Stratio platform VM <a href=\"http://www.stratio.com/\">Stratio's BigData platform (SDS)</a>.\nThis VM will work on both Virtualbox and VMWare, and comes with a fully configured distribution that also includes Stratio Deep. We also distribute the VM with several preloaded datasets in Cassandra. This distribution will include Stratio's customized Cassandra distribution containing our powerful <a href=\"https://github.com/Stratio/stratio-cassandra\">open-source lucene-based secondary indexes</a>, see Stratio documentation for further information.\nOnce your VM is up and running you can test Deep using the shell. Enter /opt/sds and run bin/stratio-deep-shell.</p>\n</li>\n<li>\n<p>Install a new cluster using the Stratio installer. Please refer to Stratio's website to download the installer and its documentation.</p>\n</li>\n<li>\n<p>You already have a working Cassandra server on your development machine: you need a spark+deep bundle, we suggest to create one by running:</p>\n<p><code>cd deep-scripts</code></p>\n<p><code>./make-distribution-deep.sh</code></p>\n</li>\n</ul><p>this will build a Spark distribution package with StratioDeep and Cassandra's jars included (depending on your machine this script could take a while, since it will compile Spark from sources).\nThe package will be called <code>spark-deep-distribution-X.Y.Z.tgz</code>, untar it to a folder of your choice, enter that folder and issue a <code>./stratio-deep-shell</code>, this will start an interactive shell where you can test StratioDeep (you may have noticed this is will start a development cluster started with MASTER=\"local\").</p>\n<ul><li>\n<p>You already have a working installation os Cassandra and Spark on your development machine: this is the most difficult way to start testing Deep, but you know what you're doing you will have to</p>\n<ol><li>copy the Stratio Deep jars to Spark's 'jars' folder (<code>$SPARK_HOME/jars</code>).</li>\n<li>copy Cassandra's jars to Spark's 'jar' folder.</li>\n<li>copy Datastax Java Driver jar (v 2.0.x) to Spark's 'jar' folder.</li>\n<li>start spark shell and import the following:</li>\n</ol><p><code>import com.stratio.deep.commons.annotations._</code></p>\n<p><code>import com.stratio.deep.commons.config._</code></p>\n<p><code>import com.stratio.deep.commons.entity._</code></p>\n<p><code>import com.stratio.deep.core.context._</code></p>\n<p><code>import com.stratio.deep.cassandra.config._</code></p>\n<p><code>import com.stratio.deep.cassandra.extractor._</code></p>\n<p><code>import com.stratio.deep.mongodb.config._</code></p>\n<p><code>import com.stratio.deep.mongodb.extractor._</code></p>\n<p><code>import com.stratio.deep.es.config._</code></p>\n<p><code>import com.stratio.deep.es.extractor._</code></p>\n<p><code>import com.stratio.deep.aerospike.config._</code></p>\n<p><code>import com.stratio.deep.aerospike.extractor._</code></p>\n<p><code>import org.apache.spark.rdd._</code></p>\n<p><code>import org.apache.spark.SparkContext._</code></p>\n<p><code>import org.apache.spark.sql.api.java.JavaSQLContext</code></p>\n<p><code>import org.apache.spark.sql.api.java.JavaSchemaRDD</code></p>\n<p><code>import org.apache.spark.sql.api.java.Row</code></p>\n<p><code>import scala.collection.JavaConversions._</code></p>\n</li>\n</ul></li>\n</ul><p>Once you have a working development environment you can finally start testing Deep. This are the basic steps you will always have to perform in order to use Deep:</p>\n<ul><li><strong>Build an instance of a configuration object</strong>: this will let you tell Deep the Cassandra endpoint, the keyspace, the table you want to access and much more.\nIt will also let you specify which interface to use (the domain entity or the generic interface).\nWe have a factory that will help you create a configuration object using a fluent API. Creating a configuration object is an expensive operation.\nPlease take the time to read the java and scala examples provided in 'deep-examples' subproject and to read the comprehensive documentation at <a href=\"https://github.com/Stratio/deep-spark/blob/release/0.6/doc/t10-first-steps-deep-cassandra.md\">OpenStratio website</a>.</li>\n<li><strong>Create an RDD</strong>: using the DeepSparkContext helper methods and providing the configuration object you've just instantiated.</li>\n<li><strong>Perform some computation over this RDD(s)</strong>: this is up to you, we only help you fetching the data efficiently from Cassandra, you can use the powerful <a href=\"https://spark.apache.org/docs/1.1.1/api/java/index.html\">Spark API</a>.</li>\n<li><strong>(optional) write the computation results out to Cassandra</strong>: we provide a way to efficiently save the result of your computation to Cassandra.\nIn order to do that you must have another configuration object where you specify the output keyspace/column family. We can create the output column family for you if needed.\nPlease, refer to the comprehensive Stratio Deep documentation at <a href=\"https://github.com/Stratio/deep-spark/blob/release/0.6/doc/about.md\">Stratio website</a>.</li>\n</ul>\n<ul><li><strong>Build an instance of a configuration object</strong>: this will let you tell Stratio Deep the MongoDB endpoint, the MongoDB database and collection you want to access and much more.\nIt will also let you specify which interface to use (the domain entity).\nWe have a factory that will help you create a configuration object using a fluent API. Creating a configuration object is an expensive operation.\nPlease take the time to read the java and scala examples provided in 'deep-examples' subproject and to read the comprehensive Deep documentation at <a href=\"https://github.com/Stratio/deep-spark/blob/release/0.6/doc/t20-first-steps-deep-mongodb.md\">OpenStratio website</a>.</li>\n<li><strong>Create an RDD</strong>: using the DeepSparkContext helper methods and providing the configuration object you've just instantiated.</li>\n<li><strong>Perform some computation over this RDD(s)</strong>: this is up to you, we only help you fetching the data efficiently from MongoDB, you can use the powerful <a href=\"https://spark.apache.org/docs/1.1.1/api/java/index.html\">Spark API</a>.</li>\n<li><strong>(optional) write the computation results out to MongoDB</strong>: we provide a way to efficiently save the result of your computation to MongoDB.</li>\n</ul>\n<p>From version 0.4.x, Deep supports multiple datastores, in order to correctly implement this new feature Deep has undergone an huge refactor between versions 0.2.9 and 0.4.x. To port your code to the new version you should take into account a few changes we made.</p>\n<h2><a href=\"https://github.com/Stratio/deep-spark#new-project-structure\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-new-project-structure\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>New Project Structure</h2>\n<p>From version 0.4.x, Deep supports multiple datastores, in your project you should import only the maven dependency you will use: deep-cassandra, deep-mongodb, deep-elasticsearch or deep-aerospike.</p>\n<h2><a href=\"https://github.com/Stratio/deep-spark#changes-to-comstratiodeepentitycells\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-changes-to-comstratiodeepentitycells\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Changes to 'com.stratio.deep.entity.Cells'</h2>\n<ul><li>Until version 0.4.x the 'Cells' was implicitly associated to a record coming from a specific table. When performing a join in Spark, 'Cell' objects coming from different tables are mixed into an single 'Cells' object.\nDeep now keeps track of the original table a Cell object comes from, changing the internal structure of 'Cells', where each 'Cell' is associated to its 'table'.\n<ol><li>If you are a user of 'Cells' objects returned from Deep, nothing changes for you. The 'Cells' API keeps working as usual.</li>\n<li>If you manually create 'Cells' objects you can keep using the original API, in this case each Cell you add to your Cells object is automatically associated to a default table name.</li>\n<li>You can specify the default table name, or let Deep chose an internal default table name for you.</li>\n<li>We added a new constructor to 'Cells' accepting the default table name. This way the 'old' API will always manipulate 'Cell' objects associated to the specified default table.</li>\n<li>For each method manipulating the content of a 'Cells' object, we added a new method that also accepts the table name: if you call the method\t whose signature does <em>not</em> have the table name, the table action is performed over the Cell associated to the default table, otherwise the action is performed over the 'Cell'(s) associated to the specified table.</li>\n<li>size() y isEmpty() will compute their results taking into account all the 'Cell' objects contained.</li>\n<li>size(String tableName) and isEmpty(tableName) compute their result taking into account only the 'Cell' objects associated to the specified table.</li>\n<li>Obviously, when dealing with Cells objects, Deep always associates a Cell to the correct table name.</li>\n</ol></li>\n</ul><p>Examples:</p>\n<pre>Cells cells1 = new Cells(); // instantiate a Cells object whose default table name is generated internally.\nCells cells2 = new Cells(\"my_default_table\"); // creates a new Cells object whose default table name is specified by the user\ncells2.add(new Cell(...)); // adds to the 'cells2' object a new Cell object associated to the default table\ncells2.add(\"my_other_table\", new Cell(...)); // adds to the 'cells2' object a new Cell associated to \"my_other_table\"  \n</pre>\n<h2><a href=\"https://github.com/Stratio/deep-spark#changes-to-objects-hierarchy\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-changes-to-objects-hierarchy\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>Changes to objects hierarchy</h2>\n<ul><li>IDeepJobConfig interface has been splitted into ICassandraDeepJobConfig and IMongoDeepJobConfig sub-interfaces. Each sub-interface exposes only the configuration properties that make sense for each data base.\ncom.stratio.deep.config.DeepJobConfigFactory's factory methods now return the proper subinterface.</li>\n<li><strong>DeepSparkContext</strong> has been splitted into <strong>CassandraDeepSparkContext</strong> and <strong>MongoDeepSparkContext</strong>.</li>\n<li><strong>DeepJobConfigFactory</strong> has been renamed to <strong>ConfigFactory</strong> (to reduce verbosity).</li>\n</ul><h2><a href=\"https://github.com/Stratio/deep-spark#rdd-creation\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-rdd-creation\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"/></a>RDD creation</h2>\n<p>Methods used to create Cell and Entity RDD has been merged into one single method:</p>\n<ul><li><strong>DeepSparkContext</strong>: createRDD(...)</li>\n</ul></article>"}}]}},"pageContext":{"alternative_id":4891}}