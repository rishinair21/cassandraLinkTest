{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Cassandra Parameters for Dummies","alternative_id":11145,"content":"<p>This simple form allows you to try out different values for your <a href=\"http://cassandra.apache.org\">Apache Cassandra</a> cluster\nand see what the impact is for your application.</p><div><p><label for=\"N\">Cluster size</label>\n  </p>\n<p><label for=\"RF\">Replication Factor</label>\n  </p>\n<p><label for=\"W\">Write Level</label>\n  </p>\n<p><label for=\"R\">Read Level</label>\n  </p>\n<hr /><div class=\"calculated\">Your reads are<p>\"Consistent\" means that for this particular Read/Write level combo, all nodes will \"see\" the same data.  \"Eventually consistent\" means\n        that you might get old data from some nodes and new data for others until the data has been replicated across all devices.  The idea is that this way you can\n        increase read/write speeds and improve tolerance against dead nodes.</p></div>\n<div class=\"calculated\">You can survive the loss of  without impacting the application.<p>How many nodes can go down without application noticing? This is a lower bound - in large clusters, you could lose more nodes and if they happen to be handling different parts of the keyspace, then you wouldn't notice either.</p></div>\n<div class=\"calculated\">You can survive the loss of  without data loss.<p>How many nodes can go down without physically losing data? This is a lower bound - in large clusters, you could lose more nodes and if they happen to be handling different parts of the keyspace, then you wouldn't notice either.</p></div>\n<div class=\"calculated\">You are really reading from  every time.<p>The more nodes you read from, more network traffic ensues, and the bigger the latencies involved.  Cassandra read operation won't return until at least this many nodes have responded with some data value.</p></div>\n<div class=\"calculated\">You are really writing to  every time.<p>The more nodes you write to, more network traffic ensues, and the bigger the latencies involved. Cassandra write operation won't return until at least this many nodes have acknowledged receiving the data.</p></div>\n<div class=\"calculated\">Each node holds  of your data.<p>The bigger your cluster is, the more the data gets distributed across your nodes.  If you are using the RandomPartitioner, or are very\n   good at distributing your keys when you use OrderedPartitioner, this is how much data each of your nodes has to handle.  This is also how much\n   of your keyspace becomes inaccessible for each node that you lose beyond the safe limit, above.</p></div></div>"}}]}},"pageContext":{"alternative_id":11145}}