{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Pick‘n’Mix: Cassandra, Spark, Zeppelin, Elassandra, Kibana, & Kafka - Instaclustr","alternative_id":12143,"content":"<h2><b>Kafkaesque</b>:</h2><h3> \\ käf-kə-ˈesk \\</h3><p><em>Marked by a senseless, disorienting, menacing, nightmarishly complexity.</em></p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic.png\"><img class=\"alignnone size-full wp-image-8009\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic.png\" alt=\"Kafkaesque Cassandra, Spark, Zeppelin, Elassandra, Kibana, &amp; Kafka\" width=\"734\" height=\"524\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic.png 734w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic-300x214.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic-640x457.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic-67x48.png 67w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafkaesque-comic-151x108.png 151w\" /></a></p><p><a href=\"https://www.gutenberg.org/files/5200/5200-h/5200-h.htm\" target=\"_blank\" rel=\"noopener\">One morning when I woke from troubled dreams</a>, I decided to blog about something potentially Kafkaesque: Which Instaclustr managed open-source-as-a-service(s) can be used together (current and future)? Which combinations are actually possible? Which ones are realistically sensible? And which are nightmarishly Kafkaesque!?</p><p>In previous blogs, I’ve explored Instaclustr managed <a href=\"https://www.instaclustr.com/apache-cassandra/\">Apache Cassandra</a>, <a href=\"https://www.instaclustr.com/apache-spark/\">Spark</a> (batch), Spark Streaming, Spark MLLib, and Zeppelin.</p><p>Instaclustr also supports managed <a href=\"https://www.instaclustr.com/solutions/managed-elasticsearch/\" target=\"_blank\" rel=\"noopener\">Elassandra</a> and <a href=\"https://www.instaclustr.com/fantasy-basketball-data-exploration/\" target=\"_blank\" rel=\"noopener\">Kibana</a>. Elassandra is an integrated <a href=\"https://github.com/elastic/elasticsearch\" target=\"_blank\" rel=\"noopener\">Elasticsearch</a> and Cassandra service which computes secondary indexes for data and supports fast queries over the indexes. Kibana is an open source data visualization plugin for Elasticsearch.  Together with <a href=\"https://github.com/elastic/logstash\" target=\"_blank\" rel=\"noopener\">Logstash</a> they form the “Elastic stack” (previously the ELK stack).</p><p><a href=\"https://www.instaclustr.com/apache-kafka/\">Apache Kafka</a>, a distributed streaming platform (massively horizontally scalable, high-throughput low-latency, high-reliability, high-availability real-time streaming data processing), is another popular service in the same Open Source ecosystem as Cassandra, Spark and Elasticsearch.  Kafka is on the Instaclustr product roadmap for 2018, and we have <a href=\"https://www.instaclustr.com/support/documentation/apache-spark/spark-streaming-kafka-and-cassandra-tutorial/\" target=\"_blank\" rel=\"noopener\">a tutorial on spark streaming with kafka and cassandra to wet your appetite. </a></p><p>Rather than jumping straight into a deep dive of Elassandra and/or Kafka I’m going to take a more architectural perspective. I started by putting all the services of interest on a diagram, and then connecting them together based on documented support for each integration combination and direction (source and/or sink):</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1.png\"><img class=\"alignnone size-full wp-image-8010\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1.png\" alt=\"Kafka Architecture Diagram\" width=\"4349\" height=\"2240\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1.png 4349w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-300x155.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-768x396.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-1024x527.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-966x498.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-640x330.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-93x48.png 93w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-1-210x108.png 210w\" /></a></p><p>Note that Cassandra, Elassandra, Spark (batch) and Spark Streaming, Spark MLLib, Zeppelin and Kibana are tightly integrated, and support most logically possible interactions. Instaclustr also co-locates all of these services on the same nodes by default. </p><p>I’ve spent some time examining the Kafka documentation to check what related ecosystem services it can connect to, and in what direction. Kafka supports Source and Sink Connectors which enable integration with numerous other services. Lots of different event sources are supported, enabling data to be ingested from both external and internal devices and systems. AWS S3 is supported as a Kafka sink only, and JDBC as both source and sink. Elassandra is supported as a sink only, and Spark Streaming and Cassandra as source and sink. </p><p>Also note that implicitly most services can “talk to” themselves (i.e. read data from, process data, and write data back. This is what the card replacement rule achieves). What’s more interesting is that they can also interact with themselves on the same or different <i>clusters</i>, and for the same or different <i>locations</i> (e.g. in another AWS AZ, or in another region). The diagram shows a Service interacting with itself (same cluster), another instance of the service in the same location (different cluster), and another instance in a different cluster and location (different location):</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2.png\"><img class=\"alignnone size-full wp-image-8011\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2.png\" alt=\"Kafka Architecture Diagram\" width=\"3631\" height=\"1973\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2.png 3631w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-300x163.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-768x417.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-1024x556.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-966x525.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-640x348.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-88x48.png 88w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-2-199x108.png 199w\" /></a></p><p>This opens up powerful internal service architectural richness and use cases. For example: Differentiation of clusters running the same service (e.g. write-intensive Cassandra cluster feeding data into a read-intensive cassandra cluster); A Kafka cluster dedicated to ingestion only, connecting to others for processing; mirroring or replicating data from one Cassandra cluster (location) to another (e.g. using Spark to read from a Cassandra cluster in one location and write to a Cassandra cluster in another location); Peer-to-Peer Kafka clusters, where each cluster subscribes to events that are local to all other Kafka clusters and aggregates the events locally), etc.</p><h2>Kafka – some key features</h2><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka.png\"><img class=\"alignnone size-full wp-image-8012\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka.png\" alt=\"Key features of Apache Kafka\" width=\"604\" height=\"513\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka.png 604w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka-300x255.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka-57x48.png 57w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Some-key-features-of-Apache-Kafka-127x108.png 127w\" /></a></p><p>The main Kafka APIs are Connectors, Producers, Consumers and Streams. Kafka is stream event-based, and producers publish events onto one or more topics. Topics are multi-subscriber and can have zero or more consumers that process events. Kafka maintains a (partitioned) immutable commit log of events for each topic, and therefore keeps all published events for a specified retention period. This approach for message processing has a number of benefits. The more obvious benefits are speed, fault-tolerance, high concurrency and scalability. The surprising benefits are that consumers and producers can be very loosely coupled, and events can be shared! More than one consumer can consume the same event, and consumers also control which events to consume – they can consume new events and also re-consume past events.</p><p>Kafka’s performance is claimed to be constant with respect to data size, so storing events for an arbitrary length of time (as long as you have disk space!) is encouraged, by design. Because events can be processed more than once, by the same or different consumers, what do we end up with? A database for streaming events!</p><p>Let’s explore some permutations of the ecosystem of services (not all permutations will be covered in this blog), starting with Kafka.  In answer to the question “What is Kafka good for?”, the Kafka documentation suggests two broad classes of application. The focus of this blog is on the first use case – getting (streaming) data between systems.</p><ol><li>Building real-time streaming data pipelines that reliably get data between systems or applications (this blog)</li> <li>Building real-time streaming applications that transform or react to the streams of data (next blog).</li> </ol><h2>Use Case: Kafka as a Database (Teenagers bedroom. Stuff goes in, stuff rarely comes out).</h2><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr.png\"><img class=\"alignnone size-full wp-image-8013\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr.png\" alt=\"Kafka as a database Instaclustr\" width=\"965\" height=\"447\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr.png 965w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr-300x139.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr-768x356.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr-640x296.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr-104x48.png 104w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-database-Instaclustr-233x108.png 233w\" /></a></p><p>Kafka only, one or more source connectors, producer(s) publishing to topic(s). No consumers:</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3.png\"><img class=\"alignnone size-full wp-image-8015\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3.png\" alt=\"Kafka Architecture diagram\" width=\"2948\" height=\"1266\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3.png 2948w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-300x129.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-768x330.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-1024x440.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-966x415.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-640x275.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-112x48.png 112w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-3-251x108.png 251w\" /></a></p><p>This is a trivial, and somewhat counterintuitive use case for Kafka but illustrates one of the surprising benefits of the architecture, that it is designed from the “bed” up as an event streaming <i>database</i> – not just for event movement. All the events arriving will be published to topic(s), and persisted to disk. Events can subsequently be consumed multiple times by multiple consumers, who do not have to be subscribed yet. Is this interesting? Yes! It suggests lots of powerful use cases around event persistence, and reprocessing/replaying of events, and adding derived events (e.g. failure handling, support for multiple consumers and purposes for DevOps to maintain derived stateful data back in Kafka for future use, as well as for processing events from past, present and future, including predictions, in a unified manner).</p><h2>Use Case: Kafka as a temporary Buffer (Doctors waiting room)</h2><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer.png\"><img class=\"alignnone size-full wp-image-8016\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer.png\" alt=\"Kafka as a temporary buffer\" width=\"798\" height=\"524\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer.png 798w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer-300x197.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer-768x504.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer-640x420.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer-73x48.png 73w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Kafka-as-a-temporary-Buffer-164x108.png 164w\" /></a></p><p>This pattern has one Kafka cluster feeding into another one:</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4.png\"><img class=\"alignnone size-full wp-image-8017\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4.png\" alt=\"Kafka Architecture Diagram\" width=\"3326\" height=\"1266\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4.png 3326w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-300x114.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-768x292.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-1024x390.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-966x368.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-640x244.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-126x48.png 126w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-4-284x108.png 284w\" /></a></p><p>This “Buffer” (waiting room) pattern has a Kafka cluster dedicated solely to event ingestion, and another cluster for the event consumers.  This leverages the ability of Kafka to store events indefinitely, and isolate event producers from consumers.  The event production and consumption rates can be significantly different with no loss of events or overloading of consumers. This pattern is ideal for use cases where an incoming event storm can temporarily exceed the processing capacity of the consumers cluster, or if there is some other temporary failure or slowdown preventing the consumers processing events in real-time. The Ingestion cluster buffers all the events until the consumers are ready to process them again. In the wild, this buffer pattern is used by <a href=\"https://medium.com/netflix-techblog/kafka-inside-keystone-pipeline-dd5aeabaf6bb\" target=\"_blank\" rel=\"noopener\">Netflix</a>.</p><p>Kafka can act as a event buffer, concentrator, and router in-front of other services in our ecosystem as well. For example, Cassandra, Spark streaming or Elassandra can all be sinks for Kafka events.</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5.png\"><img class=\"alignnone size-full wp-image-8032\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5.png\" alt=\"Kafka Architecture Diagram 5\" width=\"3326\" height=\"1635\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5.png 3326w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-300x147.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-768x378.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-1024x503.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-966x475.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-640x315.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-98x48.png 98w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/11/Architecture-Diagram-5-220x108.png 220w\" /></a></p><h2>Use Case: Kafka active-passive replication</h2><p>In the Use Cases so far we’ve only used Kafka as a pass-through buffer or longer term persistence mechanism. Kafka producers and consumers can publish/subscribe to/from multiple topics, enabling more complex topologies to be created. In particular, some less obvious patterns can be used to support <a href=\"https://www.slideshare.net/GuozhangWang/building-stream-infrastructure-across-multiple-data-centers-with-apache-kafka\">data replication across multiple Kafka clusters and locations</a>.  </p><p>There are a couple of use cases for data replication across clusters/locations. One is for reliability/redundancy and is often called active-passive replication. Data from the source (active) cluster is copied to the passive (target) cluster.  The “passive” cluster can be used in case of failure of the active cluster, or it can be used to reduce latency for consumers that are geo-located near it.</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6.png\"><img class=\"alignnone size-full wp-image-8072\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6.png\" alt=\"Kafka Architecture Diagram\" width=\"3905\" height=\"1519\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6.png 3905w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-300x117.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-768x299.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-1024x398.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-966x376.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-640x249.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-123x48.png 123w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-6-278x108.png 278w\" /></a></p><h2>Use Case: Kafka active-active replication</h2><p>A more interesting use case is when unique events are collected at different locations, and must be shared among all the locations. This can be between just two locations, or many (P2P). This is an active-active pattern and can be viewed as a generalisation of the active-passive pattern as each cluster acts as both a source and a target for every other cluster, and the events copied from other clusters need to be merged with the events from the local cluster in a new topic (Topic 2 in the diagram below), from which consumers can get all the events. Note that it has to be different topic otherwise you get an event loop!</p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7.png\"><img class=\"alignnone size-full wp-image-8073\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7.png\" alt=\"Kafka Architecture Diagram\" width=\"5012\" height=\"1632\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7.png 5012w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-300x98.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-768x250.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-1024x333.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-966x315.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-640x208.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-147x48.png 147w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Architecture-Diagram-7-332x108.png 332w\" /></a></p><h2>(Magic) Mirror Maker</h2><p><a href=\"http://www.kyotojournal.org/renewal/the-magic-mirror-maker/\"><i>In Japan, bronze mirrors are known as magic mirrors, or makkyo</i></a><i> (魔鏡). One side is brightly polished, while an embossed design decorates the reverse side. Remarkably, when light is directed onto the face of the mirror, and reflected to a flat surface, an image “magically” </i><i>appears (usually the one featured on its back):</i></p><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am.png\"><img class=\"alignnone size-full wp-image-8074\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am.png\" alt=\"Magic Mirror Maker Makkyo\" width=\"2004\" height=\"1250\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am.png 2004w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-300x187.png 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-768x479.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-1024x639.png 1024w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-966x603.png 966w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-640x399.png 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-77x48.png 77w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.40.38-am-173x108.png 173w\" /></a></p><p>For the use cases involving events being moved between Kafka clusters, how can this be achieved? One obvious mechanism is just to pretend that the clusters are “local”, and read data from the source cluster topic with a consumer and publish it to another topic on the target cluster. This approach can work with low-latency WANs (e.g. clusters on the same AWS AZ). However, there are also a number of more sophisticated solutions. <a href=\"https://kafka.apache.org/documentation.html#basic_ops_mirror_maker\">Mirror maker</a> can be used (which also just reads data from the source cluster using a consumer and publishes it to the target cluster using a producer!). Will mirror maker actually work for the active-active use case given that mirror maker can only read/write to/from topics of the same name? <a href=\"https://www.linkedin.com/pulse/2-way-replication-apache-kafka-marcio-andrada\">Maybe, here’s a trick.</a> More sophisticated solutions exist, including uReplicator from Uber.</p><ul><li><a href=\"https://eng.uber.com/ureplicator/\">https://eng.uber.com/ureplicator/</a></li> <li><a href=\"https://github.com/uber/uReplicator\">https://github.com/uber/uReplicator</a></li> <li><a href=\"https://github.com/uber/uReplicator/wiki/uReplicator-Design\">https://github.com/uber/uReplicator/wiki/uReplicator-Design</a></li> </ul><h2>Next blog:</h2><h4>What’s the difference between Spark and Kafka Streaming? Event reprocessing/replaying, unifying stream and batch processing, producing and using state, fun with time, large messages, topic discovery, and more!</h4><p><a href=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am.png\"><img class=\"alignnone size-full wp-image-8078\" src=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am.png\" alt=\"Kafka Comic\" width=\"1060\" height=\"1332\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am.png 1060w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-239x300.png 239w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-768x965.png 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-815x1024.png 815w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-955x1200.png 955w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-490x616.png 490w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-509x640.png 509w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-38x48.png 38w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/12/Screen-Shot-2017-12-05-at-11.56.25-am-86x108.png 86w\" /></a></p><aside class=\"content-cta\"><div class=\"primary\"><h4>Related Articles:</h4></div></aside>"}}]}},"pageContext":{"alternative_id":12143}}