{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"trireme","alternative_id":4900,"content":"<p>Trireme is a tool providing migration support for Apache Cassandra, DataStax Enterprise Cassandra &amp; Solr. Commands are run using the Python <a href=\"https://github.com/pyinvoke/invoke\">Invoke</a> CLI tool.</p><h2>System Dependencies</h2><ul><li><code>cqlsh</code> must be on the <code>PATH</code>. Some tasks utilize the <code>cqlsh</code> tool for running scripts and dumping schemas to disk.</li>\n</ul><h2>Integration</h2><p>To use this tool within the scope of your project follow these steps.</p><ol><li>\n<p>Install <code>trireme</code> with <code>pip install trireme</code></p>\n</li>\n<li>\n<p>Create a <code>tasks.py</code> file with the following content:</p>\n<div class=\"highlight highlight-source-python\"><pre>from invoke import Collection\nfrom trireme import trireme\nnamespace = Collection(trireme)</pre></div>\n</li>\n<li>\n<p>Create a <code>trireme_config.py</code> file with your Cassandra and Solr information.</p>\n<div class=\"highlight highlight-source-python\"><pre># Cassandra Configuration\n# Contact points for your cluster, currently only the first is used\ncontact_points = ['127.0.0.1']\n# Keyspace to work with, this doesn't have to exist yet.\nkeyspace = 'foo'\n# Replication options. Defined as a map just as you would in CQL.\nreplication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }\n# replication = {'class' : 'NetworkTopologyStrategy', 'dc1' : 3, 'dc2' : 2}\n# Authentication Information\nusername = None\npassword = None\n# Flag indicating whether this host is the migration master. Migrations are only run on the migration master\nmigration_master = True\n# Solr Configuration\nsolr_url = 'http://127.0.0.1:8983/solr'</pre></div>\n</li>\n<li>\n<p>Run the trireme setup task to create the basic directories</p>\n<div class=\"highlight highlight-source-shell\"><pre>inv trireme.setup</pre></div>\n</li>\n</ol><h2>Usage</h2><p>Migrators contain logic to run migrations. This project contains a migrator for simple CQL scripts and Solr core configuration files. Not every migrator supports all actions. For example Solr included in DSE 4.6 does not include the ability to delete cores. In this case we do not have a task named drop.</p><p>List all commands:</p><p><code>inv -l</code></p><p>To list optional parameters for a command:</p><p><code>inv --help command.name</code>.</p><p>Example: <code>inv --help cassandra.add_migration</code></p><h3>Cassandra</h3><p><em>Note: This feature works with both Apache Cassandra and DataStax Enterprise</em></p><p>Actions supported:</p><ul><li><code>cassandra.create</code> - Creates the keyspace along with a table to track migrations. Note: The default replication strategy is SimpleStrategy with a Replication Factor of 3.</li>\n<li><code>cassandra.drop</code> - Drops the keyspace.</li>\n<li><code>cassandra.migrate</code> - Runs all missing migrations against the keyspace.</li>\n<li><code>cassandra.add_migration --name migration_name</code> - Generates a migration\nfile under <code>db/migrations</code> with the current timestamp prepended to the\nprovided <code>--name</code> value.</li>\n<li><code>cassandra.dump_schema</code> - Dumps the current schmea to ```db/schema.cql``. Be careful when using this feature when Solr is enabled.</li>\n<li><code>cassandra.load_schema</code> - Loads the schema from <code>db/schema.cql</code>. This may be faster than running all migrations in a project.</li>\n</ul><h4>Examples:</h4><ul><li><code>inv cassandra.create cassandra.migrate</code> - Creates the keyspaces and runs all migrations</li>\n<li><code>inv cassandra.load_schema</code> - Creates the keyspace and loads the schema from <code>db/schema.cql</code></li>\n</ul><h3>Solr</h3><p><em>Note: This feature only works with DataStax Enterprise</em></p><p>Actions supported:</p><ul><li><code>solr.create [--core foo.bar]</code> - Uploads the core configuration files and calls the CREATE API endpoint</li>\n<li><code>solr.migrate [--core foo.bar]</code> - Uploads the core configuration files and calls the RELOAD API endpoint</li>\n<li><code>solr.add_core --name foo.bar</code> - Creates a core configuration directory and files. Use the format\n<code>keyspace.table_name</code> when naming your cores.</li>\n</ul><p>Example: <code>inv solr.create</code> - Uploads all core configuration files and calls the create core API endpoint.</p><p><code>solr.create</code> and <code>solr.migrate</code> support the <code>--core core.name</code> flag. This will run the task against only one core instead of all cores. Remember the core name in DSE Solr is <code>keyspace.table_name</code>.</p><h2>Directory Layout</h2><h3>db/migrations</h3><p>CQL migration files generated by the <code>cassandra.add_migration</code> command will be placed in this directory with a timestamp prepended.</p><p>Example directory layout:</p><pre>db/\n  migrations/\n    201501301409_create_users_table.cql\n    201501301623_create_tweets_table.cql\n    ...\n</pre><h3>db/solr</h3><p>Folder containing all the Solr core configuration files. With DataStax Enterprise the core name is comprised of the keyspace and table name in the format <em>keyspace.table_name</em>. Within this directory we house sub-directories for each core. These directories in turn have the <code>schema.xml</code> and <code>solrconfig.xml</code> files needed for configuring the core.</p><p>Example directory layout:</p><pre>db/\n  solr/\n    example_keyspace.a_table/\n      schema.xml\n      solrconfig.xml\n    example_keyspace.b_table/\n      schema.xml\n      solrconfig.xml\n</pre><h2>Trireme Project Layout</h2><pre>trireme/\n  migrators/\n    cassandra.py\n    solr.py\n  trireme.py\n</pre><h3>migrators</h3><p>The code that powers the migration engine. Each migrator receives its own file and provides invoke tasks.</p><h3>trireme.py</h3><p>Collects all of the Invoke tasks into a common namespace along with a simple setup task</p><h2>Python Dependencies</h2><p><em>All required items have been specified in <code>requirements.txt</code> and\n<code>setup.py</code>. Select items are outlined below.</em></p><ul><li>cassandra-driver - DataStax driver for connecting with Cassandra, used when creating and dropping keyspaces</li>\n<li>requests - HTTP Client, used when communicating with the Solr APIs</li>\n<li>invoke - Task execution tool &amp; library. This is used to run the exposed migration tasks</li>\n</ul><h2>Extending Trireme</h2><p>Adding a new migrator involves placing the code to invoke annotations in a file within the migrators directory. Next add your migrator to the <code>Collection</code> entry in <code>trireme.py</code>. If you create a new migrator and would like to share it with the community, please fork the repo, add your migrator, and then open a pull request.</p>"}}]}},"pageContext":{"alternative_id":4900}}