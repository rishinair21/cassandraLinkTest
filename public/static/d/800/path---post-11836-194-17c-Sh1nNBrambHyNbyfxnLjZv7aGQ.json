{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"tuplejump/play-cassandra","alternative_id":11836,"content":"<article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>A Play Plugin for using Cassandra</p>\n<p>The Plugin initializes a Cassandra Session on startup and provides access to session\nand other properties through the <code>Cassandra</code> object.</p>\n<p>The Plugin also provides play-evolutions like functionality if it is not disabled.</p>\n<p>####Usage\nIn library dependencies, include</p>\n<pre>\"com.tuplejump\" %% \"play-cassandra\" % \"1.0.0-SNAPSHOT\"\n</pre>\n<p>Now, Cassandra host, port, cluster and session can be accessed through the API exposed by the Plugin.\nIn addition to that, a method <code>loadCQLFile</code> is also available. The API is documented at TODO</p>\n<p>Some examples,</p>\n<ul><li>executing a query</li>\n</ul><div class=\"highlight highlight-source-scala\"><pre>val query = QueryBuilder.select(\"title\")\n      .from(\"music\", \"playlists\")\n      .where(QueryBuilder.eq(\"id\", playlistId))\n    val queryResult = Cassandra.session.execute(query).toIterable</pre></div>\n<ul><li>executing a batch statement</li>\n</ul><div class=\"highlight highlight-source-scala\"><pre>val insertQuery: String = \"INSERT INTO music.playlists (id, song_id, title, artist, album) VALUES (?, ?, ?, ?, ?)\"\n    val ps = Cassandra.session.prepare(insertQuery)\n    var batch = new BatchStatement()\n    songs.foreach {\n      s =&gt;\n        batch.add(ps.bind(playlistId, s.id, s.title, s.artist, s.album))\n    }\n    Cassandra.session.execute(batch)</pre></div>\n<ul><li>loading a CQL statements from a file</li>\n</ul><div class=\"highlight highlight-source-scala\"><pre>Cassandra.loadCQLFile(\"init.CQL\")</pre></div>\n<p><strong>Note:The cluster and session exposed are closed by the Plugin when the application is stopped.</strong></p>\n<p>#####Evolution</p>\n<p>Evolution is enabled by default and the file names are expected to be integers in order,\nsimilar to play-evolutions for SQL or SQL-like databases.</p>\n<p><strong>The configuration property <code>cassandraPlugin.appName</code> should be set when evolution is enabled.\nThe plugin adds an entry for each appName and the default value is <code>appWithCassandraPlugin</code></strong></p>\n<p>To disable evolution, add the following to <code>conf/application.conf</code>,</p>\n<pre>cassandraPlugin.evolution.enabled=false\n</pre>\n<p><strong>Note: The plugin loads before <code>GlobalSettings</code>, so it is accessible in a custom <code>Global</code> object.</strong></p>\n<p>####Configuration\nThe default configuration is,</p>\n<pre>cassandraPlugin {\n  //host and port of where Cassandra is running\n  host = \"127.0.0.1\"    \n  port = 9042           \n  \n  evolution {\n    enabled = true\n    directory = \"evolutions/cassandra/\" //directory within conf to look for CQL files\n  }\n  \n  appName = \"appWithCassandraPlugin\" // appName to be saved in DB when using evolutions\n}\n</pre>\n</article>"}}]}},"pageContext":{"alternative_id":11836}}