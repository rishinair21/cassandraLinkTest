{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"joaquincasares/CassandraJsonMapper","alternative_id":12896,"content":"<article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>CassandraJsonMapper is an Apache Cassandra Python driver developed for direct\nfunctionality to store JSON-style objects mapped into Cassandra composite columns.</p>\n<p>This is done via the main methods: <code>save(key)</code>, <code>get(key)</code>, <code>delete(key)</code>.</p>\n<h2><a id=\"user-content-history\" class=\"anchor\" aria-hidden=\"true\" href=\"#history\"></a>History</h2>\n<p>I needed something small, light-weight, and fast enough on reads and writes for\nshort bursts of data. I was handling JSON returns from REST API calls that\nI would later do light-weight analytics over. This fit my use case efficiently,\nso I decided to share it.</p>\n<h2><a id=\"user-content-setup\" class=\"anchor\" aria-hidden=\"true\" href=\"#setup\"></a>Setup</h2>\n<pre>pip install CassandraJsonMapper\n</pre>\n<h2><a id=\"user-content-initialize-database\" class=\"anchor\" aria-hidden=\"true\" href=\"#initialize-database\"></a>Initialize Database</h2>\n<p>Since CassandraJsonMapper uses composite columns heavily to do it's nesting,\nthe schema for the column family that CassandraJsonMapper will use must look\nsimilar to what is provided.</p>\n<p><strong>NOTE:</strong>\nKeep in mind that the number of composite columns created must be at\nleast as deep as the deepest JSON document that will be saved.</p>\n<div class=\"highlight highlight-source-sql\"><pre>create keyspace json\n  with placement_strategy = 'SimpleStrategy'\n  and strategy_options = {replication_factor : 1};\nuse json;\ncreate column family json\n  with column_type = 'Standard'\n  and comparator = 'CompositeType(\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType,\n    org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.BytesType)'\n  and default_validation_class = 'BytesType'\n  and key_validation_class = 'BytesType';</pre></div>\n<h2><a id=\"user-content-example-code\" class=\"anchor\" aria-hidden=\"true\" href=\"#example-code\"></a>Example Code</h2>\n<div class=\"highlight highlight-source-python\"><pre>import CassandraJsonMapper\ndb = CassandraJsonMapper.db(keyspace='json', column_family='json')\ndocument = {\n    'key2': {\n        'test': 'okay'\n    }\n}\ndb.save(document)\nassert db.get('key2') == document['key2']\ndb.delete('key2')\nassert db.get('key2') == {}</pre></div>\n<h2><a id=\"user-content-multi-threaded-example\" class=\"anchor\" aria-hidden=\"true\" href=\"#multi-threaded-example\"></a>Multi-threaded Example</h2>\n<div class=\"highlight highlight-source-python\"><pre>db.mt_save(document)\ndb.mt_finish()\nassert db.get('key2') == document['key2']</pre></div>\n<h2><a id=\"user-content-limitations\" class=\"anchor\" aria-hidden=\"true\" href=\"#limitations\"></a>Limitations</h2>\n<p>In hopes of keeping this client simple, the following is not supported:</p>\n<ul><li>Cannot append to lists.</li>\n<li>Cannot delete portions of a document.</li>\n<li>Reads may not be returned in full, but paging is supported.</li>\n</ul><h2><a id=\"user-content-future-implementations\" class=\"anchor\" aria-hidden=\"true\" href=\"#future-implementations\"></a>Future Implementations</h2>\n<ul><li>Deleting portions of documents.</li>\n<li>Better list support.</li>\n</ul><h2><a id=\"user-content-methods\" class=\"anchor\" aria-hidden=\"true\" href=\"#methods\"></a>Methods</h2>\n<p>This client has a few main methods:</p>\n<div class=\"highlight highlight-source-python\"><pre>def __init__(self, keyspace, column_family, server_list=['localhost'],\n             write_consistency=ConsistencyLevel.ONE,\n             read_consistency=ConsistencyLevel.ONE,\n             request_size=100, batch_size=6000, thread_count=20)\n    \"\"\"Create the Cassandra connection pool and CF connection.\"\"\"\ndef save(self, dictionary_payload, write_consistency=None, batch_size=None)\n    \"\"\"Convert and save dictionary into Cassandra.\"\"\"\ndef get(self, key, read_consistency=None,\n        return_last_row=False, column_start=None, request_size=None)\n    \"\"\"Read and convert Cassandra response into dictionary.\"\"\"\ndef delete(self, key, write_consistency=None)\n    \"\"\"Delete dictionary from Cassandra.\"\"\"\ndef mt_save(self, dictionary_payload)\n    \"\"\"Save dictionary asynchronously.\"\"\"\ndef mt_finish(self)\n    \"\"\"Wait until all pending inserts are performed.\"\"\"</pre></div>\n</article>"}}]}},"pageContext":{"alternative_id":12896}}