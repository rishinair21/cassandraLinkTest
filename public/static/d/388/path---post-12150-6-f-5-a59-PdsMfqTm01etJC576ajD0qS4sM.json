{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Demystifying Cassandra’s broadcast_address - Instaclustr","alternative_id":12150,"content":"<p>When configuring <a href=\"https://www.instaclustr.com/apache-cassandra/\">Apache Cassandra</a> to work in a new environment or with a new application or service we sometimes find ourselves asking <em>“What’s the difference between broadcast_address and broadcast_rpc_address again?”</em>.</p><p>The difference is <strong>broadcast_address</strong> relates to <strong>gossip</strong> and <strong>node to node</strong> <strong>communications</strong>, whereas <strong>broadcast_rpc_address</strong> is associated with <strong>client connections</strong>. Read on for more details.</p><p>The Cassandra configuration file has a few interdependent properties related to communication, which can take a bit of concentration to make sense of. Here is a (hopefully) easy to understand explanation.</p><h2>Node to node communication (i.e. gossip)</h2><p>Cassandra will bind to the <strong>listen_address</strong> or <strong>listen_interface</strong> and listen on the storage_port or ssl_storage_port for gossip. In most cases, these properties may be omitted, resulting in Cassandra binding to the hostname’s IP address (Cassandra uses <a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/InetAddress.html#getLocalHost--\" target=\"_blank\" rel=\"noopener\">InetAddress.getLocalHost()</a>). <strong>Note:</strong> setting listen_address to “localhost” results in Cassandra binding to the loopback interface (not recommended as it only works as a 1-node cluster).</p><p><strong>broadcast_address</strong> is reported to nodes for peer discovery. Topologies that span separate networks need this set to a public address. If this property is omitted, the listen_address will be broadcast to nodes.  <strong>Note:</strong> Nodes can be configured to gossip via the local network and use public addresses for nodes outside its local network by setting <code>prefer_local=true</code> in <em>cassandra-rackdc.properties</em> and using certain endpoint_snitches (such as GossipingPropertyFileSnitch or Ec2MultiRegionSnitch).</p><h2>Client to node communication</h2><h4>rpc_address, rpc_interface and broadcast_rpc_address</h4><p>By “client” I mean Cassandra drivers and clqsh. The drivers may use the Thrift transport or the Native transport (CQL binary protocol). Cqlsh uses the Native transport.</p><p>Cassandra will bind to the <strong>rpc_address</strong> or <strong>rpc_interface</strong> and listen on rpc_port and native_transport_port for client connections. If these properties are omitted, Cassandra will bind to the hostname’s IP address (and would need to be specified to a locally running cqlsh because <code><strong>cqlsh</strong></code> = <code><strong>cqlsh</strong> <strong>&lt;loopback address&gt;</strong></code>).</p><p><strong>broadcast_rpc_address</strong> is a property available in Cassandra 2.1 and above. It is reported to clients during cluster discovery and as cluster metadata. It is useful for clients outside the cluster’s local network. This property is typically either:</p><ul><li>the public address if most clients are outside the cluster’s local network</li> <li>the local network address if most clients are in the cluster’s local network</li> </ul><p>If this property is omitted, rpc_address will be reported to clients.</p><p><strong>Note 1:</strong> If there are a mix of clients inside and outside the local network, use an AddressTranslator policy to compensate for unreachable addresses (only available for Java and Python drivers at the time of writing. <a href=\"https://www.instaclustr.com/apache-cassandra-deployed-on-private-and-public-networks/\" target=\"_blank\" rel=\"noopener\">Here is a Java example</a>.)</p><p><strong>Note 2: </strong><em>rpc_address</em> may be set to 0.0.0.0. In this case, Cassandra binds to all available interfaces, including loopback, which is used by cqlsh when no host is specified. But 0.0.0.0 is not routable, so Cassandra will use a different property to determine the address to broadcast to clients:</p><ul><li>for Cassandra 2.1 and later: broadcast_rpc_address must be set and will be reported to clients.</li> <li>for Cassandra prior to 2.1: broadcast_address (or listen_address if omitted) will be reported to clients.</li> </ul><p>Summary:</p><table><thead><tr><th>Cassandra Version</th> <th>Purpose</th> <th>Properties</th> <th>Typical Setting</th> </tr></thead><tbody><tr><td>All</td> <td>gossip</td> <td>listen_address or listen_interface (with storage_port or ssl_storage_port)</td> <td>Omit to bind to InetAddress.getLocalHost()</td> </tr><tr><td>All</td> <td>peer discovery (within the cluster)</td> <td>broadcast_address else listen_address</td> <td>public address</td> </tr><tr><td>All</td> <td>client requests (CQL and Thrift)</td> <td>rpc_address or rpc_interface (with rpc_port and native_transport_port)</td> <td>Omit to bind to InetAddress.getLocalHost()</td> </tr><tr><td>2.1 and later</td> <td>cluster discovery | metadata (to the client)</td> <td>broadcast_rpc_address else rpc_address</td> <td>Omit to broadcast InetAddress.getLocalHost()</td> </tr><tr><td>2.0 and prior</td> <td>cluster discovery | metadata (to the client)</td> <td>rpc_address or broadcast_address if 0.0.0.0</td> <td>Omit to broadcast InetAddress.getLocalHost()</td> </tr></tbody></table>"}}]}},"pageContext":{"alternative_id":12150}}