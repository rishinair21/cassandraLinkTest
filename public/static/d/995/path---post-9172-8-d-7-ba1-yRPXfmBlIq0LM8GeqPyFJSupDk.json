{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"brianmhess/cassandra-loader","alternative_id":9172,"content":"<h2>Introduction</h2><p>cassandra-loader is a general-purpose, delimited-file, bulk loader for\nCassandra. It supports a number of configuration options to enable bulk\nloading of various types of delimited files, including</p><ul><li>comma-separated values</li>\n<li>tab-separated values</li>\n<li>customer delimiter-separated values</li>\n<li>header row</li>\n<li>comma as decimal separator</li>\n<li>...</li>\n</ul><h2>Getting it</h2><h3>Downloading</h3><p>This utility has already been built, and is available at\n<a href=\"https://github.com/brianmhess/cassandra-loader/releases/download/v0.0.27/cassandra-loader\">https://github.com/brianmhess/cassandra-loader/releases/download/v0.0.27/cassandra-loader</a></p><p>Get it with wget:</p><pre>wget https://github.com/brianmhess/cassandra-loader/releases/download/v0.0.27/cassandra-loader\n</pre><h3>Building</h3><p>To build this repository, simply clone this repo and run:</p><pre>gradle loader\n</pre><p>All of the dependencies are included (namely, the Java driver - currently\nversion 3.0.0).  The output will be the cassandra-loader executable\nin the build directory.  There will also be an jar with all of the\ndependencies included in the build/libs/cassandra-loader-uber-.jar</p><h2>Documentation</h2><p>To extract this README document, simply run (on the cassandra-loader\nexecutable - (e.g., on build/cassandra-loader):</p><pre>jar xf cassandra-loader README.md\n</pre><h2>Run</h2><p>To run cassandra-loader, simply run the cassandra-loader executable\n(e.g., located at build/cassandra-loader):</p><pre>cassandra-loader\n</pre><p>If you built this with gradle, you can also run:</p><pre>gradle run\n</pre><p>This will print the usage statement.</p><p>The following will load the <code>myFileToLoad.csv</code> file into the Cassandra\ncluster at IP address 1.2.3.4 into the <code>test.ltest</code> column family where\nthe myFileToLoad file has the format of 4 columns - and it gets the\ndata type information from the database - and using the default options:</p><pre>cassandra-loader -f myFileToLoad.csv -host 1.2.3.4 -schema \"test.ltest(a, b, c, d)\"\n</pre><h2>Options:</h2><table><thead><tr><th align=\"right\">Switch</th>\n<th align=\"right\">Option</th>\n<th align=\"right\">Default</th>\n<th align=\"left\">Description</th>\n</tr></thead><tbody><tr><td align=\"right\"><code>-configFile</code></td>\n<td align=\"right\">Filename</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Filename of configuration options</td>\n</tr><tr><td align=\"right\"><code>-f</code></td>\n<td align=\"right\">Filename</td>\n<td align=\"right\">&lt;REQUIRED&gt;</td>\n<td align=\"left\">Filename to load - required.</td>\n</tr><tr><td align=\"right\"><code>-host</code></td>\n<td align=\"right\">IP Address</td>\n<td align=\"right\">&lt;REQUIRED&gt;</td>\n<td align=\"left\">Cassandra connection point - required.</td>\n</tr><tr><td align=\"right\"><code>-format</code></td>\n<td align=\"right\">Input format</td>\n<td align=\"right\">delim</td>\n<td align=\"left\">Format of the data.  Options are \"delim\" or \"json\".</td>\n</tr><tr><td align=\"right\"><code>-schema</code></td>\n<td align=\"right\">CQL schema</td>\n<td align=\"right\">\n</td><td align=\"left\">Schema of input data - required for delim In the format \"keySpace.table(col1,col2,...)\" and in the order that the data will be in the file.</td>\n</tr><tr><td align=\"right\"><code>-keyspace</code></td>\n<td align=\"right\">Keyspace name</td>\n<td align=\"right\">\n</td><td align=\"left\">Name of keyspace (case sensitive) to load in to - required for json</td>\n</tr><tr><td align=\"right\"><code>-table</code></td>\n<td align=\"right\">Table name</td>\n<td align=\"right\">\n</td><td align=\"left\">Name of table (case sensitive) to load in to - required for json</td>\n</tr><tr><td align=\"right\"><code>-port</code></td>\n<td align=\"right\">Port Number</td>\n<td align=\"right\">9042</td>\n<td align=\"left\">Cassandra native protocol port number</td>\n</tr><tr><td align=\"right\"><code>-user</code></td>\n<td align=\"right\">Username</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Cassandra username</td>\n</tr><tr><td align=\"right\"><code>-pw</code></td>\n<td align=\"right\">Password</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Cassandra password</td>\n</tr><tr><td align=\"right\"><code>-ssl-truststore-path</code></td>\n<td align=\"right\">Truststore Path</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Path to SSL truststore</td>\n</tr><tr><td align=\"right\"><code>-ssl-truststore-pw</code></td>\n<td align=\"right\">Truststore Password</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Password to SSL truststore</td>\n</tr><tr><td align=\"right\"><code>-ssl-keystore-path</code></td>\n<td align=\"right\">Keystore Path</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Path to SSL keystore</td>\n</tr><tr><td align=\"right\"><code>-ssl-keystore-path</code></td>\n<td align=\"right\">Keystore Password</td>\n<td align=\"right\">none</td>\n<td align=\"left\">Password to SSL keystore</td>\n</tr><tr><td align=\"right\"><code>-consistencyLevel</code></td>\n<td align=\"right\">Consistency Level</td>\n<td align=\"right\">ONE</td>\n<td align=\"left\">CQL Consistency Level</td>\n</tr><tr><td align=\"right\"><code>-numThreads</code></td>\n<td align=\"right\">Number of threads</td>\n<td align=\"right\">Number of CPUs</td>\n<td align=\"left\">Number of threads to use (one per file)</td>\n</tr><tr><td align=\"right\"><code>-numFutures</code></td>\n<td align=\"right\">Number of Futures</td>\n<td align=\"right\">1000</td>\n<td align=\"left\">Number of Java driver futures in flight.</td>\n</tr><tr><td align=\"right\"><code>-numRetries</code></td>\n<td align=\"right\">Number of retries</td>\n<td align=\"right\">1</td>\n<td align=\"left\">Number of times to retry the INSERT before declaring defeat.</td>\n</tr><tr><td align=\"right\"><code>-queryTimeout</code></td>\n<td align=\"right\">Timeout in seconds</td>\n<td align=\"right\">2</td>\n<td align=\"left\">Amount of time to wait for a query to finish before timing out.</td>\n</tr><tr><td align=\"right\"><code>-ttl</code></td>\n<td align=\"right\">Time To Live</td>\n<td align=\"right\">none</td>\n<td align=\"left\">TTL to use when inserting these rows</td>\n</tr><tr><td align=\"right\"><code>-delim</code></td>\n<td align=\"right\">Delimiter</td>\n<td align=\"right\">,</td>\n<td align=\"left\">Delimiter to use</td>\n</tr><tr><td align=\"right\"><code>-charsPerColumn</code></td>\n<td align=\"right\">Characters per column</td>\n<td align=\"right\">4096</td>\n<td align=\"left\">Maximum characters per column</td>\n</tr><tr><td align=\"right\"><code>-nullString</code></td>\n<td align=\"right\">Null String</td>\n<td align=\"right\">&lt;empty string&gt;</td>\n<td align=\"left\">String to represent NULL data</td>\n</tr><tr><td align=\"right\"><code>-boolStyle</code></td>\n<td align=\"right\">Boolean Style</td>\n<td align=\"right\">TRUE_FALSE</td>\n<td align=\"left\">String for boolean values.  Options are \"1_0\", \"Y_N\", \"T_F\", \"YES_NO\", \"TRUE_FALSE\".</td>\n</tr><tr><td align=\"right\"><code>-decimalDelim</code></td>\n<td align=\"right\">Decimal delimiter</td>\n<td align=\"right\">.</td>\n<td align=\"left\">Delimiter for decimal values.  Options are \".\" or \",\"</td>\n</tr><tr><td align=\"right\"><code>-dateFormat</code></td>\n<td align=\"right\">Date Format String</td>\n<td align=\"right\">default for Locale.ENGLISH</td>\n<td align=\"left\">Date format string as specified in the SimpleDateFormat Java class: <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" rel=\"nofollow\">http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html</a></td>\n</tr><tr><td align=\"right\"><code>-skipRows</code></td>\n<td align=\"right\">Rows to skip</td>\n<td align=\"right\">0</td>\n<td align=\"left\">Number of rows to skip at the beginning of the file</td>\n</tr><tr><td align=\"right\"><code>-skipCols</code></td>\n<td align=\"right\">Columns to skip</td>\n<td align=\"right\">&lt;not set&gt;</td>\n<td align=\"left\">Comma-separated list of columns to skip loading (0-counted)</td>\n</tr><tr><td align=\"right\"><code>-maxRows</code></td>\n<td align=\"right\">Max rows to read</td>\n<td align=\"right\">-1</td>\n<td align=\"left\">Maximum rows to read (after optional skipping of rows).  -1 signifies all rows.</td>\n</tr><tr><td align=\"right\"><code>-maxErrors</code></td>\n<td align=\"right\">Max parse errors</td>\n<td align=\"right\">10</td>\n<td align=\"left\">Maximum number of rows that do not parse to allow before exiting.</td>\n</tr><tr><td align=\"right\"><code>-maxInsertErrors</code></td>\n<td align=\"right\">Max insert errors</td>\n<td align=\"right\">10</td>\n<td align=\"left\">Maximum number of rows that do not insert to allow before exiting.</td>\n</tr><tr><td align=\"right\"><code>-badDir</code></td>\n<td align=\"right\">Bad directory</td>\n<td align=\"right\">current directory</td>\n<td align=\"left\">Directory to write badly parsed and badly inserted rows - as well as the log file.</td>\n</tr><tr><td align=\"right\"><code>-rate</code></td>\n<td align=\"right\">Ingest rate</td>\n<td align=\"right\">unlimited</td>\n<td align=\"left\">Maximum rate to insert data - in rows/sec.</td>\n</tr><tr><td align=\"right\"><code>-progressRate</code></td>\n<td align=\"right\">Progress rate</td>\n<td align=\"right\">100000</td>\n<td align=\"left\">How often to report the ingest rate (number of rows)</td>\n</tr><tr><td align=\"right\"><code>-rateFile</code></td>\n<td align=\"right\">Rate Stats File</td>\n<td align=\"right\">&lt;not set&gt;</td>\n<td align=\"left\">File to contain CSV rate statistics</td>\n</tr><tr><td align=\"right\"><code>-successDir</code></td>\n<td align=\"right\">Success directory</td>\n<td align=\"right\">&lt;not set&gt;</td>\n<td align=\"left\">Location to move successfully loaded files</td>\n</tr><tr><td align=\"right\"><code>-failureDir</code></td>\n<td align=\"right\">Failure directory</td>\n<td align=\"right\">&lt;not set&gt;</td>\n<td align=\"left\">Location to move files that failed to load</td>\n</tr><tr><td align=\"right\"><code>-batchSize</code></td>\n<td align=\"right\">Batch size</td>\n<td align=\"right\">1</td>\n<td align=\"left\">Size of unlogged batches. If set to 1 then no batching.</td>\n</tr><tr><td align=\"right\"><code>-comment</code></td>\n<td align=\"right\">Comment character</td>\n<td align=\"right\">$lt;not set&gt;</td>\n<td align=\"left\">Comment character.</td>\n</tr></tbody></table><h2>Comments</h2><h3>Using stdin</h3><p>You can send data in on stdin by specifying the filename (via the -f switch) as \"stdin\" (case insensitive).\nThat way, you could pipe data in from other commands:</p><pre>grep IMPORTANT data.csv | cassandra-loader -f stdin -h 1.2.3.4 -schema \"test.itest(a, b)\"\n</pre><h3>Support for collections</h3><p>Collections are supported.  Their format is the CQL native one.\nSets are started with '{' and ended with '}' and enclose a comma-separated list\n{1,2,3} or {\"a\",\"b\",\"c\"}\nLists are started with '[' and ended with ']' and enclose a comma-separated list\n[1,2,3] or [\"a\",\"b\",\"c\"]\nMaps are started with '{' and ended with '}' and enclose a comma-separated list\nof pairs that are separated by ':'\n{1:1,2:2,3:3} or {\"a\":1, \"b\":2, \"c\":3}\nAll collections must be enclosed in double-quotes.</p><h3>Username/Password</h3><p>If you specify either the username or the password, then you must specify both.</p><h3>Boolean Style</h3><p>boolStyle is a case-insensitive test of the True and False strings.  For the\ndifferent styles, the True and False strings are as follows:</p><pre>    Style   | True | False\n------------|------|-------\n     0_1    |    1 |     0 \n     Y_N    |    Y |     N \n     T_F    |    T |     F \n   YES_NO   |  YES |    NO \n TRUE_FALSE | TRUE | FALSE \n</pre><h3>Configuration file</h3><p>configFile is a file with configuration options that are formatted just like on\nthe command line.  This allows you to not specify arguments on the command line.\nFor example, you can specify passwords in the configFile and avoid having them on\nthe command line.  The format is one switch and option per line:</p><pre>-pwd mypassword\n-host 1.2.3.4\n</pre><h3>Miscelaneous</h3><p>numFutures is a way to control the level of parallelism, but at some point\ntoo many will actually slow down the load.  The default of 500 is a decent\nplace to start.</p><p>If you use quoted strings, you need to use double-quotes.  To escape a double-quote inside a quoted string, use the backslash to escape it (\"\"\").  To create a backslash inside a quoted string, use two backslashes in a row (\"\\\").  If you quote your string, it will not be trimmed, but if you do not quote your string it will be trimmed.</p><p>Loading into counter columns is not supported.</p><p>The default nullString is the empty string.  If you want empty strings to be saved as empty strings, set the nullString to something else.</p><p>If you do not set the successDir then files that successfully loaded will remain in their input directory.  The same is true for failed files if you do not set the failureDir.  You cannot set either if the input file is \"stdin\".</p><p>When using <code>jsonline</code>, all JSON field names are case-sensitive.  When using <code>jsonline</code> or <code>jsonarray</code>, the <code>-keyspace</code> and <code>-table</code> arguments are case-sensitive.</p><h2>Usage Statement:</h2><pre>version: 0.0.27\nUsage: -f &lt;filename&gt; -host &lt;ipaddress&gt; [OPTIONS]\nOPTIONS:\n  -schema &lt;schema&gt;                   Table schema (when using delim)\n  -table &lt;tableName&gt;                 Table name (when using json)\n  -keyspace &lt;keyspaceName&gt;           Keyspace name (when using json)\n  -configFile &lt;filename&gt;             File with configuration options\n  -delim &lt;delimiter&gt;                 Delimiter to use [,]\n  -charsPerColumn &lt;chars&gt;            Max number of chars per column [4096]\n  -dateFormat &lt;dateFormatString&gt;     Date format for TIMESTAMP [default for Locale.ENGLISH]\n  -localDateFormat &lt;formatString&gt;    Date format for DATE [yyyy-MM-dd]\n  -nullString &lt;nullString&gt;           String that signifies NULL [none]\n  -comment &lt;commentString&gt;           Comment symbol to use [none]\n  -skipRows &lt;skipRows&gt;               Number of rows to skip [0]\n  -skipCols &lt;columnsToSkip&gt;          Comma-separated list of columsn to skip in the input file\n  -maxRows &lt;maxRows&gt;                 Maximum number of rows to read (-1 means all) [-1]\n  -maxErrors &lt;maxErrors&gt;             Maximum parse errors to endure [10]\n  -badDir &lt;badDirectory&gt;             Directory for where to place badly parsed rows. [none]\n  -port &lt;portNumber&gt;                 CQL Port Number [9042]\n  -user &lt;username&gt;                   Cassandra username [none]\n  -pw &lt;password&gt;                     Password for user [none]\n  -ssl-truststore-path &lt;path&gt;        Path to SSL truststore [none]\n  -ssl-truststore-pw &lt;pwd&gt;           Password for SSL truststore [none]\n  -ssl-keystore-path &lt;path&gt;          Path to SSL keystore [none]\n  -ssl-keystore-pw &lt;pwd&gt;             Password for SSL keystore [none]\n  -consistencyLevel &lt;CL&gt;             Consistency level [LOCAL_ONE]\n  -numFutures &lt;numFutures&gt;           Number of CQL futures to keep in flight [1000]\n  -batchSize &lt;batchSize&gt;             Number of INSERTs to batch together [1]\n  -decimalDelim &lt;decimalDelim&gt;       Decimal delimiter [.] Other option is ','\n  -boolStyle &lt;boolStyleString&gt;       Style for booleans [TRUE_FALSE]\n  -numThreads &lt;numThreads&gt;           Number of concurrent threads (files) to load [num cores]\n  -queryTimeout &lt;# seconds&gt;          Query timeout (in seconds) [2]\n  -numRetries &lt;numRetries&gt;           Number of times to retry the INSERT [1]\n  -maxInsertErrors &lt;# errors&gt;        Maximum INSERT errors to endure [10]\n  -rate &lt;rows-per-second&gt;            Maximum insert rate [50000]\n  -progressRate &lt;num txns&gt;           How often to report the insert rate [100000]\n  -rateFile &lt;filename&gt;               Where to print the rate statistics\n  -successDir &lt;dir&gt;                  Directory where to move successfully loaded files\n  -failureDir &lt;dir&gt;                  Directory where to move files that did not successfully load\n  -nullsUnset [false|true]           Treat nulls as unset [faslse]\n  -format [delim|jsonline|jsonarray] Format of data: delimited or JSON [delim]\n  -table &lt;tableName&gt;                 Table name (when using JSON)\n  -keyspace &lt;keyspaceName&gt;           Keyspace name (when using JSON)\n  -ttl &lt;TTL&gt;                         TTL for all rows in this invocation [unset]\nExamples:\ncassandra-loader -f /path/to/file.csv -host localhost -schema \"test.test3(a, b, c)\"\ncassandra-loader -f /path/to/directory -host 1.2.3.4 -schema \"test.test3(a, b, c)\" -delim \"\\t\" -numThreads 10\ncassandra-loader -f stdin -host localhost -schema \"test.test3(a, b, c)\" -user myuser -pw mypassword\n</pre><p>##Examples:</p><p>Load file /path/to/file.csv into the test3 table in the test keyspace using\nthe cluster at localhost.  Use the default options:</p><pre>cassandra-loader -f /path/to/file.csv -host localhost -schema \"test.test3(a, b, c)\"\n</pre><p>Load all the files from /path/to/directory into the test3 table in the test\nkeyspace using the cluster at 1.2.3.4.  Use 10 threads and use tab as the\ndelimiter:</p><pre>cassandra-loader -f /path/to/directory -host 1.2.3.4 -schema \"test.test3(a, b, c)\" -delim \"\\t\" -numThreads 10\n</pre><p>Load the data from stdin into the test3 table in the test keyspace using the\ncluster at localhost.  Use \"myuser\" as the username and \"mypassword\" as the\npassword:</p><pre>cassandra-loader -f stdin -host localhost -schema \"test.test3(a, b, c)\" -user myuser -pw mypassword\n</pre><p>##Sample</p><p>Included here is a set of sample data.  It is in the sample/ directory.\nYou can set up the table and keyspace by running:</p><pre>cqlsh -f sample/cassandra-schema.cql\n</pre><p>To load the data, run:</p><pre>cd sample\n./load.sh\n</pre><p>To check that things have succeeded, you can run:</p><pre>wc -l titanic.csv\n</pre><p>And:</p><pre>cqlsh -e \"SELECT COUNT(*) FROM titanic.surviors\"\n</pre><p>Both should return 891.</p><h2>cassandra-unloader</h2><p>cassandra-unloader is a utility to dump the contents\nof a Cassandra table to delimited file format.  It uses\nthe same sorts of options as cassandra-loader so that the\noutput of cassandra-unloader could be piped into\ncassandra-loader:</p><pre>cassandra-unloader -f stdout -host host1 -schema \"ks.table(a,b,c)\" | cassandra-loader -f stdin -host host2 -schema \"ks2.table2(x,y,z)\"\n</pre><p>Get it with wget:</p><pre>wget https://github.com/brianmhess/cassandra-loader/releases/download/v0.0.27/cassandra-unloader\n</pre><p>To build, run:</p><pre>gradle unloader\n</pre><p>To run cassandra-unloader, simply run the cassandra-unloader executable\n(e.g., located at build/cassandra-unloader):</p><pre>cassandra-unloader\n</pre><p>###Usage statement:</p><pre>version: 0.0.27\nUsage: -f &lt;outputStem&gt; -host &lt;ipaddress&gt; -schema &lt;schema&gt; [OPTIONS]\nOPTIONS:\n  -configFile &lt;filename&gt;             File with configuration options\n  -format [delim|jsonline|jsonarray] Format of data: delimited or JSON [delim]\n  -delim &lt;delimiter&gt;                 Delimiter to use [,]\n  -dateFormat &lt;dateFormatString&gt;     Date format for TIMESTAMP [default for Locale.ENGLISH]\n  -localDateFormat &lt;FormatString&gt;    Date format for DATE [yyyy-MM-dd]\n  -nullString &lt;nullString&gt;           String that signifies NULL [none]\n  -port &lt;portNumber&gt;                 CQL Port Number [9042]\n  -user &lt;username&gt;                   Cassandra username [none]\n  -pw &lt;password&gt;                     Password for user [none]\n  -ssl-truststore-path &lt;path&gt;        Path to SSL truststore [none]\n  -ssl-truststore-pw &lt;pwd&gt;           Password for SSL truststore [none]\n  -ssl-keystore-path &lt;path&gt;          Path to SSL keystore [none]\n  -ssl-keystore-pw &lt;pwd&gt;             Password for SSL keystore [none]\n  -consistencyLevel &lt;CL&gt;             Consistency level [LOCAL_ONE]\n  -decimalDelim &lt;decimalDelim&gt;       Decimal delimiter [.] Other option is ','\n  -boolStyle &lt;boolStyleString&gt;       Style for booleans [TRUE_FALSE]\n  -numThreads &lt;numThreads&gt;           Number of concurrent threads to unload [5]\n  -beginToken &lt;tokenString&gt;          Begin token [none]\n  -endToken &lt;tokenString&gt;            End token [none]\n  -where &lt;predicate&gt;                 WHERE clause [none]\n  -fetchSize &lt;fetchSize&gt;             Fetch size to use [0]\n</pre><p>A few simple examples using the <code>-where</code> are as follows:</p><pre>cassandra-unloader -host localhost -f stdout -schema \"testks.testtable(pkey,ccol,x,y)\" -where \"pkey=5\"\ncassandra-unloader -host localhost -f stdout -schema \"testks.testtable(pkey,ccol,x,y)\" -where \"x = 100 ALLOW FILTERING\"\n</pre>"}}]}},"pageContext":{"alternative_id":9172}}