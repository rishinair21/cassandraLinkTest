{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"spotify/heroic","alternative_id":11765,"content":"<p><a href=\"https://travis-ci.org/spotify/heroic\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1ff3a276d500da8dc03f2a43b9a1b0dff28420f8/68747470733a2f2f7472617669732d63692e6f72672f73706f746966792f6865726f69632e7376673f6272616e63683d6d6173746572\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/spotify/heroic.svg?branch=master\" /></a>\n<a href=\"https://codecov.io/gh/spotify/heroic\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7cdbc66d3bc1891024a9ec3ce3fbba2cd9c17cf3/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f73706f746966792f6865726f69632e737667\" alt=\"Codecov\" data-canonical-src=\"https://img.shields.io/codecov/c/github/spotify/heroic.svg\" /></a>\n<a href=\"https://github.com/spotify/heroic/blob/master/LICENSE\"><img src=\"https://camo.githubusercontent.com/dd47e65cd53623e602a1491c03d88ff626f291c2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73706f746966792f6865726f69632e737667\" alt=\"License\" data-canonical-src=\"https://img.shields.io/github/license/spotify/heroic.svg\" /></a>\n<a href=\"https://gitter.im/spotify/heroic\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/0a833308629f72d089428d515a6d3887df94efd1/68747470733a2f2f6261646765732e6769747465722e696d2f73706f746966792f6865726f69632e737667\" alt=\"Join the chat at https://gitter.im/spotify/heroic\" data-canonical-src=\"https://badges.gitter.im/spotify/heroic.svg\" /></a></p><p>A scalable time series database based on Bigtable, Cassandra, and Elasticsearch.\nGo to <a href=\"https://spotify.github.io/heroic/\" rel=\"nofollow\">https://spotify.github.io/heroic/</a> for documentation, please join <code>#heroic at Freenode</code> if you need help or want to chat.</p><p>This project adheres to the <a href=\"https://github.com/spotify/code-of-conduct/blob/master/code-of-conduct.md\">Open Code of Conduct</a>.\nBy participating, you are expected to honor this code.</p><p><strong>Stability Disclaimer:</strong>\nHeroic is an evolving project, and should in its current state be considered <em>unstable</em>.\nDo not use in production unless you are willing to spend time with it, experiment and contribute.\nNot doing so might result in losing your data to goblins. It is currently not on a release schedule and is not versioned. At Spotify we rely on multiple <em>release forks</em> that we actively maintain and flip between.</p><h2>Building</h2><p>Java 8 is required.</p><p>There are some repackaged dependencies that you have to make available, you do\nthis by running <code>tools/install-repackaged</code>.</p><div class=\"highlight highlight-source-shell\"><pre>$ tools/install-repackaged\nInstalling repackaged/x\n...</pre></div><p>After this, the project is built using Maven:</p><div class=\"highlight highlight-source-shell\"><pre>$ mvn package</pre></div><p>This will cause the <code>heroic-dist</code> module to produce a shaded jar that contains\nall required dependencies.</p><h2>Running</h2><p>After building, the entry point of the service is\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-dist/src/main/java/com/spotify/heroic/HeroicService.java\"><code>com.spotify.heroic.HeroicService</code></a>.\nThe following is an example of how this can be run:</p><pre>$ java -cp $PWD/heroic-dist/target/heroic-dist-0.0.1-SNAPSHOT-shaded.jar com.spotify.heroic.HeroicService &lt;config&gt;\n</pre><p>For help on how to write a configuration file, see the <a href=\"http://spotify.github.io/heroic/#!/docs/config\" rel=\"nofollow\">Configuration Section</a> of the official documentation.</p><p>Heroic has been tested with the following services:</p><h4>Logging</h4><p>Logging is captured using <a href=\"http://www.slf4j.org/\" rel=\"nofollow\">SLF4J</a>, and forwarded to\n<a href=\"http://logging.apache.org/log4j/\" rel=\"nofollow\">Log4j</a>.</p><p>To configure logging, define the <code>-Dlog4j.configurationFile=&lt;path&gt;</code>\nparameter. You can use <a href=\"https://github.com/spotify/heroic/blob/master/docs/log4j2-file.xml\">docs/log4j2-file.xml</a> as a base.</p><h2>Testing</h2><p>We run unit tests with Maven:</p><pre>$ mvn test\n</pre><p>A more comprehensive test suite is enabled with the <code>environment=test</code>\nproperty.</p><pre>$ mvn -D environment=test verify\n</pre><p>This adds:</p><ul><li><a href=\"http://checkstyle.sourceforge.net/\" rel=\"nofollow\">Checkstyle</a></li>\n<li><a href=\"http://findbugs.sourceforge.net/\" rel=\"nofollow\">FindBugs</a></li>\n<li><a href=\"http://maven.apache.org/surefire/maven-failsafe-plugin/\" rel=\"nofollow\">Integration Tests with Maven Failsafe Plugin</a></li>\n<li><a href=\"http://eclemma.org/jacoco/\" rel=\"nofollow\">Coverage Reporting with Jacoco</a></li>\n</ul><p>It is strongly recommended that you run the full test suite before setting up a\npull request, otherwise it will be rejected by Travis.</p><h4>Remote Integration Tests</h4><p>Integration tests are configured to run remotely depending on a set of system\nproperties.</p><h5>Elasticsearch</h5><table><thead><tr><th>Property</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>-D elasticsearch.version=&lt;version&gt;</code></td>\n<td>Use the given client version when building the project</td>\n</tr><tr><td><code>-D it.elasticsearch.remote=true</code></td>\n<td>Run Elasticsearch tests against a remote database</td>\n</tr><tr><td><code>-D it.elasticsearch.seed=&lt;seed&gt;</code></td>\n<td>Use the given seed (default: <code>localhost</code>)</td>\n</tr><tr><td><code>-D it.elasticsearch.clusterName=&lt;clusterName&gt;</code></td>\n<td>Use the given cluster name (default: <code>elasticsearch</code>)</td>\n</tr></tbody></table><h5>Datastax</h5><table><thead><tr><th>Property</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>-D datastax.version=&lt;version&gt;</code></td>\n<td>Use the given client version when building the project</td>\n</tr><tr><td><code>-D it.datastax.remote=true</code></td>\n<td>Run Datastax tests against a remote database</td>\n</tr><tr><td><code>-D it.datastax.seed=&lt;seed&gt;</code></td>\n<td>Use the given seed (default: <code>localhost</code>)</td>\n</tr></tbody></table><h5>Bigtable</h5><table><thead><tr><th>Property</th>\n<th>Description</th>\n</tr></thead><tbody><tr><td><code>-D bigtable.version=&lt;version&gt;</code></td>\n<td>Use the given client version when building the project</td>\n</tr><tr><td><code>-D it.bigtable.remote=true</code></td>\n<td>Run Bigtable tests against a remote database</td>\n</tr><tr><td><code>-D it.bigtable.project=&lt;project&gt;</code></td>\n<td>Use the given project</td>\n</tr><tr><td><code>-D it.bigtable.zone=&lt;zone&gt;</code></td>\n<td>Use the given zone</td>\n</tr><tr><td><code>-D it.bigtable.instance=&lt;instance&gt;</code></td>\n<td>Use the given instance</td>\n</tr><tr><td><code>-D it.bigtable.credentials=&lt;credentials&gt;</code></td>\n<td>Use the given credentials file</td>\n</tr></tbody></table><p>The following is an example Elasticsearch remote integration test:</p><pre>$&gt; mvn -P integration-tests \\\n    -D elasticsearch.version=1.7.5 \\\n    -D it.elasticsearch.remote=true \\\n    clean verify\n</pre><h4>Full Cluster Tests</h4><p>Full cluster tests are defined in <a href=\"https://github.com/spotify/heroic/blob/master/heroic-dist/src/test/java\">heroic-dist/src/test/java</a>.</p><p>This way, they have access to all the modules and parts of Heroic.</p><p>The <a href=\"https://github.com/spotify/heroic/blob/master/rpc/jvm\">JVM RPC</a> module is specifically designed to allow for rapid\nexecution of integration tests. It allows multiple cores to be defined and\ncommunicate with each other in the same JVM instance.</p><h4>Coverage</h4><p><a href=\"https://codecov.io/gh/spotify/heroic/branch/master\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ba63688333e04608fe9f9cfdadaec029dec32c58/68747470733a2f2f636f6465636f762e696f2f67682f73706f746966792f6865726f69632f6272616e63682f6d61737465722f6772617068732f696369636c652e737667\" alt=\"Coverage\" data-canonical-src=\"https://codecov.io/gh/spotify/heroic/branch/master/graphs/icicle.svg\" /></a></p><p>There's an ongoing project to improve test coverage.\nClicking the above graph will bring you to <a href=\"https://codecov.io/gh/spotify/heroic/branches/master\" rel=\"nofollow\">codecov.io</a>, where you can find areas to focus on.</p><h4>Speedy Building</h4><p>For a speedy build without tests and checks, you can run:</p><div class=\"highlight highlight-source-shell\"><pre>$ mvn -D maven.test.skip=true package</pre></div><h4>Building a Debian Package</h4><p>This project does not provide a single debian package, this is primarily\nbecause the current nature of the service (alpha state) does not mesh well with\nstable releases.</p><p>Instead, you are encouraged to build your own using the provided scripts in\nthis project.</p><p>First run the <code>prepare-sources</code> script:</p><div class=\"highlight highlight-source-shell\"><pre>$ debian/bin/prepare-sources myrel 1</pre></div><p><code>myrel</code> will be the name of your release, it will be part of your package name\n<code>debian-myrel</code>, it will also be suffixed to all helper tools (e.g.\n<code>heroic-myrel</code>).</p><p>For the next step you'll need a Debian environment:</p><div class=\"highlight highlight-source-shell\"><pre>$ dpkg-buildpackage -uc -us</pre></div><p>If you encounter problems, you can troubleshoot the build with <code>DH_VERBOSE</code>:</p><div class=\"highlight highlight-source-shell\"><pre>$ env DH_VERBOSE=1 dpkg-buildpackage -uc -us</pre></div><h2>Contributing</h2><p>Fork the code at <a href=\"https://github.com/spotify/heroic\">https://github.com/spotify/heroic</a></p><p>Make sure you format the code using the provided formatter in <a href=\"https://github.com/spotify/heroic/blob/master/idea\">idea</a>. Even if you disagree\nwith the way it is formatted, consistency is more important.\nFor special cases, see <a href=\"#bypassing-validation\">Bypassing Validation</a>.</p><p>If possible, limit your changes to one module per commit.\nIf you add new, or modify existing classes. Keep that change to a single commit while maintaing\nbackwards compatible behaviour. Deprecate any old APIs as appropriate with <code>@Deprecated</code> and\nadd documentation for how to use the new API.</p><p>The first line of the commit should be formatted with <code>[module1,module2] my message</code>.</p><p><code>module1</code> and <code>module2</code> are paths to the modules affected with any <code>heroic-</code> prefix stripped.\nSo if your change affects <code>heroic-core</code> and <code>metric/bigtable</code>, the message should say\n<code>[core,metric/bigtable] did x to y</code>.</p><p>If more than <em>3 modules</em> are affected by a commit, use <code>[all]</code>.\nFor other cases, adapt to the format of existing commit messages.</p><p>Before setting up a pull request, run the comprehensive test suite as specified in\n<a href=\"#testing\">Testing</a>.</p><h4>Module Orientation</h4><p>The Heroic project is split into a couple of modules.</p><p>The most critical one is <a href=\"https://github.com/spotify/heroic/blob/master/heroic-component\"><code>heroic-component</code></a>. It contains\ninterfaces, value objects, and the basic set of dependencies necessary to glue\ndifferent components together.</p><p>Submodules include <a href=\"https://github.com/spotify/heroic/blob/master/metric\"><code>metric</code></a>, <a href=\"https://github.com/spotify/heroic/blob/master/suggest\"><code>suggest</code></a>,\n<a href=\"https://github.com/spotify/heroic/blob/master/metadata\"><code>metadata</code></a>, and <a href=\"https://github.com/spotify/heroic/blob/master/aggregation\"><code>aggregation</code></a>. The first three\ncontain various implementations of the given backend type, while the latter\nprovides aggregation methods.</p><p><a href=\"https://github.com/spotify/heroic/blob/master/heroic-core\"><code>heroic-core</code></a> contains the\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-core/src/main/java/com/spotify/heroic/HeroicCore.java\"><code>com.spotify.heroic.HeroicCore</code></a>\nclass which is the central building block for setting up a Heroic instance.</p><p><a href=\"https://github.com/spotify/heroic/blob/master/heroic-elasticsearch-utils\"><code>heroic-elasticsearch-utils</code></a> is a collection of\nutilities for interacting with Elasticsearch. This is separate since we have\nmore than one backend that needs to talk with elasticsearch.</p><p><a href=\"https://github.com/spotify/heroic/blob/master/heroic-parser\"><code>heroic-parser</code></a> provides an Antlr4 implementation of\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-component/src/main/java/com/spotify/heroic/grammar/QueryParser.java\"><code>com.spotify.heroic.grammar.QueryParser</code></a>,\nwhich is used to parse the Heroic DSL.</p><p><a href=\"https://github.com/spotify/heroic/blob/master/heroic-shell\"><code>heroic-shell</code></a> contains\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-shell/src/main/java/com/spotify/heroic/HeroicShell.java\"><code>com.spotify.heroic.HeroicShell</code></a>,\na shell capable of either running a standalone, or connecting to an existing\nHeroic instance for administration.</p><p><a href=\"https://github.com/spotify/heroic/blob/master/heroic-all\"><code>heroic-all</code></a> contains dependencies and references to all modules\nthat makes up a Heroic distribution. This is also where profiles are defined\nsince they need to have access to all dependencies.</p><p>Anything in the <a href=\"https://github.com/spotify/heroic/blob/master/repackaged\"><code>repackaged</code></a> directory is dependencies that\ninclude one or more Java packages that must be relocated to avoid conflicts.\nThese are exported under the <code>com.spotify.heroic.repackaged</code> groupId.</p><p>Finally there is <a href=\"https://github.com/spotify/heroic/blob/master/heroic-dist\"><code>heroic-dist</code></a>, a small project that depends on\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-all\"><code>heroic-all</code></a>, <a href=\"https://github.com/spotify/heroic/blob/master/heroic-shell\"><code>heroic-shell</code></a>, and a logging\nimplementation. Here is where everything is bound together into a distribution\n— a shaded jar. It also provides the entry-point for services, namely\n<a href=\"https://github.com/spotify/heroic/blob/master/heroic-dist/src/main/java/com/spotify/heroic/HeroicService.java\"><code>com.spotify.heroic.HeroicService</code></a>.</p><h4>Bypassing Validation</h4><p>To bypass automatic formatting and checkstyle validation you can use the\nfollowing stanza:</p><div class=\"highlight highlight-source-java\"><pre>// @formatter:off\nfinal List&lt;String&gt; list = ImmutableList.of(\n   \"Welcome to...\",\n   \"... The Wild West\"\n);\n// @formatter:on</pre></div><p>To bypass a FindBugs error, you should use the <code>@SupressFBWarnings</code> annotation.</p><div class=\"highlight highlight-source-java\"><pre>@SupressFBWarnings(value=\"FINDBUGS_ERROR_CODE\", justification=\"I Know Better Than FindBugs\")\npublic class IKnowBetterThanFindbugs() {\n    // ...\n}</pre></div><h2>HeroicShell</h2><p>Heroic comes with a shell that contains many useful tasks, these can either\nbe run in a readline-based shell with some basic completions and history, or\nstandalone.</p><p>You can use the following helper script to run the shell directly from the\nproject.</p><div class=\"highlight highlight-source-shell\"><pre>$ tools/heroic-shell [opts]</pre></div><p>There are a few interesting options available, most notably is <code>--connect</code> that\nallows the shell to connect to a remote heroic instance.</p><p>See <code>-h</code> for a full listing of options.</p><p>You can run individual tasks in <em>standalone</em> mode, giving you a bit more\noptions (like redirecting output) through the following.</p><div class=\"highlight highlight-source-shell\"><pre>$ tools/heroic-shell &lt;heroic-options&gt; -- com.spotify.heroic.shell.task.&lt;task-name&gt; &lt;task-options&gt;</pre></div><p>There are also profiles that can be activated with the <code>-P &lt;profile&gt;</code> switch,\navailable profiles are listed in <code>--help</code>.</p><h2>Repackaged Dependencies</h2><p>These are third-party dependencies that has to be repackaged to avoid binary\nincompatibilities with dependencies.</p><p>Every time these are upgraded, they must be inspected for new conflicts.\nThe easiest way to do this, is to build the project and look at the warnings\nfor the shaded jar.</p><pre>$&gt; mvn clean package -D maven.test.skip=true\n...\n[WARNING] foo-3.5.jar, foo-4.5.jar define 10 overlapping classes:\n[WARNING]   - com.foo.ConflictingClass\n...\n</pre><p>This would indicate that there is a package called foo with overlapping\nclasses.</p><p>You can find the culprit using the <code>dependency</code> plugin.</p><pre>$&gt; mvn package dependency:tree\n</pre>"}}]}},"pageContext":{"alternative_id":11765}}