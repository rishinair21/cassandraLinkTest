{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"How To Configure and Run Cassandra on OpenShift – OpenShift Blog","alternative_id":298,"content":"<p><a href=\"http://cassandra.apache.org\" rel=\"nofollow\">Cassandra</a> is an open-source, distributed, decentralized, horizontally scalable, and highly available NoSQL database.  It is based on <a href=\"http://aws.amazon.com/dynamodb\" rel=\"nofollow\">Amazon Dynamo</a> distribution model and its data model is based on <a href=\"http://research.google.com/archive/bigtable.html\" rel=\"nofollow\">Google BigTable</a>. Cassandra does not have any notion of master/slave as all of its nodes are the same. This helps Cassandra in becoming fault-tolerant and avoiding single point of failure.  The purpose of this blog is to show users how they can install Cassandra on OpenShift platform as a service.  In case you want to learn more about Cassandra please read the <a href=\"http://www.datastax.com/docs/1.1/index\" rel=\"nofollow\">documentation</a>.</p>\n<p>In this blog, we will be doing single node Cassandra installation. Please note that whole point of using Cassandra is fault tolerance and high availability, so single node installation is only good for a POC and getting your hands dirty with Cassandra.  This blog is divided into two parts:</p>\n<ol><li>How to install Cassandra running on a DIY application </li>\n<li>How you can use Cassandra as an embedded cartridge in a simple Java application.</li>\n</ol><h2>Prerequisites</h2>\n<p>Before we can start with deploying Cassandra on OpenShift you need to do the following :</p>\n<ol><li>\n<strong>Sign up for an OpenShift Account : </strong>If you don’t already have an OpenShift account, head on over to the <a href=\"http://www.openshift.com/\" target=\"_blank\" rel=\"nofollow\">website</a> and <a href=\"https://www.openshift.com/app/account/new\" target=\"_blank\" rel=\"nofollow\">sign up</a>. It is completely free and Red Hat gives every user three free Gears on which to run your applications. At the time of this writing, the combined resources allocated for each user is 1.5 GB of memory and 3 GB of disk space.</li>\n<li> <strong>Install the client tools on your machine : </strong>The OpenShift client tools are written in a very popular programming language called Ruby. With OSX 10.6 or later and most Linux distributions, ruby is installed by default so installing the client tools is a snap. Simply issue the following command on your terminal application:\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">sudo gem install rhc</pre></div>\n</li>\n<li>\n<strong>Setting up OpenShift : </strong>The rhc client tool makes it very easy to setup your openshift instance with ssh keys, git and your applications namespace. The namespace is a unique name per user which becomes part of your application url. For example, if your namespace is cix and application name is <em>cassandra</em> then url of the application will be <a href=\"http://cassandra-cix.rhcloud.com/\" rel=\"nofollow\">http://cassandra-cix.rhcloud.com/</a>. The command is shown below\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">rhc setup -l openshift_login</pre></div>\n</li>\n</ol><h2>Part 1 : Installing Cassandra on a DIY application</h2>\n<p>After you have signed up for OpenShift account and ran <em>rhc setup</em> command. The next step is to create a diy application using rhc command line tool. OpenShift’s powerful Do-It-Yourself (DIY) feature allows you to use your own Languages and Data Stores if the built-in Perl, Ruby, PHP, Python, and Java support doesn’t suit you. People have used it to run clojure,jruby,go, couchdb, redis and many other programming languages and datastores. OpenShift can run any binary that will run on RHEL 6.2 x64 because the OpenShift execution environment is a carefully secured Red Hat Enterprise Linux 6.2 running on x64 systems.</p>\n<h3>Creating Cassandra DIY Application</h3>\n<p>To create a diy application execute the command shown below.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">rhc app create cassandra diy</pre></div>\n<p>This will create an application container for us, called a gear, and setup all of the required SELinux policies and cgroup configuration. OpenShift will also setup a private git repository for you and clone the repository to your local system. Finally OpenShift will propagate the DNS to outside world.</p>\n<p>The template code generated by OpenShift has nothing interesting as it only contains a very simple ruby based http server listening on 8080 port and serves index.html file. The testrubyserver.rb and index.html exists in diy folder.</p>\n<h3>Pulling the code from Github</h3>\n<p>To get started with Cassandra quickly I have created a quickstart application which we can use to install Cassandra on OpenShift. The code is on github at <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart\" rel=\"nofollow\">https://github.com/shekhargulati/cassandra-openshift-quickstart</a>. The quickstart downloads the latest cassandra tar, untar it, make configuration changes, and finally starts the Cassandra database. I will talk about it in detail latter in the post. Execute the git commands shown below to pull the quickstart code.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">git remote add upstream <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart.git\" title=\"https://github.com/shekhargulati/cassandra-openshift-quickstart.git\">https://github.com/shekhargulati/cassandra-openshift-quickstart.git</a>\n \ngit pull -s recursive -X theirs upstream master</pre></div>\n<h3>Pushing the code to OpenShift</h3>\n<p>Now that you have Cassandra quickstart on your machine, let’s push the code to OpenShift which will do all the necessary steps required to install Cassandra on OpenShift.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">git push</pre></div>\n<p>After you execute git push, please wait for a minute as this command will do all the necessary steps required to install Cassandra on your diy application. After git push succeeds, ssh into the application gear as shown below.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">ssh f677086ae4b84936XXXXefrfrfr3f8e53f43eb56@cassandra-demo.rhcloud.com</pre></div>\n<p>Now if you run ps -ef|grep cassandra you will find that cassandra Java process is running as shown below.</p>\n<p><img src=\"https://blog.openshift.com/wp-content/uploads/imported/View_Cassandra_Process.preview.png\" alt=\"View Cassandra Process\" /></p>\n<h3>Taking Cassandra to Test drive</h3>\n<p>Now that we are sure Cassandra is running on the OpenShift gear, lets test it by creating some sample keyspace and column family. Then we will install some data into Column Family. Cassandra provides a command line utility called CQL which we can use for testing. To run CQL go to cassandra/bin folder in $OPENSHIFT_DATA_DIR and run cqlsh as shown below.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">cd app-root/data/cassandra/bin/\n./cqlsh $OPENSHIFT_DIY_IP 19160 -2</pre></div>\n<p>You can also run DESCRIBE schema command which will output the Cassandra system keyspace schema.</p>\n<p>Lets now create our keyspace, column family. Execute the commands shown below.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">CREATE KEYSPACE MyKeyspace with strategy_class = 'org.apache.cassandra.locator.SimpleStrategy' AND strategy_options:replication_factor = 1;\n \nuse MyKeyspace;\nCREATE TABLE users (\n  user_name varchar PRIMARY KEY,\n  password varchar,\n  gender varchar,\n  session_token varchar,\n  state varchar,\n  birth_year bigint\n);\n \nINSERT INTO MyKeyspace.users(user_name,password,gender,session_token,state,birth_year) VALUES ( 'shekhar','password','M','session','Haryana',1984);</pre></div>\n<p>You can also view the data using SELECT query as shown below.<br /><img src=\"https://blog.openshift.com/wp-content/uploads/imported/Select_Command_Cassandra.preview.png\" alt=\"Cassandra Select Statement\" /></p>\n<h3>Under the Hood</h3>\n<p>Now that we have got Cassandra running on OpenShift, let’s take a look at how we achieved that. The changes that we made in the code are in three files which exists in .openshift/action_hooks folder inside your application directory. Let’s take a look at all these files one by one.</p>\n<ol><li>\n<strong>deploy</strong> : The deploy hook gets invoked after dependencies of an application are resolved but before starting back the application again. In this script we create a new cassandra directory under $OPENSHIFT_DATA_DIR, download the tar file,create directories required by Cassandra to keep application data, logs, etc. And finally, update some configuration files to make Cassandra work. The configuration file we change are cassandra.yaml, log4j-server.properties, and cassandra-env.sh. The changes that we make in these files are related to port changes, using $OPENSHIFT_DIY_IP instead of localhost,setting memory, etc. You can view the file on <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/deploy\" rel=\"nofollow\">github</a>.</li>\n<li>\n<strong>start : </strong>The start script encapsulate the logic required to start the application. So, this script is where we start the cassandra database. You can view the start script on <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/start\" rel=\"nofollow\">github</a>.</li>\n<li>\n<strong>stop : </strong>The stop script encapsulate the logic to stop the application. Here we find the cassandra process id and kill the process. You can view the stop script on <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/stop\" rel=\"nofollow\">github</a>.</li>\n</ol><p>That’s the only changes that we had to make in order to run Cassandra on OpenShift.</p>\n<h2>Part 2 : Using Cassandra as an Embedded Cartridge from with in a Java application</h2>\n<p>So, far we have seen how you can install cassandra on a diy application. But, it would make more sense to use Cassandra as an embedded cartridge from other application type like Java, PHP,Python, Ruby supported by OpenShift. This way you don’t have to install any other server or runtime for your application. In this part, we will create a very simple Java application which will be deployed on tomcat via JBoss EWS cartridge.</p>\n<h3>Creating Tomcat Application</h3>\n<p>The first step that we will be doing is create a tomcat application called cassandrajavademo. Execute the command shown below to create the application.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">rhc app create cassandrajavademo tomcat-6</pre></div>\n<h3>Updating OpenShift Action Hook Scripts to install Cassandra</h3>\n<p>To install cassandra we have to update three scripts deploy, pre_start_jbossews, pre_stop_jbossews. These files will contain the same content as contained by <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/deploy\" rel=\"nofollow\">deploy</a>, <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/start\" rel=\"nofollow\">start</a>, and <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart/blob/master/.openshift/action_hooks/stop\" rel=\"nofollow\">stop</a> scripts we created in Part1.So, please update them accordingly. The only one change that we have to make is that we will be creating the keyspace and column family in pre_start_jbossews. So,please add the following line at the end.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">bin/cassandra-cli -h $OPENSHIFT_DIY_IP -p 19160 -f $OPENSHIFT_REPO_DIR/cassandra-tutorial.txt</pre></div>\n<h3>Java code to interact with Cassandra</h3>\n<p>Finally, I have written a very simple Spring MVC application which just has one controller which write data into cassandra and you can view the data by ssh’ing to the instance and running cqlsh command line utility. The controller is shown below.</p>\n<div class=\"geshifilter\"><pre class=\"text geshifilter-text\">@Controller\npublic class CassandraController {\n \n    @RequestMapping(value = \"/cassandra\", method = RequestMethod.GET)\n    public String process() throws TException, InvalidRequestException,\n            UnavailableException, UnsupportedEncodingException,\n            NotFoundException, TimedOutException {\n \n        String host = System.getenv(\"OPENSHIFT_INTERNAL_IP\");\n        int port = 19160;\n        TTransport transport = new TFramedTransport(new TSocket(host,port));\n        TProtocol protocol = new TBinaryProtocol(transport);\n        Cassandra.Client client = new Cassandra.Client(protocol);\n        transport.open();\n \n        client.set_keyspace(\"tutorials\");\n \n        // define column parent\n        ColumnParent parent = new ColumnParent(\"User\");\n \n        // define row id\n        ByteBuffer rowid = ByteBuffer.wrap(\"100\".getBytes());\n \n        // define column to add\n        Column username = new Column();\n        username.setName(\"username\".getBytes());\n        username.setValue(\"shekhargulati\".getBytes());\n        username.setTimestamp(System.currentTimeMillis());\n \n        // define consistency level\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ONE;\n \n        // execute insert\n        client.insert(rowid, parent, username, consistencyLevel);\n \n        Column password = new Column();\n        password.setName(\"password\".getBytes());\n        password.setValue(\"password\".getBytes());\n        password.setTimestamp(System.currentTimeMillis());\n        client.insert(rowid, parent, password, consistencyLevel);\n \n        // release resources\n        transport.flush();\n        transport.close();\n        return \"hello\";\n    }\n \n}</pre></div>\n<h3>Push code to OpenShift</h3>\n<p>Finally push the code to github which will install cassandra, build a new war and deploy it on tomcat. Now, if you hit <a href=\"http://cassandrajavademo-cix.rhcloud.com/cassandra\" title=\"http://cassandrajavademo-cix.rhcloud.com/cassandra\">http://cassandrajavademo-cix.rhcloud.com/cassandra</a> a new row will be created in Cassandra and you will see “Hello from Cassandra”.</p>\n<p>Source code of the application is available on my <a href=\"https://github.com/shekhargulati/cassandra-openshift-quickstart-java\" rel=\"nofollow\">github repository</a></p>\n<h2>Conclusion</h2>\n<p>In this blog, I showed you how easy it is to extend OpenShift by installing Cassandra on top of it. What are you waiting for, Try it now!</p>\n<h2>What’s Next?</h2>\n<ul><li>\n<a href=\"https://www.openshift.com/app/account/new\" rel=\"nofollow\">Sign up</a> for OpenShift Online</li>\n<li>Interested in a private PaaS? <a href=\"https://engage.redhat.com/forms/contact-sales-openshift\" rel=\"nofollow\">Register</a> for an evaluation of <a href=\"https://www.openshift.com/enterprise-paas\" rel=\"nofollow\">OpenShift Enterprise</a>\n</li>\n<li>Need Help? <a href=\"https://www.openshift.com/forums\" rel=\"nofollow\">Post</a> your questions in the forums</li>\n<li>\n<a href=\"https://twitter.com/openshift\" rel=\"nofollow\">Follow us</a> on Twitter</li>\n</ul>"}}]}},"pageContext":{"alternative_id":298}}