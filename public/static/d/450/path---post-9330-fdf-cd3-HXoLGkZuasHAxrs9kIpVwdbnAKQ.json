{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"doanduyhai/killrchat","alternative_id":9330,"content":"<h3>\n      \n      README.md\n    </h3><article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>A hand's on exercise for Cassandra 2.1.</p>\n<p>This hands-on will make you, step by step with unit tests, create a working chat application using</p>\n<ul><li><strong><a href=\"http://planetcassandra.org/cassandra\" rel=\"nofollow\">Apache Cassandraâ„¢</a></strong></li>\n<li><strong><a href=\"http://www.achilles.io\" rel=\"nofollow\">Achilles</a></strong></li>\n<li><strong><a href=\"http://projects.spring.io/spring-boot\" rel=\"nofollow\">Spring Boot</a></strong></li>\n<li><strong><a href=\"https://angularjs.org\" rel=\"nofollow\">AngularJS</a></strong> + <strong><a href=\"http://angular-ui.github.io/bootstrap\" rel=\"nofollow\">UI Bootstrap</a></strong></li>\n</ul><p>The hands-on will focus on the data modelling part, you need to:</p>\n<ol><li>understand the data model (tables)</li>\n<li>implement the services to make the tests pass using <strong><a href=\"http://www.achilles.io\" rel=\"nofollow\">Achilles</a></strong></li>\n</ol><p>All the front-end, as well as the REST resource and all Spring configuration config and other glue code is provided as a\nconvenience so that participants can focus solely on the data modelling and service layer.</p>\n<p>For object mapping, we use <strong><a href=\"http://www.achilles.io\" rel=\"nofollow\">Achilles</a></strong> which provides many tools to make development more effective and easier. We'll\nuse the <strong><a href=\"https://github.com/doanduyhai/Achilles/wiki/Unit-testing#usage\">JUnit rule support</a></strong> from <strong><a href=\"http://www.achilles.io\" rel=\"nofollow\">Achilles</a></strong> to start an embedded Cassandra in memory for unit testing.</p>\n<p>Once all the exercises are done, we can have some fun using the real chat!</p>\n<p>If you're not familiar with <strong>Cassandra</strong>, please take a look at the <a href=\"https://raw.github.com/doanduyhai/killrchat/master/KillrChat%20Hands%20On%20-%20Cassandra%20Intro.pdf\">introduction slides</a></p>\n<p>For a presentation of <strong>KillrChat</strong>, look at the slides <a href=\"https://raw.github.com/doanduyhai/killrchat/master/KillrChat%20Hands%20On%20-%20Exercises%20Handbook.pdf\">here</a></p>\n<blockquote>\n<p>Warning! You'll need a recent and decent browser (no IE8) to make the chat front-end work:\nIE10, Chrome, FireFox ...</p>\n</blockquote>\n<blockquote>\n<p>Warning! You should have Maven and Java (1.7+) installed and functionnal, other component will be installed automatically</p>\n</blockquote>\n<p>First clone the repository with <code>git clone https://github.com/doanduyhai/killrchat.git</code>\nThen enter the folder <code>cd killrchat</code></p>\n<h2><a href=\"#development-mode\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-development-mode\"></a>Development mode</h2>\n<p>To run the application in the development mode:</p>\n<pre>killrchat&gt; mvn clean test\nkillrchat&gt; mvn spring-boot:run -Pdev\n</pre>\n<p>When running the application in dev mode, <strong>Achilles</strong> will start an embedded Cassandra server and create\nthe following data folders:</p>\n<ol><li><code>/tmp/killrchat_cassandra/data</code></li>\n<li><code>/tmp/killrchat_cassandra/commitlog</code></li>\n<li><code>/tmp/killrchat_cassandra/saved_caches</code></li>\n</ol><p>You can change those default values in the <code>src/main/resources/config/application.properties</code> file.</p>\n<p>Then connect to the chat by opening your browser at\n<a href=\"http://localhost:8080/killrchat/index.html\" rel=\"nofollow\">http://localhost:8080/killrchat/index.html</a>.</p>\n<h2><a href=\"#production-mode\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-production-mode\"></a>Production mode</h2>\n<p>To run the application in the production mode:</p>\n<pre>killrchat&gt; mvn clean test\nkillrchat&gt; mvn spring-boot:run -Pprod\n</pre>\n<p>When running the application in prod mode, <strong>Achilles</strong> will connect to an existing Cassandra server. You can\nconfigure the server host and port in the the <code>src/main/resources/config/application.properties</code> file.\nBy default <strong>Achilles</strong> will execute the <code>src/main/resources/cassandra/schema_creation.cql</code> script to create the\n<code>killrchat</code> keyspace and appropriate tables.</p>\n<p>Then connect to the chat by opening your browser at\n<a href=\"http://localhost:8080/killrchat/index.html\" rel=\"nofollow\">http://localhost:8080/killrchat/index.html</a>.</p>\n<p>To deploy the application in multiple back-end servers, you will need to reconfigure the messaging system in the\n<strong><code>ChatRoomResource</code></strong> and <strong><code>MessageResource</code></strong>. For the hand's on, we use an in-memory messaging system but for\nproduction you'd probably want to plugin a distributed messaging broker like RabbitMQ.</p>\n<h2><a href=\"#packaging-the-application\" aria-hidden=\"true\" class=\"anchor\" id=\"user-content-packaging-the-application\"></a>Packaging the application</h2>\n<p>To package <strong>KillrChat</strong> and build a stand-alone Java jar archive, type <code>mvn package</code>. It will generate a\n<strong>killrchat-1.0.war</strong> file in the <code>target</code> folder</p>\n<p>To run the application in development mode:</p>\n<pre>&gt; java -jar killrchat-1.0.war --spring.profiles.active=dev -Dlogback.configurationFile=logback_dev.xml\n</pre>\n<p>To run the application in production mode:</p>\n<pre>&gt; java -jar killrchat-1.0.war --spring.profiles.active=prod -Dlogback.configurationFile=logback_prod.xml\n</pre>\n<p>The data model for chat room message is still not perfect because it is a wide row. Typically the partition will grow\nover time and performance will suffer.</p>\n<p>The solution is to use <strong><a href=\"http://www.datastax.com/dev/blog/advanced-time-series-with-cassandra\" rel=\"nofollow\">bucketing</a></strong> techniques but it is an advanced data modelling topic, far beyond the goal of\nthis hands-on.</p>\n<p>Alternatively, we can use the <strong><a href=\"http://www.datastax.com/dev/blog/datetieredcompactionstrategy\" rel=\"nofollow\">DateTieredCompactionStrategy</a></strong> to make reading recent messages faster.</p>\n</article>"}}]}},"pageContext":{"alternative_id":9330}}