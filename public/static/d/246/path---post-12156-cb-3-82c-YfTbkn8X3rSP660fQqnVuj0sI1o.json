{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Cassandra’s Place in the NoSQL World - Instaclustr","alternative_id":12156,"content":"<header id=\"page-masthead\"><div id=\"page-content\"><div class=\"container\"><div class=\"row\"><div class=\"col-md-6 col-md-offset-0 col-sm-8 col-sm-offset-2\"><div class=\"primary first-p-bold\"><p>A question that we commonly get asked is “how does <a href=\"https://www.instaclustr.com/apache-cassandra/\">Apache Cassandra</a> compare to NoSQL technology X?”. While the easy answer is to say “It’s just better”, the truth of course isn’t that simple. NoSQL encompasses a much more diverse range of technologies than the relational database world with specific NoSQL products suited to particular use cases.</p><p>The definition I often use (OK, made up) for NoSQL is any database technology designed for a more specialised use case to in order to overcome the limitations of RDBMS technology in terms of:</p><ul><li>data size;</li> <li>transaction throughout;</li> <li>reliability and manageability;</li> <li>flexibility of data schema; and/or</li> <li>cost of hardware.</li> </ul><p>One implication of this definition is that it doesn’t make sense to say that NoSQL generally is “better” than relational databases. If you want to compare  NoSQL technology X with technology Y then you need to understand what you want to use it for.</p><p>Perhaps the better question to ask is which use cases are <a href=\"https://www.instaclustr.com/solutions/managed-apache-cassandra/\">Cassandra </a>and other popular NoSQL technologies such as <a href=\"https://www.mongodb.com/\">MongoDB</a> and <a href=\"https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html\">Hadoop/HDFS</a> best suited to? The table below provides a summary of the characteristics</p><p>In summary, Cassandra is a great choice where:</p><ul><li>you need an operational database that can extend to supporting analytics;</li> <li>you don’t want to be limited in ability to scale; and</li> <li>you want the highest possible levels of availability.</li> </ul><table><tbody><tr><td> </td><td><b>Cassandra</b></td> <td><b>Hadoop/HDFS</b></td> <td><b>Mongo</b></td> </tr><tr><td><strong>Primary use cases</strong></td> <td>Large-scale operational database; <p>Structured data store for analytics engines</p></td> <td>Big data analytics database</td> <td>Flexible JSON database for rapid development</td> </tr><tr><td><strong>Development Model</strong></td> <td>Apache Foundation community maintained</td> <td>Apache Foundation <p>community maintained</p></td> <td>Proprietary development released under AGPL open source</td> </tr><tr><td><strong>Reliability</strong></td> <td>Extreme reliability, masterless and replicated. No failover required. <p>Full bi-directional multi-datacenter support</p></td> <td>High availability with automated master fail-over.</td> <td>High availability with multiple replicas and automated failover.</td> </tr><tr><td><strong>Read/write latency</strong></td> <td>Typically 5-15 milliseconds for standard operations. Consistent as dataset grows.</td> <td>Engineered for batch throughput rather than latency.</td> <td>Similar to Cassandra for simple operations. More complex querying capability can lead to greater variability.</td> </tr><tr><td><strong>Scalability</strong></td> <td>No practical limits. Operational clusters in the multi-PB range<br />(eg Apple).</td> <td>No practical  limits. Multi-PB scale not uncommon.</td> <td>Can scale to TB and beyond but requires sharding and is therefore less manageable at very large scale.</td> </tr><tr><td><strong>Query Language</strong></td> <td>CQL, an SQL-like language</td> <td>Map-reduce API plus many add-ons available (inc SQL)</td> <td>API and JSON based queries. </td> </tr><tr><td><strong>Data Model</strong></td> <td>Structured tables but allows for sparse value and multi-value fields</td> <td>Schema-less</td> <td>Schema-less JSON</td> </tr></tbody></table></div></div></div></div></div></header>"}}]}},"pageContext":{"alternative_id":12156}}