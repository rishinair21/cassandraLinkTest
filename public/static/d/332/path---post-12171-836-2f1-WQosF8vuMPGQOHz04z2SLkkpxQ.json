{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Surveying the Cassandra-compatible database landscape - Instaclustr","alternative_id":12171,"content":"<p>The popularity of <a href=\"https://www.instaclustr.com/apache-cassandra/\">Apache Cassandra</a> and the applicability of it’s development model has seen it clearly emerge as the leading NoSQL technology for scale, performance and availability. One only needs to survey the ever increasing range of Cassandra-compatible options now available on the market to gain a further proof point to its popularity. </p><p>As we get started with 2018, the range of Cassandra-compatible offerings available on the market include:</p><ul><li>Datastax Enterprise</li> <li>ScyllaDB* (<em><strong>Please note that due to extremely limited customer demand, we no longer support ScyllaDB. Please contact our <a href=\"mailto:sales@instaclustr.com\">Sales Team</a> should have you have any further questions.)</strong></em></li> <li>Yugabyte</li> <li>Azure Cosmos DB</li> </ul><p>We all know that the database is a key foundational technology for any application. You need to ensure you choose a product that meets the functional requirements of your use case, is robust and scalable, makes efficient use of compute resources and will be usable by your dev team and supportable by your ops team now and into the future.  Selection of the database technology for a new application therefore deserves rigorous consideration of your specific requirements.</p><p>This blog post surveys the current state and key considerations for people evaluating these offerings and finishes with an overview of some of in progress development for Apache Cassandra that should ensure it remains the default, and best, choice for the majority of use cases.</p><p>This post provides some high-level considerations that should help you to narrow down contenders for evaluation. For each technology we consider:</p><ul><li>Breadth of production deployment – How widely is the product used in production?</li> <li>Licensing model – Is the product open source? If so, what open source licensing model is used and what are the implications of that?</li> <li>Strength of community – Is the product dependent on a single vendor for ongoing support or is it backed by a range of invested organisations? Does the breadth of user community allow access to required expertise?</li> <li>Functionality – Does the technology have any particular functional advantages or limitations that stand out for the comparable technologies?</li> <li>Scalability and performance – Has the system demonstrated ability to operate at scale? Is it able to deliver low latencies and make efficient use of available compute resources?</li> </ul><h2>Datastax Enterprise</h2><p>Datastax Enterprise (DSE) is a closed source product derived from Apache Cassandra. For core Cassandra features, it is driver level compatible with Apache Cassandra. Online migration from DSE to Apache Cassandra can be achieved with minimal effort where DSE proprietary features have not been used. However, DSE contains a number of extensions that are not included in Apache Cassandra and such as bundling Spark and Solr into the same application and providing customer security and compaction providers.</p><p><strong><i>Breadth of production deployment</i><i>: </i></strong>DSE has been used in production by many organisations over several years.</p><p><strong><i>Licensing model:</i></strong> DSE is a closed-source, proprietary product derived from open source products. Use of DSE requires payment of a licensing fee to Datastax.</p><p><strong><i>Strength of community:</i></strong> As a proprietary product, support and enhancement of DSE is entirely reliant on Datastax. However, DSE does build on contributions from the communities for the underlying open source products.</p><p><strong><i>Functionality:</i></strong> Functional enhancements in DSE vs the open source products are generally enterprise-specific features (such as LDAP authentication integration), relatively simple integration of the other included products (Spark, Solr) and the entirely proprietary DSE Graph graph database functionality.</p><p><strong><i>Scalability and Performance</i></strong><strong>:</strong> In general, DSE performance will be very similar to the underlying open source productions. However, Datastax does claim some proprietary performance improvements.</p><h2>Scylla*</h2><p>Scylla is effectively a re-implementation of Apache Cassandra in C++ with an aim of providing highly optimised performance. From a functional point of view, it provides most, but not all, functions of Cassandra and generally doesn’t aim to provide additional functions to Cassandra. It is driver-level compatible with Apache Cassandra but migration to/from Scylla requires an application-level migration strategy such as dual-writes.</p><p><strong><i>Breadth of production deployment: </i></strong> Scylla 1.0 was released in March 2016. Several organisations are reported as running it in production although level of production deployment would be a small fraction of Apache Cassandra deployment.</p><p><strong><i>Licensing Model</i></strong><strong>:</strong> Scylla is open source but licensed under the AGPL (Gnu Affero General Public Use Licence). This license requires that any organisation making a modified version of the product (even for internal use) must publish those modifications. As a result of this requirement, many organisations (particularly large tech orgs that tend to adopt and drive enhancements to open source projects) will not adopt software using the AGPL.</p><p><strong><i>Strength of Community:</i></strong> Scylla is largely dependent on a single company (ScyllaDB) for all development and support.</p><p><strong><i>Functionality</i></strong><strong>:</strong> Scylla generally aims to be functionally compatible with Cassandra although not all features are currently available (light weight transactions being one notable exception).</p><p><strong><i>Scalability and Performance:</i></strong> Improved performance is Scylla’s main objectives. Scylla has published many benchmarks demonstrating substantial performance improvements. However, the most significant gains are seen when running large machines with high performance IO and performance gains in more typical cloud deployments (for manageability) are often less than these benchmarks.</p><p><em><strong>*Please note due to extremely limited customer demand, we no longer support ScyllaDB. Please contact our <a href=\"mailto:sales@instaclustr.com\">Sales Team</a> should have you have any further questions.</strong></em></p><h2>Yugabyte</h2><p>Yugabyte is a new database aiming to offer both SQL and NoSQL functionality in a single database. It is driver compatible with Cassandra (although there is also a Yugabyte-specific fork of the Cassandra driver) and also Redis with announced plans for PostgresSQL compatibility.</p><p><strong><i>Breadth of production deployment:</i></strong> Yugabyte is currently in Beta with production release planned for 2018.</p><p><strong><i>Licensing Model</i></strong><strong>:</strong> Yugabyte is Apache 2.0 Licensed open source software. A closed source “enterprise” edition is also offered with additional manageability and other features.</p><p><strong><i>Strength of Community: </i></strong>Yugabyte is a new product developed by a single company (Yugabyte) and all development and support of the product is dependant on this company.</p><p><strong><i>Functionality:</i></strong> The core Yugabyte engine supports full ACID transactions and a different replication model to Apache Cassandra. Presumably additional features will also be required for PostgresSQL compatibility. While Yugabyte claims compatibility with core Cassandra features it seems likely that, given the differences in underlying engine models, there will be semantic differences that are not readily apparent (for example, Yugabyte already claims differences in consistency semantics).</p><p><strong><i>Scalability and Performance:</i></strong> Yugabyte have published benchmarks claiming improved performance for some scenarios. However, tuning of the Apache Cassandra configuration for their comparison benchmarks was extremely poor and, in any event, the very different architecture of Yugabyte is likely to lead to quite different performance characteristics versus Apache Cassandra depending on the use case.</p><h2>Azure Cosmos DB</h2><p>Cosmos DB is a Microsoft Azure offering designed to provide a globally distributed database with NoSQL functionality. It supports multiple APIs including SQL, Javascript, Gremlin (graph), MongoDB and Cassandra.</p><p><strong><i>Breadth of production deployment: </i></strong>Cosmos DB was released in May 2017 although it builds on Azure DocumentDB which was released in 2014. The Cassandra API was released into preview in November 2017.</p><p><strong><i>Licensing model:</i></strong> Cosmos DB is a proprietary, closed source, technology offered only as an Azure service.</p><p><strong><i>Strength of Community:</i></strong> Cosmos DB is developed and supported by Microsoft.</p><p><strong><i>Functionality: </i></strong> Cosmos DB claims Cassandra compatibility but without providing a detailed breakdown of supported/not support Cassandra features and it seems unlikely there would be complete feature compatibility (at a minimum, the approach to consistency levels is quite different). The documented strategy to import data from Cassandra in Cosmos DB is via CQLshell COPY FROM / COPY TO commands which export data via CSV and generally aren’t suitable for production-size datasets.</p><p><strong><i>Scalability and Performance:</i></strong> Cosmos provide latency SLAs for the 99th percentile which are comparable to other latency focus offerings such as Scylla. Cost effectiveness at scale is hard to gauge and is dependent on Azure pricing.</p><h2>Apache Cassandra</h2><p>Apache Cassandra is the inspiration and genesis for all of these offerings. From it’s 1.0 release in October 2011, Apache Cassandra is now at version 3.11 with version 4.0 in development. It aims to provide virtually unlimited scalability and the ability to run with highest levels of availability and full global distribution. Many household name internet services (eg Apple, Uber, Spotify, Instagram) rely on Apache Cassandra as a core component of their architecture.</p><p><strong><i>Breadth of production deployment</i></strong><strong>:</strong> Production deployment of Apache Cassandra are likely an order magnitude greater than any of the other products mentioned above.</p><p><strong><i>Licensing model:</i></strong> Apache Cassandra  is Apache 2.0 Licensed open source software.</p><p><strong><i>Strength of Community:</i></strong> Apache Cassandra development is governed by the Apache Foundation, the same organisation and governance rules that some of the most successful open source projects such as Hadoop, Spark, Tomcat and the original Apache web server. Apache Cassandra committers are employed by close to 10 different companies with regular contributions from a wide range of companies. Apple, as a key user, is one of the most active contributors to the project.</p><p><strong><i>Functionality</i></strong><strong>:</strong> While some of the other products above are aiming to extend the functionality of Cassandra, Cassandra define the core feature set that the others are aiming to emulate.</p><p><strong><i>Scalability and Performance</i></strong><strong>:</strong> There can be little question as the the scalability of Cassandra with production clusters in the thousands of nodes holding petabytes of data and service millions of operations per second. The Cassandra community is alway working to improve the performance of Cassandra with several major performance initiatives currently underway in the project (eg <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-13476\">CASSANDRA-13476</a>). </p>"}}]}},"pageContext":{"alternative_id":12171}}