{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"elubow/titan-gremlin","alternative_id":11952,"content":"<article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p style=\"text-align: center;\"><a target=\"_blank\" href=\"https://raw.githubusercontent.com/elubow/titan-gremlin/master/titan-docker-logo.png\"><img src=\"https://raw.githubusercontent.com/elubow/titan-gremlin/master/titan-docker-logo.png\" width=\"250\" alt=\"image\" /></a></p>\n<p><a href=\"http://titandb.io/\" rel=\"nofollow\">Titan</a> is a free, open source database that is capable of processing\nextremely large graphs and it supports a variety of indexing and storage backends,\nwhich makes it easier to extend than some popular NoSQL Graph databases.</p>\n<p>This docker image instantiaties a Titan graph database that is capable of\nintegrating with an ElasticSearch container (Indexing) and a Cassandra container (Storage).</p>\n<p>The default distribution of Titan runs on a single node, so I thought it would be helpful\nif there was a modular way at runtime to hook up Titan to its dependencies.</p>\n<p>Enter Docker. Now it is possible to run Titan and it's dependencies in separate Docker containers.</p>\n<h2><a id=\"user-content-titan\" class=\"anchor\" aria-hidden=\"true\" href=\"#titan\"></a>Titan</h2>\n<p>This container is using Titan 1.0.0. Please refer to\nits <a href=\"https://github.com/thinkaurelius/titan/wiki/Downloads\">page</a> for more information.</p>\n<h2><a id=\"user-content-tinkerpop-and-gremlin\" class=\"anchor\" aria-hidden=\"true\" href=\"#tinkerpop-and-gremlin\"></a>TinkerPop and Gremlin</h2>\n<p><a href=\"http://www.tinkerpop.com/\" rel=\"nofollow\">TinkerPop</a> is a vendor-independent API specification for\nmanipulating and access Graph databases. This is using TinkerPop 3.0.1.</p>\n<h2><a id=\"user-content-running\" class=\"anchor\" aria-hidden=\"true\" href=\"#running\"></a>Running</h2>\n<p>The minimum system requirements for this stack is 1 GB with 2 cores.</p>\n<pre>docker run -d --name es1 elasticsearch\ndocker run -d --name cas1 elubow/cassandra\ndocker run -d -P --name titan1 --link es1:elasticsearch --link cas1:cassandra elubow/titan-gremlin\n</pre>\n<p>I run with a 3 node Cassandra cluster and some local ports exported, like so:</p>\n<pre>docker run -d --name cas1 -p 7000:7000 -p 7001:7001 -p 7199:7199 -p 9160:9160 -p 9042:9042 elubow/cassandra\ndocker run -d --name cas2 --link cas1:cassandra elubow/cassandra start docker inspect --format '{{ .NetworkSettings.IPAddress }}' cas1\ndocker run -d --name cas3 --link cas1:cassandra elubow/cassandra start docker inspect --format '{{ .NetworkSettings.IPAddress }}' cas1\ndocker run -d --name es1 --link cas1:cassandra -p 9200:9200 elasticsearch\ndocker run -d --name titan1 --link es1:elasticsearch --link cas1:cassandra -p 8182:8182 -p 8184:8184 elubow/titan-gremlin\n</pre>\n<h2><a id=\"user-content-connecting-with-gremlin-client\" class=\"anchor\" aria-hidden=\"true\" href=\"#connecting-with-gremlin-client\"></a>Connecting with Gremlin Client</h2>\n<p>If you want to connect from a Gremlin client, download <a href=\"http://s3.thinkaurelius.com/downloads/titan/titan-1.0.0-hadoop1.zip\" rel=\"nofollow\">Titan</a>.\nThen create a properties file that looks like this where the <code>storage.hostname</code> is the hostname or IP of docker.</p>\n<pre>storage.backend=cassandrathrift\nstorage.hostname=192.168.99.100\n</pre>\n<p>Then start the gremlin server by doing <code>bin/gremlin.sh</code> and run the following commands inside the Gremlin console:</p>\n<pre>gremlin&gt; graph = TitanFactory.open('/Users/elubow/tmp/local-gremlin.properties')\n==&gt;standardtitangraph[cassandrathrift:[192.168.99.100]]\ngremlin&gt; g = graph.traversal()\n==&gt;graphtraversalsource[standardtitangraph[cassandrathrift:[192.168.99.100]], standard]\ngremlin&gt; g.V()\n==&gt;v[4168]\n</pre>\n<p>NOTE: This will not use the elasticsearch backend.</p>\n<h3><a id=\"user-content-ports\" class=\"anchor\" aria-hidden=\"true\" href=\"#ports\"></a>Ports</h3>\n<p>8182: HTTP port for REST API\n8184: JMX Port (You won't need to use this, probably)</p>\n<p>To test out the REST API (over Boot2docker):</p>\n<pre>curl \"http://192.168.99.100:8182?gremlin=100-1\"\ncurl \"http://192.168.99.100:8182?gremlin=g.addV('Name','Eric')\"\ncurl \"http://192.168.99.100:8182?gremlin=g.V()\"\n</pre>\n<h2><a id=\"user-content-dependencies\" class=\"anchor\" aria-hidden=\"true\" href=\"#dependencies\"></a>Dependencies</h2>\n<p>I've tested this container with the following containers:</p>\n<pre>- elubow/cassandra: This is the Cassandra Storage backend for Titan. It scales well for large datasets. Also forces Cassandra 2.1 as that's compatible with Titan.\n- elasticsearch: This is the ElasticSearch Indexing backend for Titan. It provides search capabilities for Titan graph datasets.\n</pre>\n<h2><a id=\"user-content-roadmap\" class=\"anchor\" aria-hidden=\"true\" href=\"#roadmap\"></a>Roadmap</h2>\n<p>In the near future, I'd like to add support for:</p>\n<pre>- Scaling/Clustering Cassandra and ElasticSearch backends.\n- External volumes for persistent data.\n- Security between Titan and its backends.\n- Example application stack integrating with Titan.\n</pre>\n</article>"}}]}},"pageContext":{"alternative_id":11952}}