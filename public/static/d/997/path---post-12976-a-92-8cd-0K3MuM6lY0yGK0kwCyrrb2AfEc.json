{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Cassandra Datacenter & Racks","alternative_id":12976,"content":"<div class=\"entry-content\">\n\t\t\t\t<p>This last post in this series is <a href=\"https://compositecode.blog/2018/10/08/distributed-database-things-to-know-consistent-hashing/\" target=\"_blank\" rel=\"noopener\">Distributed Database Things to Know: Consistent Hashing</a>.</p>\n<p>Let’s talk about the analogy of <em>Apache Cassandra Datacenter &amp; Racks</em> to actual datacenter and racks. I kind of enjoy the use of the terms datacenter and racks to describe architectural elements of Cassandra. However, as time moves on the relationship between these terms and why they’re called datacenter and racks can be obfuscated.</p>\n<p>Take for instance, a datacenter could just be a cloud provider, an actual physical datacenter location, a zone in Azure, or region in some other provider. What an actual Datacenter in Cassandra parlance actually is can vary, but the origins of why it’s called a Datacenter remains the same. The elements of racks also can vary, but also remain the same.</p>\n<h2>Origins: Racks &amp; Datacenters?</h2>\n<p>Let’s cover the actual things in this industry we call <em>datacenter</em> and <em>racks</em> first, unrelated to Apache Cassandra terms.</p>\n<p><strong>Racks</strong>: The easiest way to describe a physical rack is to show pictures of datacenter racks via the ole’ Google images.</p>\n<p><a href=\"https://www.google.com/search?rlz=1C5CHFA_enUS793US793&amp;biw=1280&amp;bih=1090&amp;tbm=isch&amp;sa=1&amp;ei=mjvWW9X-KsW10PEP76i52AI&amp;q=data+center+racks&amp;oq=data+center+racks&amp;gs_l=img.3..0l2j0i7i30j0i5i30l2j0i8i30l2j0i24l3.4078.5164..5371...0.0..0.45.507.12......1....1..gws-wiz-img.......0i8i7i30j0i7i5i30.b-QP90OSuUs\" target=\"_blank\" rel=\"noopener\"><img data-attachment-id=\"14484\" data-permalink=\"https://compositecode.blog/2018/10/29/cassandra-datacenter-racks/racks/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/08/racks.png?w=625\" data-orig-size=\"1277,581\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"racks\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/08/racks.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/08/racks.png?w=625?w=625\" class=\"alignnone size-full wp-image-14484\" src=\"https://compositecode.files.wordpress.com/2018/08/racks.png?w=625\" alt=\"racks.png\" srcset=\"https://compositecode.files.wordpress.com/2018/08/racks.png?w=625 625w, https://compositecode.files.wordpress.com/2018/08/racks.png?w=1248 1248w, https://compositecode.files.wordpress.com/2018/08/racks.png?w=150 150w, https://compositecode.files.wordpress.com/2018/08/racks.png?w=300 300w, https://compositecode.files.wordpress.com/2018/08/racks.png?w=768 768w, https://compositecode.files.wordpress.com/2018/08/racks.png?w=1024 1024w\" /></a></p>\n<p>A rack is something that is located in a data-center, or even just someone’s garage in some odd scenarios. Ya know, if somebody wants serious hardware to work with. The rack then has a number of servers, often various kinds, within that rack itself. As you can see from the images above there’s a wide range of these racks.</p>\n<p><strong>Datacenter</strong>: Again the easiest way to describe a datacenter is to just look at a bunch of pictures of datacenter, albeit you see lots of racks again. But really, that’s what a datacenter is, is a building that has lots and lots of racks.</p>\n<p><a href=\"https://www.google.com/search?q=data+center&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwj0wYHomqreAhXNGTQIHdEDBXMQ_AUIDygC&amp;biw=1280&amp;bih=1090\" target=\"_blank\" rel=\"noopener\"><img data-attachment-id=\"14485\" data-permalink=\"https://compositecode.blog/2018/10/29/cassandra-datacenter-racks/data-center/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/08/data-center.png?w=625\" data-orig-size=\"1279,765\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"data-center\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/08/data-center.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/08/data-center.png?w=625?w=625\" class=\"alignnone size-full wp-image-14485\" src=\"https://compositecode.files.wordpress.com/2018/08/data-center.png?w=625\" alt=\"data-center.png\" srcset=\"https://compositecode.files.wordpress.com/2018/08/data-center.png?w=625 625w, https://compositecode.files.wordpress.com/2018/08/data-center.png?w=1250 1250w, https://compositecode.files.wordpress.com/2018/08/data-center.png?w=150 150w, https://compositecode.files.wordpress.com/2018/08/data-center.png?w=300 300w, https://compositecode.files.wordpress.com/2018/08/data-center.png?w=768 768w, https://compositecode.files.wordpress.com/2018/08/data-center.png?w=1024 1024w\" /></a></p>\n<p>However in Apache Cassandra (and respectively DataStax Enterprise products) a datacenter and rack do not directly correlate to a physical rack or datacenter. The idea is more of an abstraction than hard mapping to the physical realm. In turn it is better to think of datacenter and racks as a way to structure and organize your DataStax Enterprise or Apache Cassandra architecture. From a tree perspective of organizing your cluster, think of things in this hierarchy.</p>\n<ul><li>Cluster\n<ul><li>Datacenter(s)\n<ul><li>Rack(s)\n<ul><li>Server(s)\n<ul><li>Node (vnode)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul><h2>Apache Cassandra Datacenter</h2>\n<p>An Apache Cassandra Datacenter is a group of nodes, related and configured within a cluster for replication purposes. Setting up a specific set of related nodes into a datacenter helps to reduce latency, prevent transactions from impact by other workloads, and related effects. The replication factor can also be setup to write to multiple datacenter, providing additional flexibility in architectural design and organization. One specific element of datacenter to note is that they must contain only one node type:</p>\n<ul><li>Transactional: A standard Cassandra node.</li>\n<li><a href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/graph/graphTOC.html\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise Graph</a>: The Graph database offering from Datastax.</li>\n<li><a href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/analytics/analyticsOverview.html\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise Analytics</a>: An integration with <a href=\"https://spark.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Spark</a>.</li>\n<li><a href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/search/searchTOC.html\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise Search</a>: Integration with <a href=\"http://lucene.apache.org/solr/\" target=\"_blank\" rel=\"noopener\">Apache Solr</a>.</li>\n<li><a href=\"https://docs.datastax.com/en/dse/6.0/dse-dev/datastax_enterprise/analytics/dseSearchAnalyticsOverview.html\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise Search Analytics</a>: Search queries within analytics jobs.</li>\n</ul><p>Depending on the replication factor, data can be written to multiple datacenters. Datacenters must never span physical locations.Each datacenter usually contains only one node type. The node types are:</p>\n<ul class=\"ul\"><li class=\"li\">Transactional: Previously referred to as a Cassandra node.</li>\n<li class=\"li\"><a class=\"xref\" href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/graph/graphTOC.html\" target=\"_blank\" rel=\"noopener\">DSE Graph</a>: A graph database for managing, analyzing, and searching highly-connected data.</li>\n<li class=\"li\"><a class=\"xref\" href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/analytics/analyticsOverview.html\" target=\"_blank\" rel=\"noopener\">DSE Analytics</a>: Integration with Apache Spark.</li>\n<li class=\"li\"><a class=\"xref\" href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/search/searchAbout.html\" target=\"_blank\" rel=\"noopener\">DSE Search</a>: Integration with Apache Solr. Previously referred to as a Solr node.</li>\n<li class=\"li\"><a class=\"xref\" href=\"https://docs.datastax.com/en/dse/6.0/dse-admin/datastax_enterprise/analytics/dseSearchAnalyticsOverview.html\" target=\"_blank\" rel=\"noopener\">DSE SearchAnalytics</a>: DSE Search queries within DSE Analytics jobs.</li>\n</ul><h2>Apache Cassandra Racks</h2>\n<p>An Apache Cassandra Rack is a grouped set of servers. The architecture of Cassandra uses racks so that no replica is stored redundantly inside a singular rack, ensuring that replicas are spread around through different racks in case one rack goes down. Within a datacenter there could be multiple racks with multiple servers, as the hierarchy shown above would dictate.</p>\n<p>To determine where data goes within a rack or sets of racks Apache Cassandra uses what is referred to as a snitch. A snitch determines which racks and datacenter a particular node belongs to, and by respect of that, determines where the replicas of data will end up. This replication strategy which is informed by the snitch can take the form of numerous kinds of snitches, some examples include;</p>\n<ul><li>SimpleSnitch – this snitch treats order as proximity. This is primarily only used when in a single-datacenter deployment.</li>\n<li>Dynamic Snitching – the dynamic snitch monitors read latencies to avoid reading from hosts that have slowed down.</li>\n<li>RackInferringSnitch – Proximity is determined by rack and datacenter, assumed corresponding to 3rd and 2nd octet of each node’s IP address. This particular snitch is often used as an example for writing a custom snitch class since it isn’t particularly useful unless it happens to match one’s deployment conventions.</li>\n</ul><p>In the future I’ll outline a few more snitches, how some of them work with more specific detail, and I’ll get into a whole selection of other topics. Be sure to subscribe to the blog, the ole’ RSS feed works great too, and follow <a href=\"https://twitter.com/CompositeCode\" target=\"_blank\" rel=\"noopener\">@CompositeCode</a> for blog updates. For discourse and hot takes follow me <a href=\"https://twitter.com/Adron\" target=\"_blank\" rel=\"noopener\">@Adron</a>.</p>\n<blockquote>\n<h2>Distributed Database Things to Know Series</h2>\n<ol><li><a href=\"https://compositecode.blog/2018/10/08/distributed-database-things-to-know-consistent-hashing/\" target=\"_blank\" rel=\"noopener\">Consistent Hashing</a></li>\n<li>Apache Cassandra Datacenter &amp; Racks (this post)</li>\n</ol></blockquote>\n\n\t\t<div id=\"geo-post-14483\" class=\"geo geo-post\">\n\t\t\t47.666712\n\t\t\t-122.383132\n\t\t</div>\t\t\t</div><div class=\"entry-content\">\n\t\t\t<p>Project Repo: <a href=\"https://github.com/Adron/InteroperabilityBlackBox\" target=\"_blank\" rel=\"noopener\">Interoperability Black Box</a></p>\n<p>First steps. Let’s get .NET installed and setup. I’m running Ubuntu 18.04 for this setup and start of project. To install .NET on Ubuntu one needs to go through a multi-command process of keys and some other stuff, fortunately Microsoft’s teams have made this almost easy by providing the commands for the various Linux distributions here. The commands I ran are as follows to get all this initial setup done.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.asc.gpg\nsudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/\nwget -q https://packages.microsoft.com/config/ubuntu/18.04/prod.list\nsudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\nsudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg\nsudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list\n</pre>\n<p>After all this I could then install the .NET SDK. It’s been so long since I actually installed .NET on anything that I wasn’t sure if I just needed the runtime, the SDK, or what I’d actually need. I just assumed it would be safe to install the SDK and then install the runtime too.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install dotnet-sdk-2.1\n</pre>\n<p>Then the runtime.</p>\n<pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nsudo apt-get install aspnetcore-runtime-2.1\n</pre>\n<p><img data-attachment-id=\"14246\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/logo/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102\" data-orig-size=\"2000,2000\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"logo\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102?w=625\" class=\"wp-image-14246 alignright\" src=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102\" alt=\"logo\" width=\"102\" height=\"102\" srcset=\"https://compositecode.files.wordpress.com/2018/06/logo.png?w=102&amp;h=102 102w, https://compositecode.files.wordpress.com/2018/06/logo.png?w=204&amp;h=204 204w, https://compositecode.files.wordpress.com/2018/06/logo.png?w=150&amp;h=150 150w\" />Alright. Now with this installed, I wanted to also see if <a href=\"http://www.jetbrains.com/rider/\" target=\"_blank\" rel=\"noopener\">Jetbrains Rider</a> would detect – or at least what would I have to do – to have the IDE detect that .NET is now installed. So I opened up the IDE to see what the results would be. Over the left hand side of the new solution dialog, if anything isn’t installed Rider usually will display a message that X whatever needs installed. But it looked like everything is showing up as installed, “<em>yay for things working (at this point)!</em>”</p>\n<p><img data-attachment-id=\"14248\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/rider-01/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=625\" data-orig-size=\"799,536\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"rider-01\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=625?w=625\" class=\"alignnone size-full wp-image-14248\" src=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=625\" alt=\"rider-01\" srcset=\"https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=625 625w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/rider-01.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/rider-01.png 799w\" /></p>\n<p>Next up is to get a solution started with the pertinent projects for what I want to build.</p>\n<p><img data-attachment-id=\"14249\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/dse2-2/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=625\" data-orig-size=\"800,139\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dse2\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=625?w=625\" class=\"alignnone size-full wp-image-14249\" src=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=625\" alt=\"dse2\" srcset=\"https://compositecode.files.wordpress.com/2018/06/dse2.png?w=625 625w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/dse2.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/dse2.png 800w\" /></p>\n<p><img data-attachment-id=\"14250\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/kazam_screenshot_00001/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=625\" data-orig-size=\"1264,364\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"Kazam_screenshot_00001\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=625?w=625\" class=\"alignnone size-full wp-image-14250\" src=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=625\" alt=\"Kazam_screenshot_00001\" srcset=\"https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=625 625w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=1250 1250w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/kazam_screenshot_00001.png?w=1024 1024w\" /></p>\n<p>For the next stage I created three projects.</p>\n<ol><li>InteroperationalBlackBox – A basic class library that will be used by a console application or whatever other application or service that may need access to the specific business logic or what not.</li>\n<li>InteroperationalBlackBox.Tests – An <a href=\"https://xunit.github.io/\" target=\"_blank\" rel=\"noopener\">xunit</a> testing project for testing anything that might need some good ole’ testing.</li>\n<li>InteroperationalBlackBox.Cli – A console application (CLI) that I’ll use to interact with the class library and add capabilities going forward.</li>\n</ol><p>Alright, now that all the basic projects are setup in the solution, I’ll go out and see about the <a href=\"https://docs.datastax.com/en/developer/csharp-driver-dse/2.3/\" target=\"_blank\" rel=\"noopener\">.NET DataStax Enterprise driver</a>. Inside Jetbrains Rider I can right click on a particular project that I want to add or manage dependencies for. I did that and then put “<em>dse</em>” in the search box. The dialog pops up from the bottom of the IDE and you can add it by clicking on the bottom right plus sign in the description box to the right. Once you click the plus sign, once installed, it becomes a little red x.</p>\n<p><img data-attachment-id=\"14252\" data-permalink=\"https://compositecode.blog/2018/08/05/dse6-net-v/dse-adding-package/\" data-orig-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=625\" data-orig-size=\"1398,594\" data-comments-opened=\"1\" data-image-meta=\"{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}\" data-image-title=\"dse-adding-package\" data-image-description=\"\" data-medium-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=625?w=300\" data-large-file=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=625?w=625\" class=\"alignnone size-full wp-image-14252\" src=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=625\" alt=\"dse-adding-package\" srcset=\"https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=625 625w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=1250 1250w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=150 150w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=300 300w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=768 768w, https://compositecode.files.wordpress.com/2018/06/dse-adding-package.png?w=1024 1024w\" /></p>\n<p>Alright. Now it’s <em>almost</em> time to get some code working. We need ourselves a database first however. I’m going to setup a cluster in <a href=\"https://cloud.google.com/\" target=\"_blank\" rel=\"noopener\">Google Cloud Platform</a> (GCP), but feel free to use whatever cluster you’ve got. These instructions will basically be reusable across wherever you’ve got your cluster setup. I wrote up a walk through and instructions for the GCP Marketplace a few weeks ago. I used the same offering to get this example cluster up and running to use. So, now back to getting the first snippets of code working.</p>\n<p>Let’s write a test first.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\n[Fact]\npublic void ConfirmDatabase_Connects_False()\n{\n    var box = new BlackBox();\n    Assert.Equal(false, box.ConfirmConnection());\n}\n</pre>\n<p>In this test, I named the class called BlackBox and am planning to have a parameterless constructor. But as things go tests are very fluid, or ought to be, and I may change it in the next iteration. I’m thinking, at least to get started, that I’ll have a method to test and confirm a connection for the CLI. I’ve named it ConfirmConnection for that purpose. Initially I’m going to test for false, but that’s primarily just to get started. Now, time to implement.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nnamespace InteroperabilityBlackBox\nusing System;\nusing Dse;\nusing Dse.Auth;\n\nnamespace InteroperabilityBlackBox\n{\n    public class BlackBox\n    {\n        public BlackBox()\n        {}\n\n        public bool ConfirmConnection()\n        {\n            return false;\n        }\n    }\n}\n</pre>\n<p>That gives a passing test and I move forward. For more of the run through of moving from this first step to the finished code session check out this</p>\n<p><iframe class=\"youtube-player\" width=\"625\" height=\"352\" src=\"https://www.youtube.com/embed/2a6_oDV5Dqs?version=3&amp;rel=1&amp;fs=1&amp;autohide=2&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent\" allowfullscreen=\"allowfullscreen\">[embedded content]</iframe></p>\n<p>By the end of the coding session I had a few tests.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nusing Xunit;\n\nnamespace InteroperabilityBlackBox.Tests\n{\n    public class MakingSureItWorksIntegrationTests\n    {\n        [Fact]\n        public void ConfirmDatabase_Connects_False()\n        {\n            var box = new BlackBox();\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n\n        [Fact]\n        public void ConfirmDatabase_PassedValuesConnects_True()\n        {\n            var box = new BlackBox(\"cassandra\", \"\", \"\");\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n\n        [Fact]\n        public void ConfirmDatabase_PassedValuesConnects_False()\n        {\n            var box = new BlackBox(\"cassandra\", \"notThePassword\", \"\");\n            Assert.Equal(false, box.ConfirmConnection());\n        }\n    }\n}\n</pre>\n<p>The respective code for connecting to the database cluster, per the walk through I wrote about here, at session end looked like this.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nusing System;\nusing Dse;\nusing Dse.Auth;\n\nnamespace InteroperabilityBlackBox\n{\n    public class BlackBox : IBoxConnection\n    {\n        public BlackBox(string username, string password, string contactPoint)\n        {\n            UserName = username;\n            Password = password;\n            ContactPoint = contactPoint;\n        }\n\n        public BlackBox()\n        {\n            UserName = \"ConfigValueFromSecretsVault\";\n            Password = \"ConfigValueFromSecretsVault\";\n            ContactPoint = \"ConfigValue\";\n        }\n\n        public string ContactPoint { get; set; }\n        public string UserName { get; set; }\n        public string Password { get; set; }\n\n        public bool ConfirmConnection()\n        {\n            IDseCluster cluster = DseCluster.Builder()\n                .AddContactPoint(ContactPoint)\n                .WithAuthProvider(new DsePlainTextAuthProvider(UserName, Password))\n                .Build();\n\n            try\n            {\n                cluster.Connect();\n                return true;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n                return false;\n            }\n\n        }\n    }\n}\n</pre>\n<p>With my interface providing the contract to meet.</p>\n<pre class=\"brush: csharp; title: ; notranslate\" title=\"\">\nnamespace InteroperabilityBlackBox\n{\n    public interface IBoxConnection\n    {\n        string ContactPoint { get; set; }\n        string UserName { get; set; }\n        string Password { get; set; }\n        bool ConfirmConnection();\n    }\n}\n</pre>\n<h2>Conclusions &amp; Next Steps</h2>\n<p>After I wrapped up the session two things stood out that needed fixed for the next session. I’ll be sure to add these as objectives for the next coding session at 3pm PST on Thursday.</p>\n<ol><li>The tests really needed to more resiliently confirm the integrations that I was working to prove out. My plan at this point is to add some Docker images that would provide the development integration tests a point to work against. This would alleviate the need for something outside of the actual project in the repository to exist. Removing that fragility.</li>\n<li>The application, in its “Black Box”, should do something. For the next session we’ll write up some feature requests we’d want, or maybe someone has some suggestions of functionality they’d like to see implemented in a CLI using .NET Core working against a DataStax Enterprise Cassandra Database Cluster? Feel free to leave a comment or three about a feature, I’ll work on adding it during the next session.</li>\n</ol><ul><li>Project Repo: <a href=\"https://github.com/Adron/InteroperabilityBlackBox\" target=\"_blank\" rel=\"noopener\">https://github.com/Adron/InteroperabilityBlackBox</a></li>\n<li>File an Feature Request: <a href=\"https://github.com/Adron/InteroperabilityBlackBox/issues/new?template=feature_request.md\" target=\"_blank\" rel=\"noopener\">https://github.com/Adron/InteroperabilityBlackBox/issues/new?template=feature_request.md</a></li>\n</ul>\t\t\t\t\t</div><div class=\"entry-content\">\n\t\t\t<p>SITREP = Situation Report. It’s military speak. 💂🏻‍♂️</p>\n<p><a href=\"http://cassandra.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Cassandra</a> is one of the most popular databases in use today. It has many <em>characteristics</em> and distinctive <em>architectural</em> details. In this post I’ll provide a description and some details for a number of these <em>features</em> and <em>characteristics</em>, divided as such. Then, after that (<em>i.e. toward the end, so skip there if you just want to the differences</em>) I’m doing to summarize key differences with the latest release of the <a href=\"https://www.datastax.com/products/datastax-enterprise\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise 6</a> version of the database.</p>\n<h2>Cassandra Characteristics</h2>\n<p>Cassandra is a linearly scalable, highly available, fault tolerant, distributed database. That is, just to name a few of the most important characteristics. The Cassandra database is also cross-platform (runs on any operating systems), multi-cloud (runs on and across multiple clouds), and can survive regional data center outages or even in multi-cloud scenarios entire cloud provider outages!</p>\n<p>Columnar Store, Column Based, or Column Family? What? Ok, so you might have read a number of things about what Cassandra actually is. Let’s break this down. First off, a columnar or column store or column oriented database guarantees data location for a single column in a node on disk. The column may span a bunch of or all of the rows that depend on where or how you specify partitions. However, this isn’t what the Cassandra Database uses. Cassandra is a column-family database.</p>\n<p>A column-family storage architecture makes sure the data is stored based on locality of the data at the partition level, not the column level. Cassandra partitions group rows and columns split by a partition key, then clustered together by a specified clustering column or columns. To query Cassandra, because of this, you must know the partition key in order to avoid full data scans!</p>\n<p>Cassandra has these partitions that guarantee to be on the same node and sort strings table (referred to most commonly as an SSTable *) in the same location within that file. Even though, depending on the compaction strategy, this can change things and the partition can be split across multiple files on a disk. So really, data locality isn’t guaranteed.</p>\n<p>Column-family stores are great for high throughput writes and the ability to linearly scale horizontally (<em>ya know, getting lots and lots of nodes in the cloud!</em>). Reads using the partition key are extremely fast since this key points to exactly where the data resides. However, this often – at least last I know of – leads to a full scan of the data for any type of ad-hoc query.</p>\n<p>A sort of historically trivial but important point is the column-family term comes from the storage engine originally used based on a key value store. The value was a set of column value tuples, which where often referenced as <em>family</em>, and later this <em>family</em> was abstracted into <em>partitions</em>, and then the storage engine was matched to that abstraction. Whew, ok, so that’s a lot of knowledge being coagulated into a solid eh!  [scuse’ my odd artful language use if you visualized that!]</p>\n<p>With all of this described, a that little history sprinkled in, when reading the description of Cassandra in the <a href=\"https://github.com/apache/cassandra\" target=\"_blank\" rel=\"noopener\">README.asc</a> file of the actual <a href=\"https://github.com/apache/cassandra\" target=\"_blank\" rel=\"noopener\">Cassandra Github Repo</a> things make just a little more sense. In the file it starts off with a description,</p>\n<blockquote><p>Apache Cassandra is a highly-scalable partitioned row store. Rows are organized into tables with a required primary key.</p>\n<p>Partitioning means that Cassandra can distribute your data across multiple machines in an application-transparent matter. Cassandra will automatically repartition as machines are added and removed from the cluster.</p>\n<p>Row store means that like relational databases, Cassandra organizes data by rows and columns. The Cassandra Query Language (CQL) is a close relative of SQL.</p></blockquote>\n<p>Now that I’ve covered the 101 level of what Cassandra is I’ll give a look at DataStax and their respective offering.</p>\n<h2>DataStax</h2>\n<p>DataStax Enterprise at first glance might be a bit confusing since immediate questions pop up like, “Doesn’t DataStax make Cassandra?”, “Isn’t DataStax just selling support for Cassandra?”, or “Eh, wha, who is DataStax and what does this have to do with Cassandra?”. Well, I’m gonna tell ya all about where we are today regarding all of these things fit.</p>\n<h3>Performance</h3>\n<p>DataStax provides a whole selection of amenities around a database, which is derived from the Cassandra Distributed Database System. The core product and these amenities are built into what we refer to as the “<em><a href=\"https://www.datastax.com/products/datastax-enterprise-6\" target=\"_blank\" rel=\"noopener\">DataStax Enterprise 6</a></em>“. Some of specific differences are that the database engine itself has been modified out of band and now delivers 2x the performance of the standard Cassandra implemented database engine. I was somewhat dubious when I joined but after the third party benchmarks where completed that showed the difference I grew more confident. My confidence in this speed increase grew as I’ve gotten to work with the latest version I can tell in more than a few situations that it’s faster.</p>\n<h3>Read Repair &amp; NodeSync</h3>\n<p>If you already use Cassandra, read repair works a certain way and that still works just fine in DataStax Enterprise 6. But one also has the option of using NodeSync which can help eliminate scripting, manual intervention, and other repair operations.</p>\n<h3>Spark SQL Connectivity</h3>\n<p>There’s also an always on SQL Engine for automated uptime for apps using DataStax Enterprise Analytics. This provides a better level of analytics requests and end -user analytics. Sort of on this related note, DataStax Studio also has notebook support for Spark SQL now. Writing one’s Spark SQL gets a little easier with this option.</p>\n<h3>Multi-Cloud / Hybrid-Cloud</h3>\n<p>Another huge advantage of DataStax Enterprise is going multi-cloud or hybrid-cloud with DataStax Enterprise Cassandra. Between the Lifecycle Manager (LCM), OpsCenter, and related tooling getting up and running with a cluster across a varying range of data-centers wherever they may be is quick and easy.</p>\n<h2>Summary</h2>\n<p>I’ll be providing deeper dives into the particular technology, the specific differences, and more in the future. For now I’ll wrap up this post as I’ve got a few others coming distinctively related to distributed database systems themselves ranging from specific principles (like CAP Theorem) to operational (how to and best ways to manage) and development (patterns and practices of developing against) related topics.</p>\n<p>Overall the solutions that DataStax offers are solid advantages if you’re stepping into any large scale data (big data or whatever one would call their plethora of data) needs. Over the coming months I’ve got a lot of material – from architectural research and guidance to tactical coding implementation work – that I’ll be blogging about and providing. I’m really looking forward to exploring these capabilities, being the developer advocate to DataStax for the community of users, and learning a thing or three million.</p>\n\t\t<div id=\"geo-post-14307\" class=\"geo geo-post\">\n\t\t\t47.671392\n\t\t\t-122.376081\n\t\t</div>\t\t\t\t\t</div>"}}]}},"pageContext":{"alternative_id":12976}}