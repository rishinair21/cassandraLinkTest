{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Cassandra 4.0 Data Center Security Enhancements","alternative_id":12281,"content":"<p>Apache Cassandra versions 3.x and below have an all or nothing approach when it comes the datacenter user authorization security model. That is, a user has access to all datacenters in the cluster or no datacenters in the cluster. This has changed to something a little more fine grained for versions 4.0 and above, all thanks to  <a href=\"https://github.com/bdeggleston\">Blake Eggleston</a> and the work he has done on <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-13985\">CASSANDRA-13985</a>.</p><p>The Cassandra 4.0 feature added via <a href=\"https://issues.apache.org/jira/browse/CASSANDRA-13985\">CASSANDRA-13985</a> allows an operator to restrict the access of a Cassandra role to specific datacenters. This new shiny feature is effectively datacenter authorization for roles and will help provide better security and protection for multi-datacenter clusters.</p>\n<p>Consider the example scenario where a cluster has two datacenters; <code class=\"highlighter-rouge\">dc1</code> and <code class=\"highlighter-rouge\">dc2</code>.  In this scenario datacenter <code class=\"highlighter-rouge\">dc1</code> backs a web server application that performs Online Transaction Processing, and datacenter <code class=\"highlighter-rouge\">dc2</code> backs an analytics application. The web server application could be restricted via a role to access <code class=\"highlighter-rouge\">dc1</code> only and similarly, the analytics application could be restricted via a role to access <code class=\"highlighter-rouge\">dc2</code> only. The advantage here is that it minimises the reach that each application has to the cluster. If the analytics application was configured incorrectly to connect to <code class=\"highlighter-rouge\">dc1</code> it would fail, rather than quietly running and increasing the load on the <code class=\"highlighter-rouge\">dc1</code> nodes.</p>\n<p>The behaviour of the new datacenter authorization feature can be controlled via the <em>cassandra.yaml</em> file using the new setting named <code class=\"highlighter-rouge\">network_authorizer</code>. Out of the box it can be set to one of two values:</p>\n<ul><li><strong>AllowAllNetworkAuthorizer</strong> - allows any role to access any datacenter effectively disabling datacenter authorization; which is the current behaviour.</li>\n  <li><strong>CassandraNetworkAuthorizer</strong> - allows the ability to store permissions which restrict role access to specific datacenters.</li>\n</ul>\n<ul><li>For the <code class=\"highlighter-rouge\">network_authorizer</code> setting work when set to <strong>CassandraNetworkAuthorizer</strong>, the <code class=\"highlighter-rouge\">authenticator</code> setting must be set to <strong>PasswordAuthenticator</strong>. Otherwise, the node will fail to start.</li>\n  <li>When enabling any authorization feature in Cassandra <strong>including this one</strong>, always increase the <code class=\"highlighter-rouge\">system_auth</code> keyspace replication factor. Failure to do this may result in being locked out of the cluster!</li>\n  <li>Further values can be added for custom behaviour by implementing the <code class=\"highlighter-rouge\">INetworkAuthorizer</code> interface.</li>\n  <li>Apache Cassandra 4.0 will ship with <code class=\"highlighter-rouge\">network_authorizer</code> set to a value of <strong>AllowAllNetworkAuthorizer</strong> in the <em>cassandra.yaml</em> file. This is similar to the existing <code class=\"highlighter-rouge\">authorizer</code> setting in Cassandra where no authorization restrictions are applied by default.</li>\n</ul>\n<p>When <code class=\"highlighter-rouge\">network_authorizer</code> is set to <strong>CassandraNetworkAuthorizer</strong>, the CQL syntax can be used to set the datacenter access for a role in a cluster. To help with the setting of permissions in CQL, its keyword vocabulary has been extended to include the clauses <code class=\"highlighter-rouge\">ACCESS TO ALL DATACENTERS</code> and <code class=\"highlighter-rouge\">ACCESS TO DATACENTERS</code>. Both clause can be added to CQL <code class=\"highlighter-rouge\">ROLE</code> statements when either creating or altering a role.</p>\n<p>To create a role that has access to all datacenters in a cluster use the <code class=\"highlighter-rouge\">ACCESS TO ALL DATACENTERS</code> clause. For example:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>CREATE ROLE foo WITH PASSWORD = '...' AND LOGIN = true AND ACCESS TO ALL DATACENTERS;\n</pre></div></div>\n<p>Similarly a role can be altered to have access to all datacenters. For example:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>ALTER ROLE foo WITH ACCESS TO ALL DATACENTERS;\n</pre></div></div>\n<p>To create a role that is restricted to specific datacenters use the clause <code class=\"highlighter-rouge\">ACCESS TO DATACENTERS</code> followed by a set containing the datacenters the role is authorized to access. The datacenter names are literal values i.e. quoted and comma separated. For example, use the following CQL to restrict the access of a role to datacenters <code class=\"highlighter-rouge\">dc1</code> and <code class=\"highlighter-rouge\">dc3</code> only:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>CREATE ROLE foo WITH PASSWORD = '...' AND LOGIN = true\n    AND ACCESS TO DATACENTERS {'dc1', 'dc3'};\n</pre></div></div>\n<p>Similarly a role can be altered to have restricted access. For example:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>ALTER ROLE foo WITH ACCESS TO DATACENTERS {'dc1', 'dc3'};\n</pre></div></div>\n<p>If the <code class=\"highlighter-rouge\">ACCESS TO DATACENTERS {...}</code> clause is omitted from a <code class=\"highlighter-rouge\">CREATE ROLE</code> command, then the <em>new</em> role will have access to all data centers in the cluster. In this specific case, it is equivalent to adding the <code class=\"highlighter-rouge\">ACCESS TO ALL DATACENTERS</code> clause on the <code class=\"highlighter-rouge\">CREATE ROLE</code> command.</p>\n<p>Here is a quick demo of the feature in action. The following demo uses <code class=\"highlighter-rouge\">ccm</code> to launch a cluster running the trunk version of Apache Cassandra commit Id <a href=\"https://github.com/apache/cassandra/commit/2fe4b9dc69a919cadd6f78e9a4e259e6740b127f\"><code class=\"highlighter-rouge\">2fe4b9d</code></a>. The cluster will have two datacenters with a single node in each, and the <code class=\"highlighter-rouge\">network_authorizer</code> feature will be enabled on each node. The scripts to set up <code class=\"highlighter-rouge\">ccm</code> and cluster are included inline as well.</p>\n<p>Set up <code class=\"highlighter-rouge\">ccm</code> to use the local build of commit <a href=\"https://github.com/apache/cassandra/commit/2fe4b9dc69a919cadd6f78e9a4e259e6740b127f\"><code class=\"highlighter-rouge\">2fe4b9d</code></a> for the Cassandra libraries, by running the following script.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>#!/bin/bash\nset -e\nif [ -z \"${1}\" ]\nthen\n  echo \"Apache Cassandra repository path required.\"\n  exit 1\nfi\nCCM_CASSANDRA_VERSION=\"4.0.0\"\nCCM_CASSANDRA_REPOSITORY_PATH=\".ccm/repository/${CCM_CASSANDRA_VERSION}\"\nCASSANDRA_DIR_PATH=${1}\nCASSANDRA_SUB_DIR_LIST=\"bin build conf lib pylib tools\"\necho \"Building CCM ${CCM_CASSANDRA_VERSION} repository\"\nmkdir -p ~/${CCM_CASSANDRA_REPOSITORY_PATH}\necho ${CCM_CASSANDRA_VERSION} &gt; ~/${CCM_CASSANDRA_REPOSITORY_PATH}/0.version.txt\nfor dir_name in ${CASSANDRA_SUB_DIR_LIST}\ndo\n  echo \"Copying directory ${CASSANDRA_DIR_PATH}/${dir_name} to CCM ${CCM_CASSANDRA_VERSION} repository\"\n  mkdir -p ~/${CCM_CASSANDRA_REPOSITORY_PATH}/${dir_name}\n  cp -r ${CASSANDRA_DIR_PATH}/${dir_name}/* ~/${CCM_CASSANDRA_REPOSITORY_PATH}/${dir_name}\ndone\n</pre></div></div>\n<p>Create the <code class=\"highlighter-rouge\">ccm</code> cluster which uses the libraries from commit <a href=\"https://github.com/apache/cassandra/commit/2fe4b9dc69a919cadd6f78e9a4e259e6740b127f\"><code class=\"highlighter-rouge\">2fe4b9d</code></a> by running the following script.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>#!/bin/bash\nset -e\nCLUSTER_NAME=\"${1:-dc-security-demo}\"\nccm remove ${CLUSTER_NAME}\necho \"Creating cluster '${CLUSTER_NAME}'\"\nccm create ${CLUSTER_NAME} -v 4.0.0\n# Modifies the configuration of a node in the CCM cluster.\nfunction update_node_config {\n  CASSANDRA_YAML_SETTINGS=\"authenticator:PasswordAuthenticator \\\n                          endpoint_snitch:GossipingPropertyFileSnitch \\\n                          network_authorizer:CassandraNetworkAuthorizer \\\n                          num_tokens:32 \\\n                          seeds:127.0.0.1,127.0.0.2\"\n  for key_value_setting in ${CASSANDRA_YAML_SETTINGS}\n  do\n    setting_key=$(echo ${key_value_setting} | cut -d':' -f1)\n    setting_val=$(echo ${key_value_setting} | cut -d':' -f2)\n    sed -ie \"s/${setting_key}\\:\\ .*/${setting_key}:\\ ${setting_val}/g\" \\\n      ~/.ccm/${CLUSTER_NAME}/node${1}/conf/cassandra.yaml\n  done\n  sed -ie \"s/dc=.*/dc=dc${1}/g\" \\\n    ~/.ccm/${CLUSTER_NAME}/node${1}/conf/cassandra-rackdc.properties\n  sed -ie 's/\\#MAX_HEAP_SIZE=\\\"4G\\\"/MAX_HEAP_SIZE=\\\"1G\\\"/g' \\\n    ~/.ccm/${CLUSTER_NAME}/node${1}/conf/cassandra-env.sh\n  sed -ie 's/\\#HEAP_NEWSIZE=\\\"800M\\\"/HEAP_NEWSIZE=\\\"250M\\\"/g' \\\n    ~/.ccm/${CLUSTER_NAME}/node${1}/conf/cassandra-env.sh\n}\nNUMBER_NODES=2\nfor node_num in $(seq ${NUMBER_NODES})\ndo\n  echo \"Adding 'node${node_num}'\"\n  ccm add node${node_num} \\\n    -i 127.0.0.${node_num} \\\n    -j 7${node_num}00 \\\n    -r 0 \\\n    -b \\\n    -s\n  update_node_config ${node_num}\n  # Localhost aliases\n  echo \"ifconfig lo0 alias 127.0.0.${node_num} up\"\n  sudo ifconfig lo0 alias 127.0.0.${node_num} up\ndone\nsed -ie 's/use_vnodes\\:\\ false/use_vnodes:\\ true/g' \\\n  ~/.ccm/${CLUSTER_NAME}/cluster.conf\n</pre></div></div>\n<p>Check the cluster nodes were created.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm status\nCluster: 'dc-security-demo'\n---------------------------\nnode1: DOWN (Not initialized)\nnode2: DOWN (Not initialized)\n</pre></div></div>\n<p>Start the nodes in the cluster.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 start\nanthony@Anthonys-MacBook-Pro ~/ &gt; ccm node2 start\n</pre></div></div>\n<p>Check that the cluster is up and running as expected.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 nodetool status\nDatacenter: dc1\n===============\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address    Load        Tokens  Owns (effective)  Host ID                              Rack\nUN  127.0.0.1  115.46 KiB  32      100.0%            7dafff97-e2c5-4e70-a6a9-523f5594671b rack1\nDatacenter: dc2\n===============\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address    Load       Tokens  Owns (effective)  Host ID                               Rack\nUN  127.0.0.2  67.05 KiB  32      100.0%            437e3bca-d0b7-4102-bc56-201b96856f01  rack1\n</pre></div></div>\n<p>Start a CQL session with the cluster and increase the <code class=\"highlighter-rouge\">system_auth</code> replication.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 cqlsh -u cassandra -p cassandra\nConnected to dc-security-demo at 127.0.0.1:9042.\n[cqlsh 5.0.1 | Cassandra 4.0-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]\nUse HELP for help.\ncassandra@cqlsh&gt;\ncassandra@cqlsh&gt; ALTER KEYSPACE system_auth\n    WITH REPLICATION = {'class' : 'NetworkTopologyStrategy', 'dc1' : 1, 'dc2' : 1};\nWarnings :\nWhen increasing replication factor you need to run a full (-full) repair to distribute the data.\ncassandra@cqlsh&gt; exit;\n</pre></div></div>\n<p>Repair the <code class=\"highlighter-rouge\">system_auth</code> keyspace on both nodes.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 nodetool repair system_auth\n...\nanthony@Anthonys-MacBook-Pro ~/ &gt; ccm node2 nodetool repair system_auth\n...\n</pre></div></div>\n<p>Start another CQL session and create a few roles with different datacenter restrictions.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 cqlsh -u cassandra -p cassandra\nConnected to dc-security-demo at 127.0.0.1:9042.\n[cqlsh 5.0.1 | Cassandra 4.0-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]\nUse HELP for help.\ncassandra@cqlsh&gt;\ncassandra@cqlsh&gt; CREATE ROLE foo WITH PASSWORD = 'foo' AND LOGIN = true\n    AND ACCESS TO DATACENTERS {'dc1'};\ncassandra@cqlsh&gt; CREATE ROLE bar WITH PASSWORD = 'bar' AND LOGIN = true\n    AND ACCESS TO DATACENTERS {'dc2'};\ncassandra@cqlsh&gt; SELECT * FROM system_auth.network_permissions;\n role      | dcs\n-----------+---------\n roles/foo | {'dc1'}\n roles/bar | {'dc2'}\n(2 rows)\ncassandra@cqlsh&gt; exit;\n</pre></div></div>\n<p>Test the datacenter access for the newly created roles.</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre>anthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 cqlsh -u foo -p foo\nConnected to dc-security-demo at 127.0.0.1:9042.\n[cqlsh 5.0.1 | Cassandra 4.0-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]\nUse HELP for help.\nfoo@cqlsh&gt; exit;\nanthony@Anthonys-MacBook-Pro ~/ &gt; ccm node2 cqlsh -u foo -p foo\nConnection error: ('Unable to connect to any servers', {'127.0.0.2': Unauthorized('Error from server: code=2100 [Unauthorized] message=\"You do not have access to this datacenter\"',)})\nanthony@Anthonys-MacBook-Pro ~/ &gt; ccm node1 cqlsh -u bar -p bar\nConnection error: ('Unable to connect to any servers', {'127.0.0.1': Unauthorized('Error from server: code=2100 [Unauthorized] message=\"You do not have access to this datacenter\"',)})\nanthony@Anthonys-MacBook-Pro ~/ &gt; ccm node2 cqlsh -u bar -p bar\nConnected to dc-security-demo at 127.0.0.2:9042.\n[cqlsh 5.0.1 | Cassandra 4.0-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]\nUse HELP for help.\nbar@cqlsh&gt;\n</pre></div></div>\n<p>As can be seen from the output above, a role is unable to establish a CQL session on a node in a particular datacenter unless it has been granted permissions to do so.</p>\n<p>Apache Cassandra 4.0 is definitely shaping up to be an exciting new release of the database! The datacenter authorization feature is a useful for hardening the security of a cluster by limiting the reach of roles and applications talking to the cluster. It is designed to be used in conjunction with other authorization features to create roles that have specific purposes in a cluster. Stay tuned as we post more new features and updates that will be part of Cassandra 4.0.</p>"}}]}},"pageContext":{"alternative_id":12281}}