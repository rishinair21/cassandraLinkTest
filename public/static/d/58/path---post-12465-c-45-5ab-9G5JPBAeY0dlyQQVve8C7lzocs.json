{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"cloudurable/cassandra-image","alternative_id":12465,"content":"<div class=\"markdown-body\">\n          <p>Cassandra allows you to secure the <code>client transport</code> (CQL) as well as the cluster transport (storage transport).</p>\n<p>SSL/TLS have some overhead. This is especially true in the JVM world which is not as performant for handling SSL/TLS unless you are using Netty/OpenSSl integration.</p>\n<p>If possible, use no encryption for the <code>cluster transport</code> (<code>storage transport</code>), and deploy your Cassandra nodes in a private subnet, and limit access to this subnet to the <code>client transport</code>. Also if possible avoid using TLS/SSL on the client transport and do client operations from your app tier, which is located in a non-public subnet.</p>\n<p>However, that is not always possible. You may work in an industry that requires the use of encrypted transports like the U.S. Health Insurance Portability and Accountability Act (HIPAA), Germany’s Federal Data Protection Act,\nThe Payment Card Industry Data Security Standard (PCI DSS), or U.S. Sarbanes-Oxley Act of 2002. Or you might work for a bank or other financial institution. Or it just might be a corporate policy to encrypt such transports.</p>\n<p>Another area of concern is for compliance is authorization, and encrypted data at rest. Cassandra’s has essential security features: authentication, role-based authorization, transport encryption (JMX, client transport, cluster transport), as well as data at rest encryption (encrypting SSTables).</p>\n<p>This article will focus just on setting up encryption for the Cassandra <code>client transport</code> (CQL) and the <code>cluster transport</code>. Later articles will cover various aspects of compliance and encryption.</p>\n<h4>\n<a id=\"user-content-encrypting-the-transports\" class=\"anchor\" href=\"#encrypting-the-transports\" aria-hidden=\"true\"></a>Encrypting the transports</h4>\n<p>Data that travels over the <code>client transport</code> across a network could be accessed by someone you don't want accessing said data with tools like <a href=\"https://www.wireshark.org/\" rel=\"nofollow\">wire shark</a>. If data includes private information, SSN number, credentials (password, username), credit card numbers or account numbers, then we want to make that data unintelligible (encrypted) to any and all 3rd parties. This is especially important if we don't control the network. You can also use TLS to make sure the data has not been tampered with whilst traveling the network. The Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols are designed to provide these features (SSL is the old name for what became TLS but many people still refer to TLS as SSL).</p>\n<p>Cassandra is written in Java. Java defines the JSSE framework which in turn uses the <a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#Design\" rel=\"nofollow\">Java Cryptography Architecture (JCA)</a>. JSSE uses cryptographic service providers from JCA.</p>\n<p>If any of the above is new to you, please take a few minutes to read through the [TLS/SSL Java guide] (<a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html\" rel=\"nofollow\">http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html</a>).</p>\n<h2>\n<a id=\"user-content-setting-up-client-config\" class=\"anchor\" href=\"#setting-up-client-config\" aria-hidden=\"true\"></a>Setting up client config</h2>\n<p>The client transport encryption protects data as it moves from clients to server nodes in the cluster.</p>\n<p>The <code>client_encryption_options</code> are stored in the cassandra.yaml.\nHere is an example config.</p>\n<h4>\n<a id=\"user-content-sample-config\" class=\"anchor\" href=\"#sample-config\" aria-hidden=\"true\"></a>Sample config</h4>\n<pre>\n# enable or disable client/server encryption.\nclient_encryption_options:\n    enabled: false\n    # If enabled and optional is set to true encrypted and unencrypted connections are handled.\n    optional: false\n    keystore: conf/.keystore\n    keystore_password: cassandra\n    require_client_auth: false\n    # Set trustore and truststore_password if require_client_auth is true\n    # truststore: conf/.truststore\n    # truststore_password: cassandra\n    protocol: TLS\n    algorithm: SunX509\n    store_type: JKS\n    cipher_suites: [TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_anon_WITH_AES_256_CBC_SHA]\n</pre>\n<h2>\n<a id=\"user-content-setup-keys\" class=\"anchor\" href=\"#setup-keys\" aria-hidden=\"true\"></a>Setup keys</h2>\n<p>Before we go into the details of setting up the cassandra.yaml file, let's create some trust stores, key stores, and export some keys. The following script generates cluster and client keys.</p>\n<h4>\n<a id=\"user-content-setupkeys-cassandra-securitysh\" class=\"anchor\" href=\"#setupkeys-cassandra-securitysh\" aria-hidden=\"true\"></a>setupkeys-cassandra-security.sh</h4>\n<div class=\"highlight highlight-source-shell\"><pre>#!/bin/bash\nKEY_STORE_PATH=\"$PWD/resources/opt/cassandra/conf/certs\"\nmkdir -p \"$KEY_STORE_PATH\"\nKEY_STORE=\"$KEY_STORE_PATH/cassandra.keystore\"\nPKS_KEY_STORE=\"$KEY_STORE_PATH/cassandra.pks12.keystore\"\nTRUST_STORE=\"$KEY_STORE_PATH/cassandra.truststore\"\nPASSWORD=cassandra\nCLUSTER_NAME=test\nCLUSTER_PUBLIC_CERT=\"$KEY_STORE_PATH/CLUSTER_${CLUSTER_NAME}_PUBLIC.cer\"\nCLIENT_PUBLIC_CERT=\"$KEY_STORE_PATH/CLIENT_${CLUSTER_NAME}_PUBLIC.cer\"\n### Cluster key setup.\n# Create the cluster key for cluster communication.\nkeytool -genkey -keyalg RSA -alias \"${CLUSTER_NAME}_CLUSTER\" -keystore \"$KEY_STORE\" -storepass \"$PASSWORD\" -keypass \"$PASSWORD\" \\\n-dname \"CN=CloudDurable Image $CLUSTER_NAME cluster, OU=Cloudurable, O=Cloudurable, L=San Francisco, ST=CA, C=USA, DC=cloudurable, DC=com\" \\\n-validity 36500\n# Create the public key for the cluster which is used to identify nodes.\nkeytool -export -alias \"${CLUSTER_NAME}_CLUSTER\" -file \"$CLUSTER_PUBLIC_CERT\" -keystore \"$KEY_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\n# Import the identity of the cluster public cluster key into the trust store so that nodes can identify each other.\nkeytool -import -v -trustcacerts -alias \"${CLUSTER_NAME}_CLUSTER\" -file \"$CLUSTER_PUBLIC_CERT\" -keystore \"$TRUST_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\n### Client key setup.\n# Create the client key for CQL.\nkeytool -genkey -keyalg RSA -alias \"${CLUSTER_NAME}_CLIENT\" -keystore \"$KEY_STORE\" -storepass \"$PASSWORD\" -keypass \"$PASSWORD\" \\\n-dname \"CN=CloudDurable Image $CLUSTER_NAME client, OU=Cloudurable, O=Cloudurable, L=San Francisco, ST=CA, C=USA, DC=cloudurable, DC=com\" \\\n-validity 36500\n# Create the public key for the client to identify itself.\nkeytool -export -alias \"${CLUSTER_NAME}_CLIENT\" -file \"$CLIENT_PUBLIC_CERT\" -keystore \"$KEY_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\n# Import the identity of the client pub  key into the trust store so nodes can identify this client.\nkeytool -importcert -v -trustcacerts -alias \"${CLUSTER_NAME}_CLIENT\" -file \"$CLIENT_PUBLIC_CERT\" -keystore \"$TRUST_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\nkeytool -importkeystore -srckeystore \"$KEY_STORE\" -destkeystore \"$PKS_KEY_STORE\" -deststoretype PKCS12 \\\n-srcstorepass \"$PASSWORD\" -deststorepass \"$PASSWORD\"\nopenssl pkcs12 -in \"$PKS_KEY_STORE\" -nokeys -out \"${CLUSTER_NAME}_CLIENT.cer.pem\" -passin pass:cassandra\nopenssl pkcs12 -in \"$PKS_KEY_STORE\" -nodes -nocerts -out \"${CLUSTER_NAME}_CLIENT.key.pem\" -passin pass:cassandra\n</pre></div>\n<p>The <a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html\" rel=\"nofollow\">keytool</a> utility ships with Java SDK. We use this keytool command to create the cluster key. Let's break down the script that generates the keys and certificates.</p>\n<h4>\n<a id=\"user-content-create-the-cluster-key\" class=\"anchor\" href=\"#create-the-cluster-key\" aria-hidden=\"true\"></a>Create the cluster key</h4>\n<pre>keytool -genkey -keyalg RSA -alias \"${CLUSTER_NAME}_CLUSTER\" -keystore \"$KEY_STORE\" -storepass \"$PASSWORD\" -keypass \"$PASSWORD\" \\\n-dname \"CN=CloudDurable Image $CLUSTER_NAME cluster, OU=Cloudurable, O=Cloudurable, L=San Francisco, ST=CA, C=USA, DC=cloudurable, DC=com\" \\\n-validity 36500\n</pre>\n<p>Once we create the cluster key, we will want to export a public key from it.</p>\n<h4>\n<a id=\"user-content-export-a-public-key-for-the-cluster-key\" class=\"anchor\" href=\"#export-a-public-key-for-the-cluster-key\" aria-hidden=\"true\"></a>Export a public key for the cluster key.</h4>\n<pre># Create the public key for the client to identify itself.\nkeytool -export -alias \"${CLUSTER_NAME}_CLIENT\" -file \"$CLIENT_PUBLIC_CERT\" -keystore \"$KEY_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\n</pre>\n<p>Then we will import the public key into the trust store so that nodes can identify each other.</p>\n<h4>\n<a id=\"user-content-import-public-key-for-the-cluster-key-into-the-trust-store-so-nodes-can-identify-each-other\" class=\"anchor\" href=\"#import-public-key-for-the-cluster-key-into-the-trust-store-so-nodes-can-identify-each-other\" aria-hidden=\"true\"></a>Import public key for the cluster key into the trust store so nodes can identify each other</h4>\n<pre># Import the identity of the cluster public cluster key into the trust store so that nodes can identify each other.\nkeytool -import -v -trustcacerts -alias \"${CLUSTER_NAME}_CLUSTER\" -file \"$CLUSTER_PUBLIC_CERT\" -keystore \"$TRUST_STORE\" \\\n-storepass \"$PASSWORD\" -keypass \"$PASSWORD\" -noprompt\n</pre>\n<p>We perform the same three tasks for the client keys. Then lastly we create pem files for the client keys by exporting our Java JKS keystore as a PKCS12 trust store.</p>\n<h4>\n<a id=\"user-content-creating-client-pem-files\" class=\"anchor\" href=\"#creating-client-pem-files\" aria-hidden=\"true\"></a>Creating client pem files</h4>\n<pre>keytool -importkeystore -srcalias \"${CLUSTER_NAME}_CLIENT\" -srckeystore \"$KEY_STORE\" -destkeystore \"$PKS_KEY_STORE\" -deststoretype PKCS12 \\\n-srcstorepass \"$PASSWORD\" -deststorepass \"$PASSWORD\"\nopenssl pkcs12 -in \"$PKS_KEY_STORE\" -nokeys -out \"$KEY_STORE_PATH/${CLUSTER_NAME}_CLIENT.cer.pem\" -passin pass:cassandra\nopenssl pkcs12 -in \"$PKS_KEY_STORE\" -nodes -nocerts -out \"$KEY_STORE_PATH/${CLUSTER_NAME}_CLIENT.key.pem\" -passin pass:cassandra\n</pre>\n<p>Here are the files that get generated.</p>\n<h4>\n<a id=\"user-content-cert-files-stores-private-keys\" class=\"anchor\" href=\"#cert-files-stores-private-keys\" aria-hidden=\"true\"></a>Cert files, stores, private keys</h4>\n<pre>$ pwd\n~/github/cassandra-image\n$ ls resources/opt/cassandra/conf/certs/\nCLIENT_test_PUBLIC.cer\t\tcassandra.pks12.keystore\ttest_CLIENT.key.pem\nCLUSTER_test_PUBLIC.cer\t\tcassandra.truststore\ncassandra.keystore\t\ttest_CLIENT.cer.pem\n</pre>\n<ul><li>\n<code>CLIENT_test_PUBLIC.cer</code>     public client key for the test cluster.</li>\n<li>\n<code>cassandra.pks12.keystore</code>   PKS12 keystore for client used to generate pem</li>\n<li>\n<code>test_CLIENT.key.pem</code>        private client key in pem format used by csqlsh</li>\n<li>\n<code>CLUSTER_test_PUBLIC.cer</code>    public cluster key for the test cluster</li>\n<li>\n<code>cassandra.truststore</code>       Trust store used by cassandra</li>\n<li>\n<code>cassandra.keystore</code>         Key store used by cassandra</li>\n<li>\n<code>test_CLIENT.cer.pem</code>        public client key in pem format used by csqlsh</li>\n</ul><p>For the <a href=\"https://github.com/cloudurable/cassandra-image\">cassandra_image</a> project, these files are copied to <code>/opt/cassandra/conf/cert</code>. To learn more about our Vagrant project see <a href=\"http://cloudurable.com/blog/cassandra-image-vagrant-cluster-example/index.html\" rel=\"nofollow\">Setting up a Cassandra cluster with cassandra image and cassandra cloud project with Vagrant</a>.</p>\n<h2>\n<a id=\"user-content-use-the-keys-that-we-setup\" class=\"anchor\" href=\"#use-the-keys-that-we-setup\" aria-hidden=\"true\"></a>Use the keys that we setup.</h2>\n<p>As part of the provision script for <a href=\"https://github.com/cloudurable/cassandra-image\">cassandra_image</a>(see <a href=\"http://cloudurable.com/blog/cassandra-image-vagrant-cluster-example/index.html\" rel=\"nofollow\">Setting up a Cassandra cluster with cassandra image and cassandra cloud project with Vagrant</a>). We added the following:</p>\n<h4>\n<a id=\"user-content-cassandra-imagescripts040-install-certssh\" class=\"anchor\" href=\"#cassandra-imagescripts040-install-certssh\" aria-hidden=\"true\"></a>cassandra-image/scripts/040-install-certs.sh</h4>\n<pre>#!/bin/bash\nset -e\nDESTINATION_DIRECTORY=/opt/cassandra/conf/certs\nSOURCE_DIRECTORY=\"~/resources$DESTINATION_DIRECTORY\"\nif [ -d \"$SOURCE_DIRECTORY\" ]; then\n    mkdir -p \"$DESTINATION_DIRECTORY\"\n    cp -r \"$SOURCE_DIRECTORY\" \"$DESTINATION_DIRECTORY\"\nfi\nif [ ! -d \"$SOURCE_DIRECTORY\" ]; then\n    echo \"UNABLE TO INSTALL CERTS AS THEY WERE NOT FOUND\"\nfi\n</pre>\n<p>This will copy the certs to the right location if you generated a folder in resources (cassandra_image/resources/opt/cassandra/conf/cert), which the last <a href=\"https://github.com/cloudurable/cassandra-image/wiki/setupkeys-cassandra-security.sh\">script that we covered does</a>.</p>\n<h2>\n<a id=\"user-content-configure-cassandra-to-use-the-keys\" class=\"anchor\" href=\"#configure-cassandra-to-use-the-keys\" aria-hidden=\"true\"></a>Configure Cassandra to use the keys.</h2>\n<h4>\n<a id=\"user-content-optcassandraconf\" class=\"anchor\" href=\"#optcassandraconf\" aria-hidden=\"true\"></a>/opt/cassandra/conf</h4>\n<pre>\nserver_encryption_options:\n    internode_encryption: all\n    keystore: /opt/cassandra/conf/certs/cassandra.keystore\n    keystore_password: cassandra\n    truststore: /opt/cassandra/conf/certs/cassandra.truststore\n    truststore_password: cassandra\n    # More advanced defaults below:\n    protocol: TLS\nclient_encryption_options:\n    enabled: true\n    # If enabled and optional is set to true encrypted and unencrypted connections are handled.\n    optional: false\n    keystore: /opt/cassandra/conf/certs/cassandra.keystore\n    keystore_password: cassandra\n    truststore: /opt/cassandra/conf/certs/cassandra.truststore\n    truststore_password: cassandra\n    require_client_auth: true\n    protocol: TLS\n</pre>\n<p>Now let's test it.</p>\n<h4>\n<a id=\"user-content-testing-that-our-cassandra-nodes-can-talk-to-each-other\" class=\"anchor\" href=\"#testing-that-our-cassandra-nodes-can-talk-to-each-other\" aria-hidden=\"true\"></a>Testing that our Cassandra nodes can talk to each other</h4>\n<pre>$ vagrant up\n# Get a coffee and otherwise relax for a minute.\n# Now log into one of the nodes.\n$ vagrant ssh node0\n# Now check to see if the cluster is formed. \n[vagrant@localhost ~]$ /opt/cassandra/bin/nodetool describecluster\nCluster Information:\n\tName: test\n\tSnitch: org.apache.cassandra.locator.DynamicEndpointSnitch\n\tPartitioner: org.apache.cassandra.dht.Murmur3Partitioner\n\tSchema versions:\n\t\t86afa796-d883-3932-aa73-6b017cef0d19: [192.168.50.4, 192.168.50.5, 192.168.50.6]\n</pre>\n<p>We can see that the servers in the cluster can connect to each other (see <a href=\"http://cloudurable.com/blog/cassandra-image-vagrant-cluster-example/index.html\" rel=\"nofollow\">Setting up a Cassandra cluster with cassandra image and cassandra cloud project with Vagrant</a>).</p>\n<h2>\n<a id=\"user-content-setup-csql-client\" class=\"anchor\" href=\"#setup-csql-client\" aria-hidden=\"true\"></a>Setup csql client</h2>\n<p>We are doing this in OSX. In this example, we have the virtual machines running <em><strong>CentOS 7</strong></em> with <em><strong>Vagrant</strong></em> on <em><strong>VirtualBox</strong></em>. We can connect to those instances with <em><strong>Cassandra</strong></em> <code>cqlsh</code>.</p>\n<p>Let's copy cert files so we can access them from the client (MacBook pro / OSX).</p>\n<h4>\n<a id=\"user-content-copy-cert-files-created-earlier\" class=\"anchor\" href=\"#copy-cert-files-created-earlier\" aria-hidden=\"true\"></a>Copy cert files created earlier.</h4>\n<pre>$ cd ~/github/cassandra-image/resources/opt/cassandra/conf/certs\n$ mkdir /opt/cassandra/conf/certs\n$ cp * /opt/cassandra/conf/certs\n</pre>\n<p>Now we will create a <a href=\"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlshUsingCqlshrc.html\" rel=\"nofollow\">cqlshrc</a> which is a file that dictates how we connect to Cassandra.</p>\n<h4>\n<a id=\"user-content-create-the-cqlshrc-in--cassandra\" class=\"anchor\" href=\"#create-the-cqlshrc-in--cassandra\" aria-hidden=\"true\"></a>Create the cqlshrc in  ~/.cassandra</h4>\n<pre>$ mkdir ~/.cassandra\n$ cd ~/.cassandra\n$ touch cqlshrc\n# edit this file\n</pre>\n<h4>\n<a id=\"user-content-cassandracqlshrc-contents\" class=\"anchor\" href=\"#cassandracqlshrc-contents\" aria-hidden=\"true\"></a>~/.cassandra/cqlshrc contents</h4>\n<pre>\n[connection]\nhostname = 192.168.50.4\nport = 9042\nfactory = cqlshlib.ssl.ssl_transport_factory\n[ssl]\ncertfile =  /opt/cassandra/conf/certs/test_CLIENT.cer.pem\nvalidate = false\n# Next 2 lines must be provided when require_client_auth = true in the cassandra.yaml file\nuserkey = /opt/cassandra/conf/certs/test_CLIENT.key.pem\nusercert = /opt/cassandra/conf/certs/test_CLIENT.cer.pem\n</pre>\n<p>Note we specify the nodes and we are using the pem file as our credentials via SSL to prove who we are instead of a username/password. (We could use both.) We need the <code>userkey</code> and <code>usercert</code> in the <code>cqlshrc</code> because we set <code>require_client_auth = true</code> in the <code>cassandra.yaml</code> file for the cluster nodes.</p>\n<p>Now let's test that the client connection works with SSL via <em><strong>cqlsh</strong></em>.</p>\n<h4>\n<a id=\"user-content-testing-client-connection-using-cqlsh\" class=\"anchor\" href=\"#testing-client-connection-using-cqlsh\" aria-hidden=\"true\"></a>Testing client connection using cqlsh</h4>\n<pre>$ /opt/cassandra/bin/cqlsh --ssl \nConnected to test at 192.168.50.4:9042.\n[cqlsh 5.0.1 | Cassandra 3.9 | CQL spec 3.4.2 | Native protocol v4]\nUse HELP for help.\n</pre>\n<p>Notice we can connect to Cassandra using SSL.  Notice that we are connected to the <code>test</code> cluster, which\nis the cluster we setup in <a href=\"http://cloudurable.com/blog/cassandra-image-vagrant-cluster-example/index.html\" rel=\"nofollow\">Setting up a Cassandra cluster with cassandra image and cassandra cloud project with Vagrant</a>.</p>\n<h2>\n<a id=\"user-content-review\" class=\"anchor\" href=\"#review\" aria-hidden=\"true\"></a>Review</h2>\n<p>We setup keys for client and clustering. We deployed keys to three Linux boxes using Vagrant provisioning.\nWe then setup <code>cqlsh</code> to use SSL. We then logged into one of the nodes and checked that the network was setup with the <code>nodetool describecluster</code>. Then we locally setup <code>csqlsh</code> to connect to the cluster using SSL.</p>\n<h2>\n<a id=\"user-content-more-to-come\" class=\"anchor\" href=\"#more-to-come\" aria-hidden=\"true\"></a>More to come.</h2>\n<p>Check back with us at the <a href=\"http://cloudurable.com/blog/index.html\" rel=\"nofollow\">Cloudurable blog</a> to find out more about <code>cassandra-image</code> and <code>cassandra-cloud</code>.</p>\n<h2>\n<a id=\"user-content-about-cloudurable\" class=\"anchor\" href=\"#about-cloudurable\" aria-hidden=\"true\"></a>About Cloudurable</h2>\n<p><a href=\"http://cloudurable.com/\" rel=\"nofollow\">Cloudurable</a> provides AMIs, cloudformation templates and monitoring tools\nto support <a href=\"http://cloudurable.com/services/index.html\" rel=\"nofollow\">Cassandra in production running in EC2</a>.\nWe also teach advanced <a href=\"http://cloudurable.com/cassandra-course/index.html\" rel=\"nofollow\">Cassandra courses which teaches how one could develop, support and deploy Cassandra to production in AWS EC2</a>.</p>\n<h4>\n<a id=\"user-content-references\" class=\"anchor\" href=\"#references\" aria-hidden=\"true\"></a>References</h4>\n<ul><li>Carpenter, Jeff; Hewitt, Eben (2016-06-29). <em><strong>Cassandra: The Definitive Guide: Distributed Data at Web Scale.</strong></em> O'Reilly Media.</li>\n<li><a href=\"https://developer.jboss.org/wiki/KeystoreFormatsJKSAndPEMCheatsheet\" rel=\"nofollow\">https://developer.jboss.org/wiki/KeystoreFormatsJKSAndPEMCheatsheet</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html\" rel=\"nofollow\">Java SSL support</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/FIPS.html\" rel=\"nofollow\">https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/FIPS.html</a></li>\n<li><a href=\"http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/security/secureSSLNodeToNode_t.html\" rel=\"nofollow\">http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/security/secureSSLNodeToNode_t.html</a></li>\n<li><a href=\"https://docs.datastax.com/en/cassandra/2.1/cassandra/security/secureSSLCertificates_t.html\" rel=\"nofollow\">https://docs.datastax.com/en/cassandra/2.1/cassandra/security/secureSSLCertificates_t.html</a></li>\n<li><a href=\"https://docs.datastax.com/en/cassandra/2.1/cassandra/security/secureSSLClientToNode_t.html\" rel=\"nofollow\">https://docs.datastax.com/en/cassandra/2.1/cassandra/security/secureSSLClientToNode_t.html</a></li>\n<li><a href=\"https://docs.datastax.com/en/cassandra/3.0/cassandra/configuration/secureCqlshSSL.html\" rel=\"nofollow\">Using cqlsh with SSL</a></li>\n<li><a href=\"http://cloudurable.com/blog/cassandra-image-vagrant-cluster-example/index.html\" rel=\"nofollow\">Setting up a Cassandra cluster with cassandra image and cassandra cloud project with Vagrant</a></li>\n<li>\n<a href=\"https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlshUsingCqlshrc.html\" rel=\"nofollow\">Configuring cqlsh from a file</a>.</li>\n</ul></div><div id=\"wiki-footer\" class=\"mt-5 mb-0 wiki-footer gollum-markdown-content\">\n          <div class=\"Box Box--condensed bg-gray box-shadow\">\n            <div class=\"Box-body  markdown-body\">\n              <h2>\n<a id=\"user-content-about-us\" class=\"anchor\" href=\"#about-us\" aria-hidden=\"true\"></a>About us</h2>\n<p><a href=\"http://cloudurable.com/\" rel=\"nofollow\">Cloudurable™: streamline DevOps for Cassandra running on AWS</a> provides AMIs, CloudWatch Monitoring, CloudFormation templates and monitoring tools\nto support <a href=\"http://cloudurable.com/services/index.html\" rel=\"nofollow\">Cassandra in production running in EC2</a>.\nWe also teach advanced <a href=\"http://cloudurable.com/services/index.html\" rel=\"nofollow\">Cassandra courses which teaches how one could develop, support and deploy Cassandra to production in AWS EC2 for Developers and DevOps</a>.</p>\n<h4>\n<a id=\"user-content-more-info\" class=\"anchor\" href=\"#more-info\" aria-hidden=\"true\"></a>More info</h4>\n<p>Please take some time to read the <a href=\"http://cloudurable.com/advantages/index.html\" rel=\"nofollow\">Advantage of using Cloudurable™</a>.</p>\n<p>Cloudurable provides:</p>\n<ul><li>\n<a href=\"http://cloudurable.com/subscription_support_benefits_cassandra/index.html\" rel=\"nofollow\">Subscription Amazon Cassandra support to streamline DevOps</a> (<a href=\"http://cloudurable.com/subscription_support/index.html\" rel=\"nofollow\">Support subscription pricing for Cassandra and Kafka in AWS</a>)</li>\n<li><a href=\"http://cloudurable.com/cassandra-course/index.html\" rel=\"nofollow\">Cassandra Course</a></li>\n<li><a href=\"http://cloudurable.com/service-quick-start-mentoring-cassandra-or-kafka-aws-ec2/index.html\" rel=\"nofollow\">Cassandra Consulting: Quick Start</a></li>\n<li><a href=\"http://cloudurable.com/service-architecture-analysis-cassandra-or-kafka-aws-ec2/index.html\" rel=\"nofollow\">Cassandra Consulting: Architecture Analysis</a></li>\n</ul><p><a href=\"http://cloudurable.com/kafka-training/index.html\" rel=\"nofollow\">Kafka training</a>, <a href=\"http://cloudurable.com/kafka-aws-consulting/index.html\" rel=\"nofollow\">Kafka consulting</a>,\n<a href=\"http://cloudurable.com/cassandra-course/index.html\" rel=\"nofollow\">Cassandra training</a>, <a href=\"http://cloudurable.com/kafka-aws-consulting/index.html\" rel=\"nofollow\">Cassandra consulting</a>,\n<a href=\"http://cloudurable.com/spark-aws-emr-training/index.html\" rel=\"nofollow\">Spark training</a>, <a href=\"http://cloudurable.com/spark-aws-emr-consulting/index.html\" rel=\"nofollow\">Spark consulting</a></p>\n            </div>\n          </div>\n        </div>"}}]}},"pageContext":{"alternative_id":12465}}