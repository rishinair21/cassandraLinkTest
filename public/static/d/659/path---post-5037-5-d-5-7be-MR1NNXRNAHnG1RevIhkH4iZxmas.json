{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Consulting Cassandra: Second Contact with the Monolith","alternative_id":5037,"content":"<p><img class=\"aligncenter wp-image-6309 size-full\" src=\"https://www.instaclustr.com/wp-content/uploads/2017/09/Consulting-Cassandra-Second-Contact-with-the-monolith-blog.jpg\" alt=\"Consulting Cassandra - Second contact with the monolith Instaclustr blog\" width=\"640\" height=\"356\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Second-Contact-with-the-monolith-blog.jpg 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Second-Contact-with-the-monolith-blog-300x167.jpg 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Second-Contact-with-the-monolith-blog-86x48.jpg 86w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Second-Contact-with-the-monolith-blog-194x108.jpg 194w\" />In the first part of this blog (<a href=\"https://www.instaclustr.com/cassandra-cluster-creation-10-minutes/\">Cluster Creation in Under Ten Minutes</a>), I created a Cassandra cluster. In this part, we blast off to the Moon for 2nd contact.</p> <h2>Consulting the Oracles</h2> <h6><b>Croesus</b>: Hi Oracle.  How will my war with Cyrus the Persian go?<br /><b>Oracle</b>: If you proceed, a great empire will be destroyed.<br /><b>Croesus</b>: Great – Attack!</h6> <p>What happened? Croesus was defeated as he had incorrectly assumed it would be the Persian empire that would be destroyed.</p> <h6><b>King Priam of Troy:</b> Hi Cassandra. The Trojans have left an offering of a wooden horse at the gate. Is it safe to bring it inside?<br /><b>Cassandra:</b>  No! Leave it alone, it’s a trick! The Trojan soldiers are inside and Troy will be destroyed!<br /><b>King Priam</b>: That’s a Yes then. Bring the horse inside the gates!</h6> <p>What happened? Troy was sacked. Cassandra was a prophetess but had been cursed by Apollo so that no-one believed her.</p> <p><img class=\"aligncenter wp-image-6316 size-full\" src=\"https://www.instaclustr.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog.jpg\" alt=\"Consulting Cassandra oracle Instaclustr Blog\" width=\"904\" height=\"732\" srcset=\"https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog.jpg 904w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-300x243.jpg 300w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-768x622.jpg 768w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-761x616.jpg 761w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-640x518.jpg 640w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-59x48.jpg 59w, https://24b4dt1v60e526bo2p349l4c-wpengine.netdna-ssl.com/wp-content/uploads/2017/09/Consulting-Cassandra-Oracle-Instaclustr-blog-133x108.jpg 133w\" /><em>A wall painting from Pompeii, showing the Trojan princess Cassandra, fainting, as she possesses the power of prophecy and knows that the horse means the doom of Troy (How did soldiers fit in a horse that small? It’s no surprise that Cassandra’s warning wasn’t taken seriously ????</em></p> <p>Let’s explore one way to connect to and consult Cassandra…<br /></p> <h2>Consulting Cassandra (CQLSH)</h2> <p>Now that my Cassandra cluster is up and running, what can I do with it? How do I talk to it? What sort of clients are supported? What’s the protocol? How does the client find the cluster? Is the client just another node in the gossip protocol? (No). Is there a default REST API? (No).</p> <p><a href=\"http://cassandra.apache.org/doc/latest/getting_started/querying.html#client-drivers\">The Apache docs say</a> that the API to Cassandra is <a href=\"http://cassandra.apache.org/doc/latest/cql/index.html#cql\">CQL</a>, the Cassandra Query Language. To use CQL, you will need to connect to the cluster, which can be done:</p> <ul><li>either using cqlsh,</li> <li>or through a client driver for Cassandra.</li> </ul><p>Here’s the general Instaclustr documentation on <a href=\"https://support.instaclustr.com/hc/en-us/articles/203759250-Connecting-to-a-Cluster\">Connecting to a Cluster</a>, and the specific documentation for <a href=\"https://support.instaclustr.com/hc/en-us/articles/216238308-Connecting-to-Instaclustr-Using-Cqlsh\">Connecting to Instaclustr Using Cqlsh</a>.</p> <p>The 1st thing you need to do is to obtain the Apache Cassandra installation including the cqlsh shell. You don’t need to install or run Cassandra on your machine to run cqlsh. Using cqlsh allows you to check that you can connect to your newly created Instaclustr Cassandra Cluster and is also useful for debugging even after you have a Java etc client working.</p> <p>Downloading Cassandra – using a browser click on the link to the Latest Version <a href=\"http://cassandra.apache.org/download/\">on this page</a> and it will take you to mirror options for you to download from. Once downloaded and you’ve extracted/unzipped it (reminder, no need to start it), start a command line on your preferred OS, go to the Cassandra bin directory and type the magic incantation to connect:</p> <p>Cassandra drivers must be provided with the address of at least one node in the cluster and will auto-discover the remaining topology (all the IP addresses) of the cluster via the CQL binary protocol. The driver maintains a connection to the cluster and will keep this internal topology info up-to-date (Cassandra uses the gossip protocol internally to build this topology information). Subsequently the client can connect to any node (depending on the load balancing policy).</p>\n<p>To connect to the cluster we need a public ip address of at least one node, and username and password. Log into <a href=\"https://console.instaclustr.com\">https://console.instaclustr.com</a> and click on the name of the trial cluster created previously.  Under details, you will see the 3 nodes and their Public IP addresses. Under Settings (Firewall rules) you can check (or add) client IP addresses that are allowed to connect to the Cassandra cluster. Click on the Connection Information Tab for detailed connection information. This page shows all the public IP addresses of the nodes, and the username/password.  For cqlsh connection just pick any one public IP address. </p>\n<p>I have a confession. I’ve heard that CQL is “like” SQL which makes it confusing for people with a SQL background. I may be lucky! The only experience I have with SQL is a group project at university to design and implement a SQL database. Once we built it we didn’t actually use it for anything useful. Oh, and a I built a system for distributed Oracle instances (with an eventual time to consistency of 30 minutes). So I’m not (yet) confused by CQL, I just have no preconceptions at all.</p>\n<p>Once the cqlsh is up and running you can consult Cassandra. I tried typing “Hi Cassandra;” but only got “SyntaxException: line 1:0 no viable alternative at input ‘hi’ ([hi]…)”. Time to read the <a href=\"http://cassandra.apache.org/doc/latest/cql/index.html\">CQL commands docs</a> or type “help;”.</p>\n<p>DESCRIBE is useful. E.g. “DESCRIBE keyspaces;”, “DESCRIBE tables;”</p>\n<p>DESCRIBE keyspace instaclustr;</p>\n<p>will show information about all the tables in the Instaclustr keyspace (one that our management system creates in every cluster we manage for synthetic transaction monitoring and other uses). <br /></p>\n<p>SELECT * from keyspace.table;</p>\n<p>is useful for looking at things (assuming there are not too many!) Once you’ve found a keyspace and table then try it out.</p>\n<p>SELECT peer from system.peers;</p>\n<p>gives you the IP addresses of the other 2 nodes (that you didn’t connect to via the client) in the cluster.</p>\n<p>Note that we recommend that you immediately change the superuser password, and create a non-superuser account.  Here’s how to change the password.</p>\n<p>LIST users;</p>\n<p>And then:</p>\n<p>ALTER USER iccassandra WITH PASSWORD ‘newpassword’;</p>\n<p>And while we’re at it let’s make sure HAL can’t take over by creating a non super user:</p>\n<p>CREATE user hal9000 with password ‘ImsorryDave’ NOSUPERUSER;</p>\n<p>And allow hal900 to do things:</p>\n<p>GRANT ALL ON ALL KEYSPACES TO hal9000;</p>\n<p>EXIT;</p>\n<p>And reconnect again as hal9000.</p>\n<p>Note that roles (allowing more sophisticated security) are supported in the current versions of Cassandra:</p>\n<p>LIST roles;</p>\n<p>What else can you do? Well, you can try creating a keyspace, a table, inserting some rows, selecting rows, etc.  However, this requires some understanding of Cassandra concepts including keyspaces, tables, primary keys, partition keys, clustering columns, etc. </p>\n<p>Here is the relevant documentation and some definitions:</p>\n<p><a href=\"http://cassandra.apache.org/doc/latest/cql/ddl.html#create-keyspace\">http://cassandra.apache.org/doc/latest/cql/ddl.html#create-keyspace</a></p>\n<p><a href=\"http://cassandra.apache.org/doc/latest/cql/dml.html\">http://cassandra.apache.org/doc/latest/cql/dml.html</a></p>\n<p><b>Keyspace</b></p>\n<p>A namespace container that defines how data is replicated on nodes. Similar to a “database” in a RDBMS.</p>\n<p><b>Table (Column Family)</b></p>\n<p>A container for rows, similar to the table in a relational system. Called table in CQL 3.</p>\n<p><b>Primary Key</b></p>\n<p>The partition key. One or more columns that uniquely identify a row in a table.   </p>\n<p><b>Clustering Column</b></p>\n<p>In the table definition, a clustering column is a column that is part of the compound primary key definition, but not part of the  partition key. Columns are clustered in multiple rows within a single partition. The clustering order is determined by the position of columns in the compound primary key definition.</p>\n<p><b>Compound Partition Key</b></p>\n<p>A partition key consisting of multiple columns.</p>\n<p><b>Compound Primary Key</b></p>\n<p>A primary key consisting of the partition key, which determines on which node data is stored, and one or more additional columns that determine clustering.</p>\n<p>Here are some examples of possible primary keys:</p>\n<p><b><i>Simple Primary Key, Simple Partition Key</i></b></p>\n<p>PRIMARY KEY(partition1)</p>\n<p><b><i>Simple Primary Key, Compound Partition Key</i></b></p>\n<p>PRIMARY KEY((partition1, partition2))<br /><b><i></i></b></p>\n<p><b><i>Compound Primary Key,  Simple Partition Key</i></b></p>\n<p>PRIMARY KEY(partition1, clustering1)</p>\n<p>PRIMARY KEY(partition1, clustering1, clustering2)</p>\n<p><b><i>Compound Primary Key, Compound Partition Key</i></b></p>\n<p>PRIMARY KEY((partition1, partition2), clustering1)</p>\n<p>PRIMARY KEY((partition1, partition2), clustering1, clustering2)</p>\n<p>Let’s create a table and some data. First, create a keyspace with some probably naive defaults. I called it dev.</p>\n<p>CREATE KEYSPACE dev WITH replication = {‘class’: ‘SimpleStrategy’, ‘replication_factor’: ‘3’}  AND durable_writes = true;</p>\n<p>Have a look at it with:</p>\n<p>DESCRIBE KEYSPACE dev;</p>\n<p>Now create a table for fake sensor data to store data of the form:</p>\n<p>&lt;’host1’, ‘temp’, ‘sometime’, 22.2&gt;</p>\n<p>CREATE TABLE dev.sensordata(     host text,     metric text,     time timestamp,     value double,   PRIMARY KEY ((host, metric), time) ) WITH CLUSTERING ORDER BY (time ASC);</p>\n<p>What does this do? Create a new table in the dev keyspace with the name sensordata with the columns: host, metric, time, value. The partition key is compound and is made up of host AND metric.  All queries will need to specify values for both of these columns. The time column is a clustering column (order) with ascending order (past time to now).</p>\n<p>Now type:</p>\n<p>DESCRIBE TABLE dev.sensordata;</p>\n<p>And you get all this back:</p>\n<p>To insert some data type:</p>\n<p>And then:</p>\n<p>SELECT * from dev.sensordata;</p>\n<p><b>host</b>  | <b>metric</b> | <b>time</b>                                                                   | <b>value<br /></b>——-+———-+————————————————-+——–<br /><b>host1</b> |   <b>temp</b> | <b>2017-08-24 06:01:14.504000+0000</b> |  <b>22.2</b></p>\n<p>If you repeat the identical insert and then select again you will get 2 rows because the time is different:</p>\n<p><b>host</b>  | <b>metric</b> | <b>time</b>                                                                   | <b>value<br /></b>——–+——–+————————————————–+——–<br /><b>host1</b> |   <b>temp</b> | <b>2017-08-24 06:01:14.504000+0000</b> |  <b>22.2<br /></b><b>host1</b> |   <b>temp</b> | <b>2017-08-24 06:02:35.412000+0000</b> |  <b>22.2</b></p>\n<p>Notice that the results are returned in increasing time order.</p>\n<p>Now let’s try out the WHERE clause. I’ve added some more rows and now have 2 hosts and 2 metrics:</p>\n<p><b> host</b>    | <b>metric</b>        | <b>time</b>                                                                  | <b>value<br /></b>——–+————-+————————————————–+——-<br /><b>host2</b> |     <b>temp</b>     | <b>2017-08-24 06:05:34.893000+0000</b> |  <b>20.4<br /></b><b>host2</b> |     <b>temp </b>    | <b>2017-08-24 06:05:43.805000+0000</b> |  <b>22.1<br /></b><b>host2</b> |     <b>temp</b>     | <b>2017-08-24 06:05:49.333000+0000</b> |  <b>20.1<br /></b><b>host1</b> | <b>pressure</b> | <b>2017-08-24 06:06:21.136000+0000</b> |    <b>44<br /></b><b>host1</b> | <b>pressure</b> | <b>2017-08-24 06:06:29.276000+0000</b> |    <b>42<br /></b><b>host2</b> | <b>pressure</b> | <b>2017-08-24 06:06:11.406000+0000</b> |    <b>33<br /></b><b>host2</b> | <b>pressure</b> | <b>2017-08-24 06:06:14.758000+0000</b> |    <b>44<br /></b><b>host1</b> |     <b>temp    </b> | <b>2017-08-24 06:01:14.504000+0000</b> |  <b>22.2<br /></b><b>host1</b> |     <b>temp</b>     | <b>2017-08-24 06:02:35.412000+0000</b> |  <b>22.2<br /></b><b>host1</b> |     <b>temp     </b>| <b>2017-08-24 06:03:44.405000+0000</b> |  <b>10.9<br /></b><b>host1</b> |     <b>temp</b>     | <b>2017-08-24 06:03:51.538000+0000</b> |  <b>11.9</b></p>\n<p>To get rows for host1 AND temp only type:</p>\n<p>SELECT * from dev.sensordata where host=’host1′ and metric=’temp’;</p>\n<p><b>host</b>   | <b>metric</b> | <b>time</b>                                                                   | <b>value<br /></b>——-+———-+—————————————————+——-<br /><b>host1</b> |   <b>temp  </b>| <b>2017-08-24 06:01:14.504000+0000</b> |  <b>22.2<br /></b><b>host1</b> |   <b>temp </b> | <b>2017-08-24 06:02:35.412000+0000</b> |  <b>22.2<br /></b><b>host1</b> |   <b>temp</b>  | <b>2017-08-24 06:03:44.405000+0000</b> |  <b>10.9<br /></b><b>host1</b> |   <b>temp</b>  | <b>2017-08-24 06:03:51.538000+0000</b> |  <b>11.9</b></p>\n<p>Notice that we had to specify <b>both</b> of the compound partition key columns in the where clauses.  You can also add a where clause over the clustering key (with inequalities to). </p>\n<p>SELECT * from dev.sensordata where host=’host1′ and metric=’temp’ and time&gt;toTimestamp(now());</p>\n<p>Returns nothing (predictably, as we are asking for future events). Now try some other select queries with missing where clauses. For example the following won’t work as the partition keys are missing (only the clustering key is provided):</p>\n<p>SELECT * from dev.sensordata where time&gt;toTimestamp(now());</p>\n<p>InvalidRequest: Error from server: code=2200 [Invalid query] message=”Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING”</p>\n<p>What does ALLOW FILTERING do?</p>\n<p>By default, CQL only allows select queries that don’t involve “filtering” server side, i.e. queries where we know that all (live) record read will be returned (maybe partly) in the result set. The reasoning is that those “non filtering” queries have predictable performance in the sense that they will execute in a time that is proportional to the amount of data <b>returned</b> by the query (which can be controlled through LIMIT).</p>\n<p>The ALLOW FILTERING option allows to explicitly allow (some) queries that require filtering. Please note that a query using ALLOW FILTERING may thus have unpredictable performance (for the definition above), i.e. even a query that selects a handful of records <b>may</b> exhibit performance that depends on the total amount of data stored in the cluster.  … However, if you “know what you are doing”, you can force the execution of this query by using ALLOW FILTERING (I don’t so I won’t).</p>\n<p>Aggregate functions (min, max, avg, count, sum) will also work on this table (it would be more sensible to have a time range where clause):</p>\n<p>SELECT max(value) from dev.sensordata where host=’host1′ and metric=’temp’  and time&lt;toTimestamp(now());</p>\n<p><b>system.max(value)<br /></b>————————–<br /><b>                            22.2</b></p>\n<h2>NOTES</h2>\n<p>1 In this simple example there is no bucket (time) column which is common in Cassandra time series data tables (but is it really needed?)</p>\n<p>2 I made time order ascending. Descending is more common for time series data when you are interested in the most recent data first.</p>\n<p>3 How do you know what the possible host and metric names are? Try this:</p>\n<p>SELECT distinct host,metric from dev.sensordata;</p>\n<p><b>host</b>   | <b>metric<br /></b>——-+———-<br /><b>host2</b> |     <b>temp<br /></b><b>host1</b> | <b>pressure<br /></b><b>host2</b> | <b>pressure<br /></b><b>host1</b> |     <b>temp</b></p>"}}]}},"pageContext":{"alternative_id":5037}}