{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"Let’s play with Cassandra… (Part 3/3)","alternative_id":11852,"content":"<div class=\"sharify-container\"><ul><li class=\"sharify-btn-twitter\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Tweet on Twitter\" href=\"https://twitter.com/intent/tweet?text=Let%26%238217%3Bs+play+with+Cassandra%26%238230%3B+%28Part+3%2F3%29: https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-twitter\">&#13;\n\t\t\t\t\t\t\t\t\tTweet&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-facebook\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Facebook\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fblog.octo.com%2Fen%2Fnosql-lets-play-with-cassandra-part-33%2F\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-facebook\">&#13;\n\t\t\t\t\t\t\t\t\tShare&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-gplus\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Google+\" href=\"http://plus.google.com/share?url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-gplus\">&#13;\n\t\t\t\t\t\t\t\t\t+1&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-linkedin\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Linkedin\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/&amp;title=Let’s play with Cassandra… (Part 3/3)\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-linkedin\">&#13;\n\t\t\t\t\t\t\t\t\tLinkedIn&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li></ul></div><p>In this part, we will see a lot of Java code (the API exists in several other languages) and look at the client part of Cassandra. </p>\n<h2>Use Case #0: Open and close a connection to any node of your Cluster</h2>\n<p>Cassandra is now accessed using Thrift. The following code opens a connection to the specified node. </p>\n<pre><code class=\"java\">TTransport tr = new TSocket(\"192.168.216.128\", 9160);&#13;\nTProtocol proto = new TBinaryProtocol(tr);&#13;\ntr.open();&#13;\nCassandra.Client cassandraClient = new Cassandra.Client(proto);&#13;\n...&#13;\ntr.close();</code></pre>\n<p>As I <a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-13\">told previously</a>, the default API does not provide any pool connections mechanisms that would have (1) the capacity to close and reopen connections in case a node has failed, (2) the capacity to load-balance requests among all the nodes of the cluster and (3) the capacity to automatically requesting another node in case the first attempt fails.</p>\n<h2>Use Case #1: Insert a customer </h2>\n<p>The following code insert a customer in the storage space (note that the object aCustomer  is the object you want to persist)</p>\n<pre><code class=\"java\">Map&lt;String , List&lt; ColumnOrSuperColumn &gt; &gt; insertClientDataMap = new HashMap&lt; string ,List&lt;ColumnOrSuperColumn &gt; &gt;();&#13;\nList&lt; ColumnOrSuperColumn &gt; clientRowData = new ArrayList&lt; ColumnOrSuperColumn &gt;();&#13;\n&#13;\nColumnOrSuperColumn columnOrSuperColumn = new ColumnOrSuperColumn();&#13;\ncolumnOrSuperColumn.setColumn(new Column(\"fullName\".getBytes(UTF8),  &#13;\naCustomer.getName().getBytes(UTF8), timestamp));&#13;\nclientRowData.add(columnOrSuperColumn);&#13;\n&#13;\ncolumnOrSuperColumn = new ColumnOrSuperColumn();&#13;\ncolumnOrSuperColumn.setColumn(new Column(\"age\".getBytes(UTF8),  &#13;\naCustomer.getAge().toString().getBytes(UTF8), timestamp));&#13;\nclientRowData.add(columnOrSuperColumn);&#13;\n&#13;\ncolumnOrSuperColumn = new ColumnOrSuperColumn();&#13;\ncolumnOrSuperColumn.setColumn(new Column(\"accountIds\".getBytes(UTF8),  &#13;\naCustomer.getAccountIds().getBytes(UTF8), timestamp));&#13;\nclientRowData.add(columnOrSuperColumn);</code></pre>\n<p>As you can read, the first line is in fact a Java representation of the structure: a map in which a row is identified by its key, and the value is a list of columns.  The rest of the code only create and append ColumnOrSuperColumn objects. Here, the columns have the following names: fullName, age, accountIds. You will also notice that when you create the column, you specify the timestamp the column is created. Remember that this timestamp will be used for “read-repair” and so that all your clients must be synchronized (using a NTP for instance)</p>\n<pre><code class=\"java\">insertClientDataMap.put(\"customers\", clientRowData);</code></pre>\n<p>The above lines put the list of Columns into the ColumnFamily named customers (so you can add several ColumnFamily in one time with the batch_insert method). Then, the following line inserts the customer into the Cassandra Storage. You need so to specify the keyspace, the row key (here the customer name), the Column family you want to insert and the Consistency Level you have chosen for this data.</p>\n<pre><code class=\"java\">cassandraClient.batch_insert(\"myBank\", aCustomer.getName(), insertClientDataMap,  ConsistencyLevel.DCQUORUM);</code></pre>\n<h2>Use Case #2: Insert operations for an account</h2>\n<p>Inserting an operation is almost the same code instead we are using SuperColumn. </p>\n<pre><code class=\"java\">Map&lt; string , List&lt; ColumnOrSuperColumn &gt; &gt; insertOperationDataMap = new HashMap&lt; string , List&lt; ColumnOrSuperColumn &gt; &gt;();&#13;\nList&lt; ColumnOrSuperColumn&gt; operationRowData = new ArrayList&lt; ColumnOrSuperColumn &gt;();&#13;\nList&lt; Column &gt; columns = new ArrayList&lt; Column &gt;();&#13;\n&#13;\n// THESE ARE THE SUPERCOLUMN COLUMNS&#13;\ncolumns.add(new Column(\"amount\".getBytes(UTF8),  &#13;\naBankOperation.getAmount().getBytes(UTF8), timestamp));&#13;\ncolumns.add(new Column(\"label\".getBytes(UTF8),  &#13;\naBankOperation.getLabel().getBytes(UTF8), timestamp));&#13;\nif (aBankOperation.getType() != null) {&#13;\n\tcolumns.add(new Column(\"type\".getBytes(UTF8),  &#13;\naBankOperation.getType().getBytes(UTF8), timestamp));&#13;\n}&#13;\nFor now, there is nothing new. A list of Columns is created with three columns: amount, label and type (withdrawal, transfer...). &#13;\n// here is a superColumn&#13;\nSuperColumn superColumn = new  &#13;\nSuperColumn(CassandraUUIDHelper.asByteArray(CassandraUUIDHelper.getTimeUUID()),  &#13;\ncolumns);&#13;\nColumnOrSuperColumn columnOrSuperColumn = new ColumnOrSuperColumn();&#13;\ncolumnOrSuperColumn.setSuper_column(superColumn);&#13;\noperationRowData.add(columnOrSuperColumn);</code></pre>\n<p>This case is different from the previous one. Instead of adding the previously defined Columns to the row, we create a SuperColumn with a dynamic (and time-based UUID) name…Quite dynamic isn’t it? Then, the three columns are added to the super column itself.<br />\nThe end of the code is similar to the previous one. The row is added to the ColumnFamily named operations and then associated to the current customer account id. </p>\n<pre><code class=\"java\">// put row data dans la columnFamily operations&#13;\ninsertOperationDataMap.put(\"operations\", operationRowData);&#13;\ncassandraClient.batch_insert(\"myBank\", aCustomer.getAccountIds(),  &#13;\ninsertOperationDataMap, ConsistencyLevel.ONE);</code></pre>\n<p>Here is what you get when reading the operations for the accounId<br /><a href=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png\"><img src=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png\" alt=\"\" title=\"exit\" width=\"564\" height=\"319\" class=\"aligncenter size-full wp-image-11797\" srcset=\"https://blog.octo.com/wp-content/uploads/2010/06/exit.png 564w, https://blog.octo.com/wp-content/uploads/2010/06/exit-300x170.png 300w, https://blog.octo.com/wp-content/uploads/2010/06/exit-160x90.png 160w\" /></a></p>\n<h2>Use Case #3 : Removing an item</h2>\n<p>Removing a complete row is – in terms of API – as simple as the rest of the API. </p>\n<pre><code class=\"java\">cassandraClient.remove(\"myBank\", myAccountId, new ColumnPath(\"operations\"),  timestamp, ConsistencyLevel.ONE);</code></pre>\n<p>It is yet a little more complex when you are looking<a href=\"http://spyced.blogspot.com/2010/02/distributed-deletes-in-cassandra.html\"> inside</a>. In brief, in a distributed system where node failure will occur, you can’t simply physically delete the record. So you replace it by a tombstone and the “mark as deleted” record will be effectively deleted once the tombstone will be considered enough old. At least, you can still use “logical deletion” and write a code that do not use these flagged records. </p>\n<h2>To (quickly) conclude this series of articles</h2>\n<p>I really like Cassandra which looks like a ready to use tools (even if NoSQL is plenty of great tools) and a way to achieve high performance system at “low” (at least lower) cost than with commercial tools. There are still concerns I hope I will be able to discuss like security (Cassandra provides authentication mechanisms…), searching (or at least getting ranges of datas), monitoring (and how to monitor all the nodes of your cluster into a unique tools like <a href=\"http://ganglia.sourceforge.net/\">Ganglia</a>, <a href=\"http://www.nagios.org/\">Nagios</a> or <a href=\"http://graphite.wikidot.com/start\">Graphite</a> or even how to use <a href=\"http://hadoop.apache.org/\">Hadoop</a> above Cassandra. </p>\n<p>To be continued…</p>\n<div class=\"sharify-container\"><ul><li class=\"sharify-btn-twitter\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Tweet on Twitter\" href=\"https://twitter.com/intent/tweet?text=Let%26%238217%3Bs+play+with+Cassandra%26%238230%3B+%28Part+3%2F3%29: https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-twitter\">&#13;\n\t\t\t\t\t\t\t\t\tTweet&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-facebook\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Facebook\" href=\"http://www.facebook.com/sharer.php?u=https%3A%2F%2Fblog.octo.com%2Fen%2Fnosql-lets-play-with-cassandra-part-33%2F\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-facebook\">&#13;\n\t\t\t\t\t\t\t\t\tShare&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-gplus\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Google+\" href=\"http://plus.google.com/share?url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-gplus\">&#13;\n\t\t\t\t\t\t\t\t\t+1&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li><li class=\"sharify-btn-linkedin\">&#13;\n\t\t\t\t\t\t\t\t<a title=\"Share on Linkedin\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-33/&amp;title=Let’s play with Cassandra… (Part 3/3)\">&#13;\n\t\t\t\t\t\t\t\t\t<i class=\"sharify sharify-linkedin\">&#13;\n\t\t\t\t\t\t\t\t\tLinkedIn&#13;\n\t\t\t\t\t\t\t\t\t0&#13;\n\t\t\t\t\t\t\t\t</i></a>&#13;\n\t\t\t\t\t\t\t</li></ul></div><div class=\"yarpp-related\">\n<h3>Related posts:</h3><ol><li><a href=\"https://blog.octo.com/en/nosqleu-and-nosql-what%e2%80%99s-the-deal/\" rel=\"bookmark\" title=\"no:sql(eu) and NoSQL: What’s the deal?\">no:sql(eu) and NoSQL: What’s the deal? </a></li>\n<li><a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-13/\" rel=\"bookmark\" title=\"Let’s play with Cassandra… (Part 1/3)\">Let’s play with Cassandra… (Part 1/3) </a></li>\n<li><a href=\"https://blog.octo.com/en/nosql-lets-play-with-cassandra-part-23/\" rel=\"bookmark\" title=\"Let’s play with Cassandra…(Part 2/3)\">Let’s play with Cassandra…(Part 2/3) </a></li>\n</ol></div>"}}]}},"pageContext":{"alternative_id":11852}}