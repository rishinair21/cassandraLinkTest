{"data":{"allAnantCassandralinks":{"edges":[{"node":{"title":"wikimedia/restbase","alternative_id":11987,"content":"<article class=\"markdown-body entry-content\" itemprop=\"text\">\n<p>RESTBase was built to provide a <a href=\"http://rest.wikimedia.org/en.wikipedia.org/v1/?doc\" rel=\"nofollow\">low-latency &amp; high-throughput API for\nWikipedia / Wikimedia\ncontent</a>. It is basically\na storage proxy, which presents a coherent API powered by Swagger specs to the\noutside, and backs up many of these entry points with storage.  The default\n<strong>table storage</strong> backend is based on Cassandra, which helps it to perform\nwell at Wikimedia's scale without placing undue burden on operations.</p>\n<p>As a proxy, RESTBase does not perform any significant content processing\nitself. Instead, it requests content transformations from backend services\nwhen needed, and typically (depending on configuration) stores it back for\nlater retrieval. For high-volume static end points, most requests will be\nsatisfied directly from storage.</p>\n<p>The <em>table storage</em> backends conform to a RESTful <a href=\"https://github.com/wikimedia/restbase/blob/master/doc/TableStorageAPI.md\">table storage\nAPI</a>\nsimilar to <a href=\"http://aws.amazon.com/documentation/dynamodb/\" rel=\"nofollow\">Amazon DynamoDB</a>\nand <a href=\"https://developers.google.com/datastore/\" rel=\"nofollow\">Google DataStore</a>. The primary\nimplementation uses Apache Cassandra. Notable features include automatically\nmaintained secondary indexes and some lightweight transaction support. A\n<a href=\"https://github.com/wikimedia/restbase-mod-table-sqlite\">SQLite backend</a> is\nunder development.</p>\n<p>RESTBase systematically emits statsd metrics about storage and backend\nrequests. Specifically, the systematic metric production for backend services\nprovides a good baseline level of instrumentation for tracking performance\nand errors in a micro-service architecture.</p>\n<h2><a id=\"user-content-issue-tracking\" class=\"anchor\" aria-hidden=\"true\" href=\"#issue-tracking\"></a>Issue tracking</h2>\n<p>We use <a href=\"https://phabricator.wikimedia.org/maniphest/task/create/?projects=PHID-PROJ-mszihytuo3ij3fcxcxgm\" rel=\"nofollow\">Phabricator to track\nissues</a>. See the <a href=\"https://phabricator.wikimedia.org/tag/restbase/\" rel=\"nofollow\">list of current issues in RESTBase</a>.</p>\n<h2><a id=\"user-content-installation\" class=\"anchor\" aria-hidden=\"true\" href=\"#installation\"></a>Installation</h2>\n<p>Make sure that you have node 6+:</p>\n<div class=\"highlight highlight-source-shell\"><pre>sudo apt-get install nodejs nodejs-legacy nodejs-dev npm</pre></div>\n<p>Note: if your distribution does not have a recent version of Node, you can\ninstall one via <a href=\"https://github.com/creationix/nvm\">nvm</a>.</p>\n<p>From the <em>restbase</em> project directory, install the Node dependencies:</p>\n<div class=\"highlight highlight-source-shell\"><pre>npm install</pre></div>\n<p>Start RESTBase:</p>\n<div class=\"highlight highlight-source-shell\"><pre>node server</pre></div>\n<p>The defaults without a config file should work for a local Cassandra\ninstallation with the default passwords. Restbase has been tested with\n<a href=\"http://wiki.apache.org/cassandra/DebianPackaging\" rel=\"nofollow\">Cassandra 2.2.6</a>.\nTo customize RESTBase's behaviour, copy the example config to its\ndefault location:</p>\n<div class=\"highlight highlight-source-shell\"><pre>cp config.example.yaml config.yaml</pre></div>\n<p>You can also pass in the path to another file with the <code>-c</code> commandline option\nto <code>server.js</code>. If you're running a single Cassandra instance (e.g. a local\ndevelopment environment), set <code>defaultConsistency</code> to <code>one</code> in\n<code>config.yaml</code>.</p>\n<h2><a id=\"user-content-usage\" class=\"anchor\" aria-hidden=\"true\" href=\"#usage\"></a>Usage</h2>\n<p>See the <a href=\"https://en.wikipedia.org/api/rest_v1/\" rel=\"nofollow\">Wikimedia REST content API sandbox</a>\nfor a fine example of what RESTBase can do.</p>\n<h2><a id=\"user-content-development\" class=\"anchor\" aria-hidden=\"true\" href=\"#development\"></a>Development</h2>\n<h3><a id=\"user-content-testing\" class=\"anchor\" aria-hidden=\"true\" href=\"#testing\"></a>Testing</h3>\n<p>To run all the tests from a clean slate, first make sure Cassandra is running locally, then fire up the tests with npm:</p>\n<pre>npm test\n</pre>\n<p>To run tests from a single file, e.g. <em>test/features/pagecontent/rerendering.js</em>, run mocha with the file as an argument:</p>\n<pre>mocha test/features/pagecontent/rerendering.js\n</pre>\n<p>Note that this might require some setup (e.g. creating the necessary domain and buckets), which is currently done by <em>test/buckets.js</em>.</p>\n<p>This also works for a directory, e.g. <em>test/features/pagecontent/</em>:</p>\n<pre>mocha test/features/pagecontent\n</pre>\n<h3><a id=\"user-content-coverage\" class=\"anchor\" aria-hidden=\"true\" href=\"#coverage\"></a>Coverage</h3>\n<p>To check the test coverage, use npm, then browse the report:</p>\n<pre>npm run-script coverage\n</pre>\n<p>The coverage report can now be found in <em>&lt;project&gt;/coverage/lcov-report/index.html</em>.</p>\n<h2><a id=\"user-content-design-docs\" class=\"anchor\" aria-hidden=\"true\" href=\"#design-docs\"></a>Design docs</h2>\n</article>"}}]}},"pageContext":{"alternative_id":11987}}